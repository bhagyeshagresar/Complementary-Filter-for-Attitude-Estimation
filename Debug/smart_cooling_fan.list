
smart_cooling_fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08007a80  08007a80  00017a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f3c  08007f3c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f44  08007f44  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e0  0800812c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800812c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb52  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b69  00000000  00000000  0002cd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dee  00000000  00000000  0002ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5ea  00000000  00000000  00046d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008abee  00000000  00000000  00055348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dff36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  000dff88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a68 	.word	0x08007a68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007a68 	.word	0x08007a68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fbf7 	bl	8001800 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f81f 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f933 	bl	8001280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800101a:	f000 f907 	bl	800122c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800101e:	f000 f8cf 	bl	80011c0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001022:	f000 f885 	bl	8001130 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102a:	f000 fc5b 	bl	80018e4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	2120      	movs	r1, #32
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <main+0x44>)
 8001034:	f000 fee4 	bl	8001e00 <HAL_GPIO_WritePin>
  MX_IWDG_Init();
 8001038:	f000 f8a8 	bl	800118c <MX_IWDG_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(18);
 800103c:	2012      	movs	r0, #18
 800103e:	f000 fc51 	bl	80018e4 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <main+0x48>)
 8001044:	f001 f87c 	bl	8002140 <HAL_IWDG_Refresh>
	  HAL_Delay(18);
 8001048:	e7f8      	b.n	800103c <main+0x34>
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000
 8001050:	20000250 	.word	0x20000250

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 f888 	bl	8003178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <SystemClock_Config+0xd4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <SystemClock_Config+0xd4>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <SystemClock_Config+0xd4>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <SystemClock_Config+0xd8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <SystemClock_Config+0xd8>)
 80010a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <SystemClock_Config+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010b4:	230a      	movs	r3, #10
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010bc:	2310      	movs	r3, #16
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010cc:	2310      	movs	r3, #16
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010da:	2307      	movs	r3, #7
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f83c 	bl	8002160 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ee:	f000 f935 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2302      	movs	r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fa9e 	bl	8002650 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800111a:	f000 f91f 	bl	800135c <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f000 fe61 	bl	8001e34 <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 f8f0 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001fc 	.word	0x200001fc
 8001184:	40005400 	.word	0x40005400
 8001188:	000186a0 	.word	0x000186a0

0800118c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_IWDG_Init+0x2c>)
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <MX_IWDG_Init+0x30>)
 8001194:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_IWDG_Init+0x2c>)
 8001198:	2201      	movs	r2, #1
 800119a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 79;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_IWDG_Init+0x2c>)
 800119e:	224f      	movs	r2, #79	; 0x4f
 80011a0:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_IWDG_Init+0x2c>)
 80011a4:	f000 ff8a 	bl	80020bc <HAL_IWDG_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 80011ae:	f000 f8d5 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000250 	.word	0x20000250
 80011bc:	40003000 	.word	0x40003000

080011c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI2_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_SPI2_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI2_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI2_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI2_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI2_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI2_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI2_Init+0x64>)
 80011ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI2_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI2_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI2_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI2_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI2_Init+0x64>)
 8001212:	f001 fc3d 	bl	8002a90 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 f89e 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000025c 	.word	0x2000025c
 8001228:	40003800 	.word	0x40003800

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f001 fc9d 	bl	8002ba2 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f875 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200002b4 	.word	0x200002b4
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2120      	movs	r1, #32
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <MX_GPIO_Init+0xd4>)
 800130c:	f000 fd78 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001316:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_GPIO_Init+0xd8>)
 8001328:	f000 fbe6 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_GPIO_Init+0xd4>)
 8001344:	f000 fbd8 	bl	8001af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020800 	.word	0x40020800

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_MspInit+0x4c>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013a6:	2007      	movs	r0, #7
 80013a8:	f000 fb72 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_I2C_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fa:	2312      	movs	r3, #18
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001406:	2304      	movs	r3, #4
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_I2C_MspInit+0x8c>)
 8001412:	f000 fb71 	bl	8001af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_I2C_MspInit+0x88>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a28      	ldr	r2, [pc, #160]	; (8001508 <HAL_SPI_MspInit+0xc0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d14a      	bne.n	8001500 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_SPI_MspInit+0xc4>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_SPI_MspInit+0xc4>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_SPI_MspInit+0xc4>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_SPI_MspInit+0xc4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_SPI_MspInit+0xc4>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_SPI_MspInit+0xc4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014be:	230c      	movs	r3, #12
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ce:	2305      	movs	r3, #5
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <HAL_SPI_MspInit+0xc8>)
 80014da:	f000 fb0d 	bl	8001af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80014de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f0:	2305      	movs	r3, #5
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <HAL_SPI_MspInit+0xcc>)
 80014fc:	f000 fafc 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40003800 	.word	0x40003800
 800150c:	40023800 	.word	0x40023800
 8001510:	40020800 	.word	0x40020800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_UART_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_MspInit+0x8c>)
 800158e:	f000 fab3 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40004400 	.word	0x40004400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f956 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_kill>:

int _kill(int pid, int sig)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001616:	f001 fd85 	bl	8003124 <__errno>
 800161a:	4603      	mov	r3, r0
 800161c:	2216      	movs	r2, #22
 800161e:	601a      	str	r2, [r3, #0]
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_exit>:

void _exit (int status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_kill>
  while (1) {}    /* Make sure we hang here */
 800163e:	e7fe      	b.n	800163e <_exit+0x12>

08001640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e00a      	b.n	8001668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001652:	f3af 8000 	nop.w
 8001656:	4601      	mov	r1, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf0      	blt.n	8001652 <_read+0x12>
  }

  return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e009      	b.n	80016a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf1      	blt.n	800168c <_write+0x12>
  }
  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_close>:

int _close(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	605a      	str	r2, [r3, #4]
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_isatty>:

int _isatty(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f001 fcea 	bl	8003124 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20018000 	.word	0x20018000
 800177c:	00000400 	.word	0x00000400
 8001780:	200002f8 	.word	0x200002f8
 8001784:	20000310 	.word	0x20000310

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017b2:	490e      	ldr	r1, [pc, #56]	; (80017ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c8:	4c0b      	ldr	r4, [pc, #44]	; (80017f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d6:	f7ff ffd7 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f001 fca9 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff fc13 	bl	8001008 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017f0:	08007f4c 	.word	0x08007f4c
  ldr r2, =_sbss
 80017f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017f8:	20000310 	.word	0x20000310

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f931 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f808 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fd98 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f93b 	bl	8001ade <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f911 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000000 	.word	0x20000000
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	200002fc 	.word	0x200002fc

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200002fc 	.word	0x200002fc

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff47 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff5c 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb0 	bl	8001a4c <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e159      	b.n	8001dc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8148 	bne.w	8001dc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d005      	beq.n	8001b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d130      	bne.n	8001bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 0201 	and.w	r2, r3, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d017      	beq.n	8001be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d123      	bne.n	8001c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	08da      	lsrs	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3208      	adds	r2, #8
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a2 	beq.w	8001dc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <HAL_GPIO_Init+0x2e8>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a56      	ldr	r2, [pc, #344]	; (8001de0 <HAL_GPIO_Init+0x2e8>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <HAL_GPIO_Init+0x2e8>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9a:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_GPIO_Init+0x2ec>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a49      	ldr	r2, [pc, #292]	; (8001de8 <HAL_GPIO_Init+0x2f0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x202>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <HAL_GPIO_Init+0x2f4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x1fe>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <HAL_GPIO_Init+0x2f8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x1fa>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a46      	ldr	r2, [pc, #280]	; (8001df4 <HAL_GPIO_Init+0x2fc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x1f6>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a45      	ldr	r2, [pc, #276]	; (8001df8 <HAL_GPIO_Init+0x300>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x1f2>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x204>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x204>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x204>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x204>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x204>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0c:	4935      	ldr	r1, [pc, #212]	; (8001de4 <HAL_GPIO_Init+0x2ec>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3e:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d44:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d68:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d92:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_GPIO_Init+0x304>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f67f aea2 	bls.w	8001b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020400 	.word	0x40020400
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e12b      	b.n	800209e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff faac 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e98:	f000 fdd2 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a81      	ldr	r2, [pc, #516]	; (80020a8 <HAL_I2C_Init+0x274>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d807      	bhi.n	8001eb8 <HAL_I2C_Init+0x84>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4a80      	ldr	r2, [pc, #512]	; (80020ac <HAL_I2C_Init+0x278>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e006      	b.n	8001ec6 <HAL_I2C_Init+0x92>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a7d      	ldr	r2, [pc, #500]	; (80020b0 <HAL_I2C_Init+0x27c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bf94      	ite	ls
 8001ec0:	2301      	movls	r3, #1
 8001ec2:	2300      	movhi	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0e7      	b.n	800209e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a78      	ldr	r2, [pc, #480]	; (80020b4 <HAL_I2C_Init+0x280>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a6a      	ldr	r2, [pc, #424]	; (80020a8 <HAL_I2C_Init+0x274>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d802      	bhi.n	8001f08 <HAL_I2C_Init+0xd4>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3301      	adds	r3, #1
 8001f06:	e009      	b.n	8001f1c <HAL_I2C_Init+0xe8>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_I2C_Init+0x284>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	495c      	ldr	r1, [pc, #368]	; (80020a8 <HAL_I2C_Init+0x274>)
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d819      	bhi.n	8001f70 <HAL_I2C_Init+0x13c>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e59      	subs	r1, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f4a:	1c59      	adds	r1, r3, #1
 8001f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f50:	400b      	ands	r3, r1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_I2C_Init+0x138>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e59      	subs	r1, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	e051      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	e04f      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d111      	bne.n	8001f9c <HAL_I2C_Init+0x168>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e58      	subs	r0, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e012      	b.n	8001fc2 <HAL_I2C_Init+0x18e>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e58      	subs	r0, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	0099      	lsls	r1, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Init+0x196>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e022      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_I2C_Init+0x1bc>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e58      	subs	r0, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	440b      	add	r3, r1
 8001fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fee:	e00f      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1e58      	subs	r0, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0099      	lsls	r1, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	6809      	ldr	r1, [r1, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800203e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6911      	ldr	r1, [r2, #16]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68d2      	ldr	r2, [r2, #12]
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	430b      	orrs	r3, r1
 8002052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	000186a0 	.word	0x000186a0
 80020ac:	001e847f 	.word	0x001e847f
 80020b0:	003d08ff 	.word	0x003d08ff
 80020b4:	431bde83 	.word	0x431bde83
 80020b8:	10624dd3 	.word	0x10624dd3

080020bc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e034      	b.n	8002138 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80020d6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f245 5255 	movw	r2, #21845	; 0x5555
 80020e0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6852      	ldr	r2, [r2, #4]
 80020ea:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6892      	ldr	r2, [r2, #8]
 80020f4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80020f6:	f7ff fbe9 	bl	80018cc <HAL_GetTick>
 80020fa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80020fc:	e00f      	b.n	800211e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80020fe:	f7ff fbe5 	bl	80018cc <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b31      	cmp	r3, #49	; 0x31
 800210a:	d908      	bls.n	800211e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e00c      	b.n	8002138 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e8      	bne.n	80020fe <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002134:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002150:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e267      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d075      	beq.n	800226a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b85      	ldr	r3, [pc, #532]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b82      	ldr	r3, [pc, #520]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e242      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x74>
 80021c6:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a75      	ldr	r2, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b70      	ldr	r3, [pc, #448]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6f      	ldr	r2, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6c      	ldr	r2, [pc, #432]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021f8:	4b69      	ldr	r3, [pc, #420]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a68      	ldr	r2, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a65      	ldr	r2, [pc, #404]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fb58 	bl	80018cc <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fb54 	bl	80018cc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e207      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fb44 	bl	80018cc <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff fb40 	bl	80018cc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1f3      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002276:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1c7      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4937      	ldr	r1, [pc, #220]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_OscConfig+0x244>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff faf9 	bl	80018cc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff faf5 	bl	80018cc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1a8      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4925      	ldr	r1, [pc, #148]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x244>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff fad8 	bl	80018cc <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff fad4 	bl	80018cc <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e187      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d036      	beq.n	80023b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_RCC_OscConfig+0x248>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7ff fab8 	bl	80018cc <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff fab4 	bl	80018cc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e167      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
 800237e:	e01b      	b.n	80023b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x248>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7ff faa1 	bl	80018cc <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e00e      	b.n	80023ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238e:	f7ff fa9d 	bl	80018cc <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d907      	bls.n	80023ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e150      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8097 	beq.w	80024f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b7d      	ldr	r3, [pc, #500]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a7c      	ldr	r2, [pc, #496]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b77      	ldr	r3, [pc, #476]	; (80025d4 <HAL_RCC_OscConfig+0x474>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b74      	ldr	r3, [pc, #464]	; (80025d4 <HAL_RCC_OscConfig+0x474>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a73      	ldr	r2, [pc, #460]	; (80025d4 <HAL_RCC_OscConfig+0x474>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7ff fa5d 	bl	80018cc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7ff fa59 	bl	80018cc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e10c      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_OscConfig+0x474>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x2ea>
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a63      	ldr	r2, [pc, #396]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x324>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x30c>
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a5e      	ldr	r2, [pc, #376]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x324>
 800246c:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a57      	ldr	r2, [pc, #348]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a54      	ldr	r2, [pc, #336]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7ff fa1e 	bl	80018cc <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7ff fa1a 	bl	80018cc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0cb      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ee      	beq.n	8002494 <HAL_RCC_OscConfig+0x334>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7ff fa08 	bl	80018cc <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7ff fa04 	bl	80018cc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0b5      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ee      	bne.n	80024c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	4a38      	ldr	r2, [pc, #224]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a1 	beq.w	8002640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d05c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d141      	bne.n	8002596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff f9d8 	bl	80018cc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7ff f9d4 	bl	80018cc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e087      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	491b      	ldr	r1, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x478>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff f9ad 	bl	80018cc <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7ff f9a9 	bl	80018cc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e05c      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x416>
 8002594:	e054      	b.n	8002640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff f996 	bl	80018cc <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a4:	f7ff f992 	bl	80018cc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e045      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_OscConfig+0x470>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x444>
 80025c2:	e03d      	b.n	8002640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e038      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000
 80025d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x4ec>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d028      	beq.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d121      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d11a      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002614:	4293      	cmp	r3, r2
 8002616:	d111      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	3b01      	subs	r3, #1
 8002626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7ff f8c4 	bl	80018cc <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7ff f8c0 	bl	80018cc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f824 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	08007a80 	.word	0x08007a80
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b094      	sub	sp, #80	; 0x50
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	2300      	movs	r3, #0
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80e1 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e0db      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002854:	e0db      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002858:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285a:	e0d8      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2200      	movs	r2, #0
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
 800287c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
 800288a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4621      	mov	r1, r4
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	6139      	str	r1, [r7, #16]
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c0:	4659      	mov	r1, fp
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4651      	mov	r1, sl
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4651      	mov	r1, sl
 80028d0:	ebb2 0801 	subs.w	r8, r2, r1
 80028d4:	4659      	mov	r1, fp
 80028d6:	eb63 0901 	sbc.w	r9, r3, r1
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	eb18 0303 	adds.w	r3, r8, r3
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	462b      	mov	r3, r5
 80028fc:	eb49 0303 	adc.w	r3, r9, r3
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800290e:	4629      	mov	r1, r5
 8002910:	024b      	lsls	r3, r1, #9
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002918:	4621      	mov	r1, r4
 800291a:	024a      	lsls	r2, r1, #9
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
 8002926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800292c:	f7fe f9b4 	bl	8000c98 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002938:	e058      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2200      	movs	r2, #0
 8002942:	4618      	mov	r0, r3
 8002944:	4611      	mov	r1, r2
 8002946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4641      	mov	r1, r8
 800296e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb63 0b01 	sbc.w	fp, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800298c:	ebb2 040a 	subs.w	r4, r2, sl
 8002990:	eb63 050b 	sbc.w	r5, r3, fp
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	464b      	mov	r3, r9
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	61fa      	str	r2, [r7, #28]
 80029dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e0:	f7fe f95a 	bl	8000c98 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3750      	adds	r7, #80	; 0x50
 8002a14:	46bd      	mov	sp, r7
 8002a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	08007a90 	.word	0x08007a90

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08007a90 	.word	0x08007a90

08002a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07b      	b.n	8002b9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab2:	d009      	beq.n	8002ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
 8002aba:	e005      	b.n	8002ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fcb0 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002afe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	ea42 0103 	orr.w	r1, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	f003 0104 	and.w	r1, r3, #4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f003 0210 	and.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e03f      	b.n	8002c34 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fe fca5 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	; 0x24
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f828 	bl	8002c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c40:	b0c0      	sub	sp, #256	; 0x100
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	68d9      	ldr	r1, [r3, #12]
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	ea40 0301 	orr.w	r3, r0, r1
 8002c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c94:	f021 010c 	bic.w	r1, r1, #12
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	6999      	ldr	r1, [r3, #24]
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	ea40 0301 	orr.w	r3, r0, r1
 8002cc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b8f      	ldr	r3, [pc, #572]	; (8002f08 <UART_SetConfig+0x2cc>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d005      	beq.n	8002cdc <UART_SetConfig+0xa0>
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b8d      	ldr	r3, [pc, #564]	; (8002f0c <UART_SetConfig+0x2d0>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d104      	bne.n	8002ce6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cdc:	f7ff fec4 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8002ce0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ce4:	e003      	b.n	8002cee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f7ff feab 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8002cea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf8:	f040 810c 	bne.w	8002f14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d0e:	4622      	mov	r2, r4
 8002d10:	462b      	mov	r3, r5
 8002d12:	1891      	adds	r1, r2, r2
 8002d14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d16:	415b      	adcs	r3, r3
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d1e:	4621      	mov	r1, r4
 8002d20:	eb12 0801 	adds.w	r8, r2, r1
 8002d24:	4629      	mov	r1, r5
 8002d26:	eb43 0901 	adc.w	r9, r3, r1
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	eb18 0303 	adds.w	r3, r8, r3
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	eb49 0303 	adc.w	r3, r9, r3
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	18db      	adds	r3, r3, r3
 8002d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d70:	4613      	mov	r3, r2
 8002d72:	eb42 0303 	adc.w	r3, r2, r3
 8002d76:	657b      	str	r3, [r7, #84]	; 0x54
 8002d78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d80:	f7fd ff8a 	bl	8000c98 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b61      	ldr	r3, [pc, #388]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011c      	lsls	r4, r3, #4
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002da0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dac:	415b      	adcs	r3, r3
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002db4:	4641      	mov	r1, r8
 8002db6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dba:	4649      	mov	r1, r9
 8002dbc:	eb43 0b01 	adc.w	fp, r3, r1
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd4:	4692      	mov	sl, r2
 8002dd6:	469b      	mov	fp, r3
 8002dd8:	4643      	mov	r3, r8
 8002dda:	eb1a 0303 	adds.w	r3, sl, r3
 8002dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de2:	464b      	mov	r3, r9
 8002de4:	eb4b 0303 	adc.w	r3, fp, r3
 8002de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e00:	460b      	mov	r3, r1
 8002e02:	18db      	adds	r3, r3, r3
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
 8002e06:	4613      	mov	r3, r2
 8002e08:	eb42 0303 	adc.w	r3, r2, r3
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e16:	f7fd ff3f 	bl	8000c98 <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002e22:	fba3 2301 	umull	r2, r3, r3, r1
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2264      	movs	r2, #100	; 0x64
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	1acb      	subs	r3, r1, r3
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002e38:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e44:	441c      	add	r4, r3
 8002e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	1891      	adds	r1, r2, r2
 8002e5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e60:	415b      	adcs	r3, r3
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e68:	4641      	mov	r1, r8
 8002e6a:	1851      	adds	r1, r2, r1
 8002e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6e:	4649      	mov	r1, r9
 8002e70:	414b      	adcs	r3, r1
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e80:	4659      	mov	r1, fp
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	4651      	mov	r1, sl
 8002e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	00ca      	lsls	r2, r1, #3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	4642      	mov	r2, r8
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	eb42 0303 	adc.w	r3, r2, r3
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	18db      	adds	r3, r3, r3
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ece:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ed2:	f7fd fee1 	bl	8000c98 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002edc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	2164      	movs	r1, #100	; 0x64
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	3332      	adds	r3, #50	; 0x32
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <UART_SetConfig+0x2d4>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	f003 0207 	and.w	r2, r3, #7
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4422      	add	r2, r4
 8002f02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f04:	e105      	b.n	8003112 <UART_SetConfig+0x4d6>
 8002f06:	bf00      	nop
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f26:	4642      	mov	r2, r8
 8002f28:	464b      	mov	r3, r9
 8002f2a:	1891      	adds	r1, r2, r2
 8002f2c:	6239      	str	r1, [r7, #32]
 8002f2e:	415b      	adcs	r3, r3
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f36:	4641      	mov	r1, r8
 8002f38:	1854      	adds	r4, r2, r1
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	eb43 0501 	adc.w	r5, r3, r1
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	00eb      	lsls	r3, r5, #3
 8002f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f4e:	00e2      	lsls	r2, r4, #3
 8002f50:	4614      	mov	r4, r2
 8002f52:	461d      	mov	r5, r3
 8002f54:	4643      	mov	r3, r8
 8002f56:	18e3      	adds	r3, r4, r3
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	eb45 0303 	adc.w	r3, r5, r3
 8002f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f82:	4629      	mov	r1, r5
 8002f84:	008b      	lsls	r3, r1, #2
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	008a      	lsls	r2, r1, #2
 8002f90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f94:	f7fd fe80 	bl	8000c98 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b60      	ldr	r3, [pc, #384]	; (8003120 <UART_SetConfig+0x4e4>)
 8002f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011c      	lsls	r4, r3, #4
 8002fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	61b9      	str	r1, [r7, #24]
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc8:	4641      	mov	r1, r8
 8002fca:	1851      	adds	r1, r2, r1
 8002fcc:	6139      	str	r1, [r7, #16]
 8002fce:	4649      	mov	r1, r9
 8002fd0:	414b      	adcs	r3, r1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	00cb      	lsls	r3, r1, #3
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fea:	4651      	mov	r1, sl
 8002fec:	00ca      	lsls	r2, r1, #3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	460a      	mov	r2, r1
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	67bb      	str	r3, [r7, #120]	; 0x78
 8003012:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003020:	4649      	mov	r1, r9
 8003022:	008b      	lsls	r3, r1, #2
 8003024:	4641      	mov	r1, r8
 8003026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800302a:	4641      	mov	r1, r8
 800302c:	008a      	lsls	r2, r1, #2
 800302e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003032:	f7fd fe31 	bl	8000c98 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <UART_SetConfig+0x4e4>)
 800303c:	fba3 1302 	umull	r1, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	3332      	adds	r3, #50	; 0x32
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <UART_SetConfig+0x4e4>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305a:	441c      	add	r4, r3
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	673b      	str	r3, [r7, #112]	; 0x70
 8003064:	677a      	str	r2, [r7, #116]	; 0x74
 8003066:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800306a:	4642      	mov	r2, r8
 800306c:	464b      	mov	r3, r9
 800306e:	1891      	adds	r1, r2, r2
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	415b      	adcs	r3, r3
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800307a:	4641      	mov	r1, r8
 800307c:	1851      	adds	r1, r2, r1
 800307e:	6039      	str	r1, [r7, #0]
 8003080:	4649      	mov	r1, r9
 8003082:	414b      	adcs	r3, r1
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003092:	4659      	mov	r1, fp
 8003094:	00cb      	lsls	r3, r1, #3
 8003096:	4651      	mov	r1, sl
 8003098:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309c:	4651      	mov	r1, sl
 800309e:	00ca      	lsls	r2, r1, #3
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	4642      	mov	r2, r8
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	663b      	str	r3, [r7, #96]	; 0x60
 80030c0:	667a      	str	r2, [r7, #100]	; 0x64
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ce:	4649      	mov	r1, r9
 80030d0:	008b      	lsls	r3, r1, #2
 80030d2:	4641      	mov	r1, r8
 80030d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d8:	4641      	mov	r1, r8
 80030da:	008a      	lsls	r2, r1, #2
 80030dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030e0:	f7fd fdda 	bl	8000c98 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <UART_SetConfig+0x4e4>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2164      	movs	r1, #100	; 0x64
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <UART_SetConfig+0x4e4>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4422      	add	r2, r4
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	51eb851f 	.word	0x51eb851f

08003124 <__errno>:
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <__errno+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	4d0d      	ldr	r5, [pc, #52]	; (8003168 <__libc_init_array+0x38>)
 8003134:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003136:	1b64      	subs	r4, r4, r5
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	2600      	movs	r6, #0
 800313c:	42a6      	cmp	r6, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	4d0b      	ldr	r5, [pc, #44]	; (8003170 <__libc_init_array+0x40>)
 8003142:	4c0c      	ldr	r4, [pc, #48]	; (8003174 <__libc_init_array+0x44>)
 8003144:	f004 fc90 	bl	8007a68 <_init>
 8003148:	1b64      	subs	r4, r4, r5
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	2600      	movs	r6, #0
 800314e:	42a6      	cmp	r6, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f855 3b04 	ldr.w	r3, [r5], #4
 8003158:	4798      	blx	r3
 800315a:	3601      	adds	r6, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003162:	4798      	blx	r3
 8003164:	3601      	adds	r6, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	08007f44 	.word	0x08007f44
 800316c:	08007f44 	.word	0x08007f44
 8003170:	08007f44 	.word	0x08007f44
 8003174:	08007f48 	.word	0x08007f48

08003178 <memset>:
 8003178:	4402      	add	r2, r0
 800317a:	4603      	mov	r3, r0
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	f803 1b01 	strb.w	r1, [r3], #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <__cvt>:
 8003188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	ec55 4b10 	vmov	r4, r5, d0
 8003190:	2d00      	cmp	r5, #0
 8003192:	460e      	mov	r6, r1
 8003194:	4619      	mov	r1, r3
 8003196:	462b      	mov	r3, r5
 8003198:	bfbb      	ittet	lt
 800319a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800319e:	461d      	movlt	r5, r3
 80031a0:	2300      	movge	r3, #0
 80031a2:	232d      	movlt	r3, #45	; 0x2d
 80031a4:	700b      	strb	r3, [r1, #0]
 80031a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80031ac:	4691      	mov	r9, r2
 80031ae:	f023 0820 	bic.w	r8, r3, #32
 80031b2:	bfbc      	itt	lt
 80031b4:	4622      	movlt	r2, r4
 80031b6:	4614      	movlt	r4, r2
 80031b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031bc:	d005      	beq.n	80031ca <__cvt+0x42>
 80031be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031c2:	d100      	bne.n	80031c6 <__cvt+0x3e>
 80031c4:	3601      	adds	r6, #1
 80031c6:	2102      	movs	r1, #2
 80031c8:	e000      	b.n	80031cc <__cvt+0x44>
 80031ca:	2103      	movs	r1, #3
 80031cc:	ab03      	add	r3, sp, #12
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	ab02      	add	r3, sp, #8
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	ec45 4b10 	vmov	d0, r4, r5
 80031d8:	4653      	mov	r3, sl
 80031da:	4632      	mov	r2, r6
 80031dc:	f001 fdac 	bl	8004d38 <_dtoa_r>
 80031e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031e4:	4607      	mov	r7, r0
 80031e6:	d102      	bne.n	80031ee <__cvt+0x66>
 80031e8:	f019 0f01 	tst.w	r9, #1
 80031ec:	d022      	beq.n	8003234 <__cvt+0xac>
 80031ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031f2:	eb07 0906 	add.w	r9, r7, r6
 80031f6:	d110      	bne.n	800321a <__cvt+0x92>
 80031f8:	783b      	ldrb	r3, [r7, #0]
 80031fa:	2b30      	cmp	r3, #48	; 0x30
 80031fc:	d10a      	bne.n	8003214 <__cvt+0x8c>
 80031fe:	2200      	movs	r2, #0
 8003200:	2300      	movs	r3, #0
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fd fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800320a:	b918      	cbnz	r0, 8003214 <__cvt+0x8c>
 800320c:	f1c6 0601 	rsb	r6, r6, #1
 8003210:	f8ca 6000 	str.w	r6, [sl]
 8003214:	f8da 3000 	ldr.w	r3, [sl]
 8003218:	4499      	add	r9, r3
 800321a:	2200      	movs	r2, #0
 800321c:	2300      	movs	r3, #0
 800321e:	4620      	mov	r0, r4
 8003220:	4629      	mov	r1, r5
 8003222:	f7fd fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 8003226:	b108      	cbz	r0, 800322c <__cvt+0xa4>
 8003228:	f8cd 900c 	str.w	r9, [sp, #12]
 800322c:	2230      	movs	r2, #48	; 0x30
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	454b      	cmp	r3, r9
 8003232:	d307      	bcc.n	8003244 <__cvt+0xbc>
 8003234:	9b03      	ldr	r3, [sp, #12]
 8003236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003238:	1bdb      	subs	r3, r3, r7
 800323a:	4638      	mov	r0, r7
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	b004      	add	sp, #16
 8003240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003244:	1c59      	adds	r1, r3, #1
 8003246:	9103      	str	r1, [sp, #12]
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e7f0      	b.n	800322e <__cvt+0xa6>

0800324c <__exponent>:
 800324c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800324e:	4603      	mov	r3, r0
 8003250:	2900      	cmp	r1, #0
 8003252:	bfb8      	it	lt
 8003254:	4249      	neglt	r1, r1
 8003256:	f803 2b02 	strb.w	r2, [r3], #2
 800325a:	bfb4      	ite	lt
 800325c:	222d      	movlt	r2, #45	; 0x2d
 800325e:	222b      	movge	r2, #43	; 0x2b
 8003260:	2909      	cmp	r1, #9
 8003262:	7042      	strb	r2, [r0, #1]
 8003264:	dd2a      	ble.n	80032bc <__exponent+0x70>
 8003266:	f10d 0407 	add.w	r4, sp, #7
 800326a:	46a4      	mov	ip, r4
 800326c:	270a      	movs	r7, #10
 800326e:	46a6      	mov	lr, r4
 8003270:	460a      	mov	r2, r1
 8003272:	fb91 f6f7 	sdiv	r6, r1, r7
 8003276:	fb07 1516 	mls	r5, r7, r6, r1
 800327a:	3530      	adds	r5, #48	; 0x30
 800327c:	2a63      	cmp	r2, #99	; 0x63
 800327e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003282:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003286:	4631      	mov	r1, r6
 8003288:	dcf1      	bgt.n	800326e <__exponent+0x22>
 800328a:	3130      	adds	r1, #48	; 0x30
 800328c:	f1ae 0502 	sub.w	r5, lr, #2
 8003290:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003294:	1c44      	adds	r4, r0, #1
 8003296:	4629      	mov	r1, r5
 8003298:	4561      	cmp	r1, ip
 800329a:	d30a      	bcc.n	80032b2 <__exponent+0x66>
 800329c:	f10d 0209 	add.w	r2, sp, #9
 80032a0:	eba2 020e 	sub.w	r2, r2, lr
 80032a4:	4565      	cmp	r5, ip
 80032a6:	bf88      	it	hi
 80032a8:	2200      	movhi	r2, #0
 80032aa:	4413      	add	r3, r2
 80032ac:	1a18      	subs	r0, r3, r0
 80032ae:	b003      	add	sp, #12
 80032b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80032ba:	e7ed      	b.n	8003298 <__exponent+0x4c>
 80032bc:	2330      	movs	r3, #48	; 0x30
 80032be:	3130      	adds	r1, #48	; 0x30
 80032c0:	7083      	strb	r3, [r0, #2]
 80032c2:	70c1      	strb	r1, [r0, #3]
 80032c4:	1d03      	adds	r3, r0, #4
 80032c6:	e7f1      	b.n	80032ac <__exponent+0x60>

080032c8 <_printf_float>:
 80032c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032cc:	ed2d 8b02 	vpush	{d8}
 80032d0:	b08d      	sub	sp, #52	; 0x34
 80032d2:	460c      	mov	r4, r1
 80032d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80032d8:	4616      	mov	r6, r2
 80032da:	461f      	mov	r7, r3
 80032dc:	4605      	mov	r5, r0
 80032de:	f002 fe89 	bl	8005ff4 <_localeconv_r>
 80032e2:	f8d0 a000 	ldr.w	sl, [r0]
 80032e6:	4650      	mov	r0, sl
 80032e8:	f7fc ff7a 	bl	80001e0 <strlen>
 80032ec:	2300      	movs	r3, #0
 80032ee:	930a      	str	r3, [sp, #40]	; 0x28
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	f8d8 3000 	ldr.w	r3, [r8]
 80032f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80032fc:	3307      	adds	r3, #7
 80032fe:	f023 0307 	bic.w	r3, r3, #7
 8003302:	f103 0208 	add.w	r2, r3, #8
 8003306:	f8c8 2000 	str.w	r2, [r8]
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003312:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800331a:	9307      	str	r3, [sp, #28]
 800331c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003320:	ee08 0a10 	vmov	s16, r0
 8003324:	4b9f      	ldr	r3, [pc, #636]	; (80035a4 <_printf_float+0x2dc>)
 8003326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	f7fd fc05 	bl	8000b3c <__aeabi_dcmpun>
 8003332:	bb88      	cbnz	r0, 8003398 <_printf_float+0xd0>
 8003334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003338:	4b9a      	ldr	r3, [pc, #616]	; (80035a4 <_printf_float+0x2dc>)
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	f7fd fbdf 	bl	8000b00 <__aeabi_dcmple>
 8003342:	bb48      	cbnz	r0, 8003398 <_printf_float+0xd0>
 8003344:	2200      	movs	r2, #0
 8003346:	2300      	movs	r3, #0
 8003348:	4640      	mov	r0, r8
 800334a:	4649      	mov	r1, r9
 800334c:	f7fd fbce 	bl	8000aec <__aeabi_dcmplt>
 8003350:	b110      	cbz	r0, 8003358 <_printf_float+0x90>
 8003352:	232d      	movs	r3, #45	; 0x2d
 8003354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003358:	4b93      	ldr	r3, [pc, #588]	; (80035a8 <_printf_float+0x2e0>)
 800335a:	4894      	ldr	r0, [pc, #592]	; (80035ac <_printf_float+0x2e4>)
 800335c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003360:	bf94      	ite	ls
 8003362:	4698      	movls	r8, r3
 8003364:	4680      	movhi	r8, r0
 8003366:	2303      	movs	r3, #3
 8003368:	6123      	str	r3, [r4, #16]
 800336a:	9b05      	ldr	r3, [sp, #20]
 800336c:	f023 0204 	bic.w	r2, r3, #4
 8003370:	6022      	str	r2, [r4, #0]
 8003372:	f04f 0900 	mov.w	r9, #0
 8003376:	9700      	str	r7, [sp, #0]
 8003378:	4633      	mov	r3, r6
 800337a:	aa0b      	add	r2, sp, #44	; 0x2c
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f9d8 	bl	8003734 <_printf_common>
 8003384:	3001      	adds	r0, #1
 8003386:	f040 8090 	bne.w	80034aa <_printf_float+0x1e2>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	b00d      	add	sp, #52	; 0x34
 8003390:	ecbd 8b02 	vpop	{d8}
 8003394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	4640      	mov	r0, r8
 800339e:	4649      	mov	r1, r9
 80033a0:	f7fd fbcc 	bl	8000b3c <__aeabi_dcmpun>
 80033a4:	b140      	cbz	r0, 80033b8 <_printf_float+0xf0>
 80033a6:	464b      	mov	r3, r9
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bfbc      	itt	lt
 80033ac:	232d      	movlt	r3, #45	; 0x2d
 80033ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80033b2:	487f      	ldr	r0, [pc, #508]	; (80035b0 <_printf_float+0x2e8>)
 80033b4:	4b7f      	ldr	r3, [pc, #508]	; (80035b4 <_printf_float+0x2ec>)
 80033b6:	e7d1      	b.n	800335c <_printf_float+0x94>
 80033b8:	6863      	ldr	r3, [r4, #4]
 80033ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80033be:	9206      	str	r2, [sp, #24]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	d13f      	bne.n	8003444 <_printf_float+0x17c>
 80033c4:	2306      	movs	r3, #6
 80033c6:	6063      	str	r3, [r4, #4]
 80033c8:	9b05      	ldr	r3, [sp, #20]
 80033ca:	6861      	ldr	r1, [r4, #4]
 80033cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80033d0:	2300      	movs	r3, #0
 80033d2:	9303      	str	r3, [sp, #12]
 80033d4:	ab0a      	add	r3, sp, #40	; 0x28
 80033d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80033da:	ab09      	add	r3, sp, #36	; 0x24
 80033dc:	ec49 8b10 	vmov	d0, r8, r9
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6022      	str	r2, [r4, #0]
 80033e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7ff fecd 	bl	8003188 <__cvt>
 80033ee:	9b06      	ldr	r3, [sp, #24]
 80033f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033f2:	2b47      	cmp	r3, #71	; 0x47
 80033f4:	4680      	mov	r8, r0
 80033f6:	d108      	bne.n	800340a <_printf_float+0x142>
 80033f8:	1cc8      	adds	r0, r1, #3
 80033fa:	db02      	blt.n	8003402 <_printf_float+0x13a>
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	4299      	cmp	r1, r3
 8003400:	dd41      	ble.n	8003486 <_printf_float+0x1be>
 8003402:	f1ab 0b02 	sub.w	fp, fp, #2
 8003406:	fa5f fb8b 	uxtb.w	fp, fp
 800340a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800340e:	d820      	bhi.n	8003452 <_printf_float+0x18a>
 8003410:	3901      	subs	r1, #1
 8003412:	465a      	mov	r2, fp
 8003414:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003418:	9109      	str	r1, [sp, #36]	; 0x24
 800341a:	f7ff ff17 	bl	800324c <__exponent>
 800341e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003420:	1813      	adds	r3, r2, r0
 8003422:	2a01      	cmp	r2, #1
 8003424:	4681      	mov	r9, r0
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	dc02      	bgt.n	8003430 <_printf_float+0x168>
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	07d2      	lsls	r2, r2, #31
 800342e:	d501      	bpl.n	8003434 <_printf_float+0x16c>
 8003430:	3301      	adds	r3, #1
 8003432:	6123      	str	r3, [r4, #16]
 8003434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003438:	2b00      	cmp	r3, #0
 800343a:	d09c      	beq.n	8003376 <_printf_float+0xae>
 800343c:	232d      	movs	r3, #45	; 0x2d
 800343e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003442:	e798      	b.n	8003376 <_printf_float+0xae>
 8003444:	9a06      	ldr	r2, [sp, #24]
 8003446:	2a47      	cmp	r2, #71	; 0x47
 8003448:	d1be      	bne.n	80033c8 <_printf_float+0x100>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1bc      	bne.n	80033c8 <_printf_float+0x100>
 800344e:	2301      	movs	r3, #1
 8003450:	e7b9      	b.n	80033c6 <_printf_float+0xfe>
 8003452:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003456:	d118      	bne.n	800348a <_printf_float+0x1c2>
 8003458:	2900      	cmp	r1, #0
 800345a:	6863      	ldr	r3, [r4, #4]
 800345c:	dd0b      	ble.n	8003476 <_printf_float+0x1ae>
 800345e:	6121      	str	r1, [r4, #16]
 8003460:	b913      	cbnz	r3, 8003468 <_printf_float+0x1a0>
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	07d0      	lsls	r0, r2, #31
 8003466:	d502      	bpl.n	800346e <_printf_float+0x1a6>
 8003468:	3301      	adds	r3, #1
 800346a:	440b      	add	r3, r1
 800346c:	6123      	str	r3, [r4, #16]
 800346e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003470:	f04f 0900 	mov.w	r9, #0
 8003474:	e7de      	b.n	8003434 <_printf_float+0x16c>
 8003476:	b913      	cbnz	r3, 800347e <_printf_float+0x1b6>
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	07d2      	lsls	r2, r2, #31
 800347c:	d501      	bpl.n	8003482 <_printf_float+0x1ba>
 800347e:	3302      	adds	r3, #2
 8003480:	e7f4      	b.n	800346c <_printf_float+0x1a4>
 8003482:	2301      	movs	r3, #1
 8003484:	e7f2      	b.n	800346c <_printf_float+0x1a4>
 8003486:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800348c:	4299      	cmp	r1, r3
 800348e:	db05      	blt.n	800349c <_printf_float+0x1d4>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	6121      	str	r1, [r4, #16]
 8003494:	07d8      	lsls	r0, r3, #31
 8003496:	d5ea      	bpl.n	800346e <_printf_float+0x1a6>
 8003498:	1c4b      	adds	r3, r1, #1
 800349a:	e7e7      	b.n	800346c <_printf_float+0x1a4>
 800349c:	2900      	cmp	r1, #0
 800349e:	bfd4      	ite	le
 80034a0:	f1c1 0202 	rsble	r2, r1, #2
 80034a4:	2201      	movgt	r2, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	e7e0      	b.n	800346c <_printf_float+0x1a4>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	055a      	lsls	r2, r3, #21
 80034ae:	d407      	bmi.n	80034c0 <_printf_float+0x1f8>
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	4642      	mov	r2, r8
 80034b4:	4631      	mov	r1, r6
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	d12c      	bne.n	8003518 <_printf_float+0x250>
 80034be:	e764      	b.n	800338a <_printf_float+0xc2>
 80034c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80034c4:	f240 80e0 	bls.w	8003688 <_printf_float+0x3c0>
 80034c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034cc:	2200      	movs	r2, #0
 80034ce:	2300      	movs	r3, #0
 80034d0:	f7fd fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d034      	beq.n	8003542 <_printf_float+0x27a>
 80034d8:	4a37      	ldr	r2, [pc, #220]	; (80035b8 <_printf_float+0x2f0>)
 80034da:	2301      	movs	r3, #1
 80034dc:	4631      	mov	r1, r6
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	f43f af51 	beq.w	800338a <_printf_float+0xc2>
 80034e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034ec:	429a      	cmp	r2, r3
 80034ee:	db02      	blt.n	80034f6 <_printf_float+0x22e>
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	07d8      	lsls	r0, r3, #31
 80034f4:	d510      	bpl.n	8003518 <_printf_float+0x250>
 80034f6:	ee18 3a10 	vmov	r3, s16
 80034fa:	4652      	mov	r2, sl
 80034fc:	4631      	mov	r1, r6
 80034fe:	4628      	mov	r0, r5
 8003500:	47b8      	blx	r7
 8003502:	3001      	adds	r0, #1
 8003504:	f43f af41 	beq.w	800338a <_printf_float+0xc2>
 8003508:	f04f 0800 	mov.w	r8, #0
 800350c:	f104 091a 	add.w	r9, r4, #26
 8003510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	4543      	cmp	r3, r8
 8003516:	dc09      	bgt.n	800352c <_printf_float+0x264>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	079b      	lsls	r3, r3, #30
 800351c:	f100 8105 	bmi.w	800372a <_printf_float+0x462>
 8003520:	68e0      	ldr	r0, [r4, #12]
 8003522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003524:	4298      	cmp	r0, r3
 8003526:	bfb8      	it	lt
 8003528:	4618      	movlt	r0, r3
 800352a:	e730      	b.n	800338e <_printf_float+0xc6>
 800352c:	2301      	movs	r3, #1
 800352e:	464a      	mov	r2, r9
 8003530:	4631      	mov	r1, r6
 8003532:	4628      	mov	r0, r5
 8003534:	47b8      	blx	r7
 8003536:	3001      	adds	r0, #1
 8003538:	f43f af27 	beq.w	800338a <_printf_float+0xc2>
 800353c:	f108 0801 	add.w	r8, r8, #1
 8003540:	e7e6      	b.n	8003510 <_printf_float+0x248>
 8003542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	dc39      	bgt.n	80035bc <_printf_float+0x2f4>
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <_printf_float+0x2f0>)
 800354a:	2301      	movs	r3, #1
 800354c:	4631      	mov	r1, r6
 800354e:	4628      	mov	r0, r5
 8003550:	47b8      	blx	r7
 8003552:	3001      	adds	r0, #1
 8003554:	f43f af19 	beq.w	800338a <_printf_float+0xc2>
 8003558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800355c:	4313      	orrs	r3, r2
 800355e:	d102      	bne.n	8003566 <_printf_float+0x29e>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	07d9      	lsls	r1, r3, #31
 8003564:	d5d8      	bpl.n	8003518 <_printf_float+0x250>
 8003566:	ee18 3a10 	vmov	r3, s16
 800356a:	4652      	mov	r2, sl
 800356c:	4631      	mov	r1, r6
 800356e:	4628      	mov	r0, r5
 8003570:	47b8      	blx	r7
 8003572:	3001      	adds	r0, #1
 8003574:	f43f af09 	beq.w	800338a <_printf_float+0xc2>
 8003578:	f04f 0900 	mov.w	r9, #0
 800357c:	f104 0a1a 	add.w	sl, r4, #26
 8003580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003582:	425b      	negs	r3, r3
 8003584:	454b      	cmp	r3, r9
 8003586:	dc01      	bgt.n	800358c <_printf_float+0x2c4>
 8003588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800358a:	e792      	b.n	80034b2 <_printf_float+0x1ea>
 800358c:	2301      	movs	r3, #1
 800358e:	4652      	mov	r2, sl
 8003590:	4631      	mov	r1, r6
 8003592:	4628      	mov	r0, r5
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f aef7 	beq.w	800338a <_printf_float+0xc2>
 800359c:	f109 0901 	add.w	r9, r9, #1
 80035a0:	e7ee      	b.n	8003580 <_printf_float+0x2b8>
 80035a2:	bf00      	nop
 80035a4:	7fefffff 	.word	0x7fefffff
 80035a8:	08007a9c 	.word	0x08007a9c
 80035ac:	08007aa0 	.word	0x08007aa0
 80035b0:	08007aa8 	.word	0x08007aa8
 80035b4:	08007aa4 	.word	0x08007aa4
 80035b8:	08007aac 	.word	0x08007aac
 80035bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035c0:	429a      	cmp	r2, r3
 80035c2:	bfa8      	it	ge
 80035c4:	461a      	movge	r2, r3
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	4691      	mov	r9, r2
 80035ca:	dc37      	bgt.n	800363c <_printf_float+0x374>
 80035cc:	f04f 0b00 	mov.w	fp, #0
 80035d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035d4:	f104 021a 	add.w	r2, r4, #26
 80035d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	eba3 0309 	sub.w	r3, r3, r9
 80035e0:	455b      	cmp	r3, fp
 80035e2:	dc33      	bgt.n	800364c <_printf_float+0x384>
 80035e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035e8:	429a      	cmp	r2, r3
 80035ea:	db3b      	blt.n	8003664 <_printf_float+0x39c>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	07da      	lsls	r2, r3, #31
 80035f0:	d438      	bmi.n	8003664 <_printf_float+0x39c>
 80035f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035f4:	9a05      	ldr	r2, [sp, #20]
 80035f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035f8:	1a9a      	subs	r2, r3, r2
 80035fa:	eba3 0901 	sub.w	r9, r3, r1
 80035fe:	4591      	cmp	r9, r2
 8003600:	bfa8      	it	ge
 8003602:	4691      	movge	r9, r2
 8003604:	f1b9 0f00 	cmp.w	r9, #0
 8003608:	dc35      	bgt.n	8003676 <_printf_float+0x3ae>
 800360a:	f04f 0800 	mov.w	r8, #0
 800360e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003612:	f104 0a1a 	add.w	sl, r4, #26
 8003616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	eba3 0309 	sub.w	r3, r3, r9
 8003620:	4543      	cmp	r3, r8
 8003622:	f77f af79 	ble.w	8003518 <_printf_float+0x250>
 8003626:	2301      	movs	r3, #1
 8003628:	4652      	mov	r2, sl
 800362a:	4631      	mov	r1, r6
 800362c:	4628      	mov	r0, r5
 800362e:	47b8      	blx	r7
 8003630:	3001      	adds	r0, #1
 8003632:	f43f aeaa 	beq.w	800338a <_printf_float+0xc2>
 8003636:	f108 0801 	add.w	r8, r8, #1
 800363a:	e7ec      	b.n	8003616 <_printf_float+0x34e>
 800363c:	4613      	mov	r3, r2
 800363e:	4631      	mov	r1, r6
 8003640:	4642      	mov	r2, r8
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	d1c0      	bne.n	80035cc <_printf_float+0x304>
 800364a:	e69e      	b.n	800338a <_printf_float+0xc2>
 800364c:	2301      	movs	r3, #1
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	9205      	str	r2, [sp, #20]
 8003654:	47b8      	blx	r7
 8003656:	3001      	adds	r0, #1
 8003658:	f43f ae97 	beq.w	800338a <_printf_float+0xc2>
 800365c:	9a05      	ldr	r2, [sp, #20]
 800365e:	f10b 0b01 	add.w	fp, fp, #1
 8003662:	e7b9      	b.n	80035d8 <_printf_float+0x310>
 8003664:	ee18 3a10 	vmov	r3, s16
 8003668:	4652      	mov	r2, sl
 800366a:	4631      	mov	r1, r6
 800366c:	4628      	mov	r0, r5
 800366e:	47b8      	blx	r7
 8003670:	3001      	adds	r0, #1
 8003672:	d1be      	bne.n	80035f2 <_printf_float+0x32a>
 8003674:	e689      	b.n	800338a <_printf_float+0xc2>
 8003676:	9a05      	ldr	r2, [sp, #20]
 8003678:	464b      	mov	r3, r9
 800367a:	4442      	add	r2, r8
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	d1c1      	bne.n	800360a <_printf_float+0x342>
 8003686:	e680      	b.n	800338a <_printf_float+0xc2>
 8003688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800368a:	2a01      	cmp	r2, #1
 800368c:	dc01      	bgt.n	8003692 <_printf_float+0x3ca>
 800368e:	07db      	lsls	r3, r3, #31
 8003690:	d538      	bpl.n	8003704 <_printf_float+0x43c>
 8003692:	2301      	movs	r3, #1
 8003694:	4642      	mov	r2, r8
 8003696:	4631      	mov	r1, r6
 8003698:	4628      	mov	r0, r5
 800369a:	47b8      	blx	r7
 800369c:	3001      	adds	r0, #1
 800369e:	f43f ae74 	beq.w	800338a <_printf_float+0xc2>
 80036a2:	ee18 3a10 	vmov	r3, s16
 80036a6:	4652      	mov	r2, sl
 80036a8:	4631      	mov	r1, r6
 80036aa:	4628      	mov	r0, r5
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	f43f ae6b 	beq.w	800338a <_printf_float+0xc2>
 80036b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036b8:	2200      	movs	r2, #0
 80036ba:	2300      	movs	r3, #0
 80036bc:	f7fd fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80036c0:	b9d8      	cbnz	r0, 80036fa <_printf_float+0x432>
 80036c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036c4:	f108 0201 	add.w	r2, r8, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	d10e      	bne.n	80036f2 <_printf_float+0x42a>
 80036d4:	e659      	b.n	800338a <_printf_float+0xc2>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4652      	mov	r2, sl
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f ae52 	beq.w	800338a <_printf_float+0xc2>
 80036e6:	f108 0801 	add.w	r8, r8, #1
 80036ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	4543      	cmp	r3, r8
 80036f0:	dcf1      	bgt.n	80036d6 <_printf_float+0x40e>
 80036f2:	464b      	mov	r3, r9
 80036f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036f8:	e6dc      	b.n	80034b4 <_printf_float+0x1ec>
 80036fa:	f04f 0800 	mov.w	r8, #0
 80036fe:	f104 0a1a 	add.w	sl, r4, #26
 8003702:	e7f2      	b.n	80036ea <_printf_float+0x422>
 8003704:	2301      	movs	r3, #1
 8003706:	4642      	mov	r2, r8
 8003708:	e7df      	b.n	80036ca <_printf_float+0x402>
 800370a:	2301      	movs	r3, #1
 800370c:	464a      	mov	r2, r9
 800370e:	4631      	mov	r1, r6
 8003710:	4628      	mov	r0, r5
 8003712:	47b8      	blx	r7
 8003714:	3001      	adds	r0, #1
 8003716:	f43f ae38 	beq.w	800338a <_printf_float+0xc2>
 800371a:	f108 0801 	add.w	r8, r8, #1
 800371e:	68e3      	ldr	r3, [r4, #12]
 8003720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003722:	1a5b      	subs	r3, r3, r1
 8003724:	4543      	cmp	r3, r8
 8003726:	dcf0      	bgt.n	800370a <_printf_float+0x442>
 8003728:	e6fa      	b.n	8003520 <_printf_float+0x258>
 800372a:	f04f 0800 	mov.w	r8, #0
 800372e:	f104 0919 	add.w	r9, r4, #25
 8003732:	e7f4      	b.n	800371e <_printf_float+0x456>

08003734 <_printf_common>:
 8003734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	4616      	mov	r6, r2
 800373a:	4699      	mov	r9, r3
 800373c:	688a      	ldr	r2, [r1, #8]
 800373e:	690b      	ldr	r3, [r1, #16]
 8003740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003744:	4293      	cmp	r3, r2
 8003746:	bfb8      	it	lt
 8003748:	4613      	movlt	r3, r2
 800374a:	6033      	str	r3, [r6, #0]
 800374c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003750:	4607      	mov	r7, r0
 8003752:	460c      	mov	r4, r1
 8003754:	b10a      	cbz	r2, 800375a <_printf_common+0x26>
 8003756:	3301      	adds	r3, #1
 8003758:	6033      	str	r3, [r6, #0]
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	0699      	lsls	r1, r3, #26
 800375e:	bf42      	ittt	mi
 8003760:	6833      	ldrmi	r3, [r6, #0]
 8003762:	3302      	addmi	r3, #2
 8003764:	6033      	strmi	r3, [r6, #0]
 8003766:	6825      	ldr	r5, [r4, #0]
 8003768:	f015 0506 	ands.w	r5, r5, #6
 800376c:	d106      	bne.n	800377c <_printf_common+0x48>
 800376e:	f104 0a19 	add.w	sl, r4, #25
 8003772:	68e3      	ldr	r3, [r4, #12]
 8003774:	6832      	ldr	r2, [r6, #0]
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	42ab      	cmp	r3, r5
 800377a:	dc26      	bgt.n	80037ca <_printf_common+0x96>
 800377c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003780:	1e13      	subs	r3, r2, #0
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	bf18      	it	ne
 8003786:	2301      	movne	r3, #1
 8003788:	0692      	lsls	r2, r2, #26
 800378a:	d42b      	bmi.n	80037e4 <_printf_common+0xb0>
 800378c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003790:	4649      	mov	r1, r9
 8003792:	4638      	mov	r0, r7
 8003794:	47c0      	blx	r8
 8003796:	3001      	adds	r0, #1
 8003798:	d01e      	beq.n	80037d8 <_printf_common+0xa4>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	68e5      	ldr	r5, [r4, #12]
 800379e:	6832      	ldr	r2, [r6, #0]
 80037a0:	f003 0306 	and.w	r3, r3, #6
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	bf08      	it	eq
 80037a8:	1aad      	subeq	r5, r5, r2
 80037aa:	68a3      	ldr	r3, [r4, #8]
 80037ac:	6922      	ldr	r2, [r4, #16]
 80037ae:	bf0c      	ite	eq
 80037b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037b4:	2500      	movne	r5, #0
 80037b6:	4293      	cmp	r3, r2
 80037b8:	bfc4      	itt	gt
 80037ba:	1a9b      	subgt	r3, r3, r2
 80037bc:	18ed      	addgt	r5, r5, r3
 80037be:	2600      	movs	r6, #0
 80037c0:	341a      	adds	r4, #26
 80037c2:	42b5      	cmp	r5, r6
 80037c4:	d11a      	bne.n	80037fc <_printf_common+0xc8>
 80037c6:	2000      	movs	r0, #0
 80037c8:	e008      	b.n	80037dc <_printf_common+0xa8>
 80037ca:	2301      	movs	r3, #1
 80037cc:	4652      	mov	r2, sl
 80037ce:	4649      	mov	r1, r9
 80037d0:	4638      	mov	r0, r7
 80037d2:	47c0      	blx	r8
 80037d4:	3001      	adds	r0, #1
 80037d6:	d103      	bne.n	80037e0 <_printf_common+0xac>
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e0:	3501      	adds	r5, #1
 80037e2:	e7c6      	b.n	8003772 <_printf_common+0x3e>
 80037e4:	18e1      	adds	r1, r4, r3
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	2030      	movs	r0, #48	; 0x30
 80037ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ee:	4422      	add	r2, r4
 80037f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f8:	3302      	adds	r3, #2
 80037fa:	e7c7      	b.n	800378c <_printf_common+0x58>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4622      	mov	r2, r4
 8003800:	4649      	mov	r1, r9
 8003802:	4638      	mov	r0, r7
 8003804:	47c0      	blx	r8
 8003806:	3001      	adds	r0, #1
 8003808:	d0e6      	beq.n	80037d8 <_printf_common+0xa4>
 800380a:	3601      	adds	r6, #1
 800380c:	e7d9      	b.n	80037c2 <_printf_common+0x8e>
	...

08003810 <_printf_i>:
 8003810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003814:	7e0f      	ldrb	r7, [r1, #24]
 8003816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003818:	2f78      	cmp	r7, #120	; 0x78
 800381a:	4691      	mov	r9, r2
 800381c:	4680      	mov	r8, r0
 800381e:	460c      	mov	r4, r1
 8003820:	469a      	mov	sl, r3
 8003822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003826:	d807      	bhi.n	8003838 <_printf_i+0x28>
 8003828:	2f62      	cmp	r7, #98	; 0x62
 800382a:	d80a      	bhi.n	8003842 <_printf_i+0x32>
 800382c:	2f00      	cmp	r7, #0
 800382e:	f000 80d8 	beq.w	80039e2 <_printf_i+0x1d2>
 8003832:	2f58      	cmp	r7, #88	; 0x58
 8003834:	f000 80a3 	beq.w	800397e <_printf_i+0x16e>
 8003838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800383c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003840:	e03a      	b.n	80038b8 <_printf_i+0xa8>
 8003842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003846:	2b15      	cmp	r3, #21
 8003848:	d8f6      	bhi.n	8003838 <_printf_i+0x28>
 800384a:	a101      	add	r1, pc, #4	; (adr r1, 8003850 <_printf_i+0x40>)
 800384c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003850:	080038a9 	.word	0x080038a9
 8003854:	080038bd 	.word	0x080038bd
 8003858:	08003839 	.word	0x08003839
 800385c:	08003839 	.word	0x08003839
 8003860:	08003839 	.word	0x08003839
 8003864:	08003839 	.word	0x08003839
 8003868:	080038bd 	.word	0x080038bd
 800386c:	08003839 	.word	0x08003839
 8003870:	08003839 	.word	0x08003839
 8003874:	08003839 	.word	0x08003839
 8003878:	08003839 	.word	0x08003839
 800387c:	080039c9 	.word	0x080039c9
 8003880:	080038ed 	.word	0x080038ed
 8003884:	080039ab 	.word	0x080039ab
 8003888:	08003839 	.word	0x08003839
 800388c:	08003839 	.word	0x08003839
 8003890:	080039eb 	.word	0x080039eb
 8003894:	08003839 	.word	0x08003839
 8003898:	080038ed 	.word	0x080038ed
 800389c:	08003839 	.word	0x08003839
 80038a0:	08003839 	.word	0x08003839
 80038a4:	080039b3 	.word	0x080039b3
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	1d1a      	adds	r2, r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	602a      	str	r2, [r5, #0]
 80038b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0a3      	b.n	8003a04 <_printf_i+0x1f4>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	6829      	ldr	r1, [r5, #0]
 80038c0:	0606      	lsls	r6, r0, #24
 80038c2:	f101 0304 	add.w	r3, r1, #4
 80038c6:	d50a      	bpl.n	80038de <_printf_i+0xce>
 80038c8:	680e      	ldr	r6, [r1, #0]
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	2e00      	cmp	r6, #0
 80038ce:	da03      	bge.n	80038d8 <_printf_i+0xc8>
 80038d0:	232d      	movs	r3, #45	; 0x2d
 80038d2:	4276      	negs	r6, r6
 80038d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d8:	485e      	ldr	r0, [pc, #376]	; (8003a54 <_printf_i+0x244>)
 80038da:	230a      	movs	r3, #10
 80038dc:	e019      	b.n	8003912 <_printf_i+0x102>
 80038de:	680e      	ldr	r6, [r1, #0]
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038e6:	bf18      	it	ne
 80038e8:	b236      	sxthne	r6, r6
 80038ea:	e7ef      	b.n	80038cc <_printf_i+0xbc>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	1d19      	adds	r1, r3, #4
 80038f2:	6029      	str	r1, [r5, #0]
 80038f4:	0601      	lsls	r1, r0, #24
 80038f6:	d501      	bpl.n	80038fc <_printf_i+0xec>
 80038f8:	681e      	ldr	r6, [r3, #0]
 80038fa:	e002      	b.n	8003902 <_printf_i+0xf2>
 80038fc:	0646      	lsls	r6, r0, #25
 80038fe:	d5fb      	bpl.n	80038f8 <_printf_i+0xe8>
 8003900:	881e      	ldrh	r6, [r3, #0]
 8003902:	4854      	ldr	r0, [pc, #336]	; (8003a54 <_printf_i+0x244>)
 8003904:	2f6f      	cmp	r7, #111	; 0x6f
 8003906:	bf0c      	ite	eq
 8003908:	2308      	moveq	r3, #8
 800390a:	230a      	movne	r3, #10
 800390c:	2100      	movs	r1, #0
 800390e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003912:	6865      	ldr	r5, [r4, #4]
 8003914:	60a5      	str	r5, [r4, #8]
 8003916:	2d00      	cmp	r5, #0
 8003918:	bfa2      	ittt	ge
 800391a:	6821      	ldrge	r1, [r4, #0]
 800391c:	f021 0104 	bicge.w	r1, r1, #4
 8003920:	6021      	strge	r1, [r4, #0]
 8003922:	b90e      	cbnz	r6, 8003928 <_printf_i+0x118>
 8003924:	2d00      	cmp	r5, #0
 8003926:	d04d      	beq.n	80039c4 <_printf_i+0x1b4>
 8003928:	4615      	mov	r5, r2
 800392a:	fbb6 f1f3 	udiv	r1, r6, r3
 800392e:	fb03 6711 	mls	r7, r3, r1, r6
 8003932:	5dc7      	ldrb	r7, [r0, r7]
 8003934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003938:	4637      	mov	r7, r6
 800393a:	42bb      	cmp	r3, r7
 800393c:	460e      	mov	r6, r1
 800393e:	d9f4      	bls.n	800392a <_printf_i+0x11a>
 8003940:	2b08      	cmp	r3, #8
 8003942:	d10b      	bne.n	800395c <_printf_i+0x14c>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	07de      	lsls	r6, r3, #31
 8003948:	d508      	bpl.n	800395c <_printf_i+0x14c>
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	6861      	ldr	r1, [r4, #4]
 800394e:	4299      	cmp	r1, r3
 8003950:	bfde      	ittt	le
 8003952:	2330      	movle	r3, #48	; 0x30
 8003954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800395c:	1b52      	subs	r2, r2, r5
 800395e:	6122      	str	r2, [r4, #16]
 8003960:	f8cd a000 	str.w	sl, [sp]
 8003964:	464b      	mov	r3, r9
 8003966:	aa03      	add	r2, sp, #12
 8003968:	4621      	mov	r1, r4
 800396a:	4640      	mov	r0, r8
 800396c:	f7ff fee2 	bl	8003734 <_printf_common>
 8003970:	3001      	adds	r0, #1
 8003972:	d14c      	bne.n	8003a0e <_printf_i+0x1fe>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b004      	add	sp, #16
 800397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397e:	4835      	ldr	r0, [pc, #212]	; (8003a54 <_printf_i+0x244>)
 8003980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003984:	6829      	ldr	r1, [r5, #0]
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	f851 6b04 	ldr.w	r6, [r1], #4
 800398c:	6029      	str	r1, [r5, #0]
 800398e:	061d      	lsls	r5, r3, #24
 8003990:	d514      	bpl.n	80039bc <_printf_i+0x1ac>
 8003992:	07df      	lsls	r7, r3, #31
 8003994:	bf44      	itt	mi
 8003996:	f043 0320 	orrmi.w	r3, r3, #32
 800399a:	6023      	strmi	r3, [r4, #0]
 800399c:	b91e      	cbnz	r6, 80039a6 <_printf_i+0x196>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f023 0320 	bic.w	r3, r3, #32
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	2310      	movs	r3, #16
 80039a8:	e7b0      	b.n	800390c <_printf_i+0xfc>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	f043 0320 	orr.w	r3, r3, #32
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	2378      	movs	r3, #120	; 0x78
 80039b4:	4828      	ldr	r0, [pc, #160]	; (8003a58 <_printf_i+0x248>)
 80039b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039ba:	e7e3      	b.n	8003984 <_printf_i+0x174>
 80039bc:	0659      	lsls	r1, r3, #25
 80039be:	bf48      	it	mi
 80039c0:	b2b6      	uxthmi	r6, r6
 80039c2:	e7e6      	b.n	8003992 <_printf_i+0x182>
 80039c4:	4615      	mov	r5, r2
 80039c6:	e7bb      	b.n	8003940 <_printf_i+0x130>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	6826      	ldr	r6, [r4, #0]
 80039cc:	6961      	ldr	r1, [r4, #20]
 80039ce:	1d18      	adds	r0, r3, #4
 80039d0:	6028      	str	r0, [r5, #0]
 80039d2:	0635      	lsls	r5, r6, #24
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	d501      	bpl.n	80039dc <_printf_i+0x1cc>
 80039d8:	6019      	str	r1, [r3, #0]
 80039da:	e002      	b.n	80039e2 <_printf_i+0x1d2>
 80039dc:	0670      	lsls	r0, r6, #25
 80039de:	d5fb      	bpl.n	80039d8 <_printf_i+0x1c8>
 80039e0:	8019      	strh	r1, [r3, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	6123      	str	r3, [r4, #16]
 80039e6:	4615      	mov	r5, r2
 80039e8:	e7ba      	b.n	8003960 <_printf_i+0x150>
 80039ea:	682b      	ldr	r3, [r5, #0]
 80039ec:	1d1a      	adds	r2, r3, #4
 80039ee:	602a      	str	r2, [r5, #0]
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	6862      	ldr	r2, [r4, #4]
 80039f4:	2100      	movs	r1, #0
 80039f6:	4628      	mov	r0, r5
 80039f8:	f7fc fbfa 	bl	80001f0 <memchr>
 80039fc:	b108      	cbz	r0, 8003a02 <_printf_i+0x1f2>
 80039fe:	1b40      	subs	r0, r0, r5
 8003a00:	6060      	str	r0, [r4, #4]
 8003a02:	6863      	ldr	r3, [r4, #4]
 8003a04:	6123      	str	r3, [r4, #16]
 8003a06:	2300      	movs	r3, #0
 8003a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a0c:	e7a8      	b.n	8003960 <_printf_i+0x150>
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	462a      	mov	r2, r5
 8003a12:	4649      	mov	r1, r9
 8003a14:	4640      	mov	r0, r8
 8003a16:	47d0      	blx	sl
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d0ab      	beq.n	8003974 <_printf_i+0x164>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	079b      	lsls	r3, r3, #30
 8003a20:	d413      	bmi.n	8003a4a <_printf_i+0x23a>
 8003a22:	68e0      	ldr	r0, [r4, #12]
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	4298      	cmp	r0, r3
 8003a28:	bfb8      	it	lt
 8003a2a:	4618      	movlt	r0, r3
 8003a2c:	e7a4      	b.n	8003978 <_printf_i+0x168>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4632      	mov	r2, r6
 8003a32:	4649      	mov	r1, r9
 8003a34:	4640      	mov	r0, r8
 8003a36:	47d0      	blx	sl
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d09b      	beq.n	8003974 <_printf_i+0x164>
 8003a3c:	3501      	adds	r5, #1
 8003a3e:	68e3      	ldr	r3, [r4, #12]
 8003a40:	9903      	ldr	r1, [sp, #12]
 8003a42:	1a5b      	subs	r3, r3, r1
 8003a44:	42ab      	cmp	r3, r5
 8003a46:	dcf2      	bgt.n	8003a2e <_printf_i+0x21e>
 8003a48:	e7eb      	b.n	8003a22 <_printf_i+0x212>
 8003a4a:	2500      	movs	r5, #0
 8003a4c:	f104 0619 	add.w	r6, r4, #25
 8003a50:	e7f5      	b.n	8003a3e <_printf_i+0x22e>
 8003a52:	bf00      	nop
 8003a54:	08007aae 	.word	0x08007aae
 8003a58:	08007abf 	.word	0x08007abf

08003a5c <_scanf_float>:
 8003a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a60:	b087      	sub	sp, #28
 8003a62:	4617      	mov	r7, r2
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	688b      	ldr	r3, [r1, #8]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a6e:	bf83      	ittte	hi
 8003a70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003a74:	195b      	addhi	r3, r3, r5
 8003a76:	9302      	strhi	r3, [sp, #8]
 8003a78:	2300      	movls	r3, #0
 8003a7a:	bf86      	itte	hi
 8003a7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a80:	608b      	strhi	r3, [r1, #8]
 8003a82:	9302      	strls	r3, [sp, #8]
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	468b      	mov	fp, r1
 8003a88:	2500      	movs	r5, #0
 8003a8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a8e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003a92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a96:	4680      	mov	r8, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	465e      	mov	r6, fp
 8003a9c:	46aa      	mov	sl, r5
 8003a9e:	46a9      	mov	r9, r5
 8003aa0:	9501      	str	r5, [sp, #4]
 8003aa2:	68a2      	ldr	r2, [r4, #8]
 8003aa4:	b152      	cbz	r2, 8003abc <_scanf_float+0x60>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8003aac:	d864      	bhi.n	8003b78 <_scanf_float+0x11c>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d83c      	bhi.n	8003b2c <_scanf_float+0xd0>
 8003ab2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003ab6:	b2c8      	uxtb	r0, r1
 8003ab8:	280e      	cmp	r0, #14
 8003aba:	d93a      	bls.n	8003b32 <_scanf_float+0xd6>
 8003abc:	f1b9 0f00 	cmp.w	r9, #0
 8003ac0:	d003      	beq.n	8003aca <_scanf_float+0x6e>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ace:	f1ba 0f01 	cmp.w	sl, #1
 8003ad2:	f200 8113 	bhi.w	8003cfc <_scanf_float+0x2a0>
 8003ad6:	455e      	cmp	r6, fp
 8003ad8:	f200 8105 	bhi.w	8003ce6 <_scanf_float+0x28a>
 8003adc:	2501      	movs	r5, #1
 8003ade:	4628      	mov	r0, r5
 8003ae0:	b007      	add	sp, #28
 8003ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003aea:	2a0d      	cmp	r2, #13
 8003aec:	d8e6      	bhi.n	8003abc <_scanf_float+0x60>
 8003aee:	a101      	add	r1, pc, #4	; (adr r1, 8003af4 <_scanf_float+0x98>)
 8003af0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003af4:	08003c33 	.word	0x08003c33
 8003af8:	08003abd 	.word	0x08003abd
 8003afc:	08003abd 	.word	0x08003abd
 8003b00:	08003abd 	.word	0x08003abd
 8003b04:	08003c93 	.word	0x08003c93
 8003b08:	08003c6b 	.word	0x08003c6b
 8003b0c:	08003abd 	.word	0x08003abd
 8003b10:	08003abd 	.word	0x08003abd
 8003b14:	08003c41 	.word	0x08003c41
 8003b18:	08003abd 	.word	0x08003abd
 8003b1c:	08003abd 	.word	0x08003abd
 8003b20:	08003abd 	.word	0x08003abd
 8003b24:	08003abd 	.word	0x08003abd
 8003b28:	08003bf9 	.word	0x08003bf9
 8003b2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003b30:	e7db      	b.n	8003aea <_scanf_float+0x8e>
 8003b32:	290e      	cmp	r1, #14
 8003b34:	d8c2      	bhi.n	8003abc <_scanf_float+0x60>
 8003b36:	a001      	add	r0, pc, #4	; (adr r0, 8003b3c <_scanf_float+0xe0>)
 8003b38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b3c:	08003beb 	.word	0x08003beb
 8003b40:	08003abd 	.word	0x08003abd
 8003b44:	08003beb 	.word	0x08003beb
 8003b48:	08003c7f 	.word	0x08003c7f
 8003b4c:	08003abd 	.word	0x08003abd
 8003b50:	08003b99 	.word	0x08003b99
 8003b54:	08003bd5 	.word	0x08003bd5
 8003b58:	08003bd5 	.word	0x08003bd5
 8003b5c:	08003bd5 	.word	0x08003bd5
 8003b60:	08003bd5 	.word	0x08003bd5
 8003b64:	08003bd5 	.word	0x08003bd5
 8003b68:	08003bd5 	.word	0x08003bd5
 8003b6c:	08003bd5 	.word	0x08003bd5
 8003b70:	08003bd5 	.word	0x08003bd5
 8003b74:	08003bd5 	.word	0x08003bd5
 8003b78:	2b6e      	cmp	r3, #110	; 0x6e
 8003b7a:	d809      	bhi.n	8003b90 <_scanf_float+0x134>
 8003b7c:	2b60      	cmp	r3, #96	; 0x60
 8003b7e:	d8b2      	bhi.n	8003ae6 <_scanf_float+0x8a>
 8003b80:	2b54      	cmp	r3, #84	; 0x54
 8003b82:	d077      	beq.n	8003c74 <_scanf_float+0x218>
 8003b84:	2b59      	cmp	r3, #89	; 0x59
 8003b86:	d199      	bne.n	8003abc <_scanf_float+0x60>
 8003b88:	2d07      	cmp	r5, #7
 8003b8a:	d197      	bne.n	8003abc <_scanf_float+0x60>
 8003b8c:	2508      	movs	r5, #8
 8003b8e:	e029      	b.n	8003be4 <_scanf_float+0x188>
 8003b90:	2b74      	cmp	r3, #116	; 0x74
 8003b92:	d06f      	beq.n	8003c74 <_scanf_float+0x218>
 8003b94:	2b79      	cmp	r3, #121	; 0x79
 8003b96:	e7f6      	b.n	8003b86 <_scanf_float+0x12a>
 8003b98:	6821      	ldr	r1, [r4, #0]
 8003b9a:	05c8      	lsls	r0, r1, #23
 8003b9c:	d51a      	bpl.n	8003bd4 <_scanf_float+0x178>
 8003b9e:	9b02      	ldr	r3, [sp, #8]
 8003ba0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ba4:	6021      	str	r1, [r4, #0]
 8003ba6:	f109 0901 	add.w	r9, r9, #1
 8003baa:	b11b      	cbz	r3, 8003bb4 <_scanf_float+0x158>
 8003bac:	3b01      	subs	r3, #1
 8003bae:	3201      	adds	r2, #1
 8003bb0:	9302      	str	r3, [sp, #8]
 8003bb2:	60a2      	str	r2, [r4, #8]
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60a3      	str	r3, [r4, #8]
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	6123      	str	r3, [r4, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	f340 8084 	ble.w	8003cd4 <_scanf_float+0x278>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	e766      	b.n	8003aa2 <_scanf_float+0x46>
 8003bd4:	eb1a 0f05 	cmn.w	sl, r5
 8003bd8:	f47f af70 	bne.w	8003abc <_scanf_float+0x60>
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003be2:	6022      	str	r2, [r4, #0]
 8003be4:	f806 3b01 	strb.w	r3, [r6], #1
 8003be8:	e7e4      	b.n	8003bb4 <_scanf_float+0x158>
 8003bea:	6822      	ldr	r2, [r4, #0]
 8003bec:	0610      	lsls	r0, r2, #24
 8003bee:	f57f af65 	bpl.w	8003abc <_scanf_float+0x60>
 8003bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf6:	e7f4      	b.n	8003be2 <_scanf_float+0x186>
 8003bf8:	f1ba 0f00 	cmp.w	sl, #0
 8003bfc:	d10e      	bne.n	8003c1c <_scanf_float+0x1c0>
 8003bfe:	f1b9 0f00 	cmp.w	r9, #0
 8003c02:	d10e      	bne.n	8003c22 <_scanf_float+0x1c6>
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c0e:	d108      	bne.n	8003c22 <_scanf_float+0x1c6>
 8003c10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c14:	6022      	str	r2, [r4, #0]
 8003c16:	f04f 0a01 	mov.w	sl, #1
 8003c1a:	e7e3      	b.n	8003be4 <_scanf_float+0x188>
 8003c1c:	f1ba 0f02 	cmp.w	sl, #2
 8003c20:	d055      	beq.n	8003cce <_scanf_float+0x272>
 8003c22:	2d01      	cmp	r5, #1
 8003c24:	d002      	beq.n	8003c2c <_scanf_float+0x1d0>
 8003c26:	2d04      	cmp	r5, #4
 8003c28:	f47f af48 	bne.w	8003abc <_scanf_float+0x60>
 8003c2c:	3501      	adds	r5, #1
 8003c2e:	b2ed      	uxtb	r5, r5
 8003c30:	e7d8      	b.n	8003be4 <_scanf_float+0x188>
 8003c32:	f1ba 0f01 	cmp.w	sl, #1
 8003c36:	f47f af41 	bne.w	8003abc <_scanf_float+0x60>
 8003c3a:	f04f 0a02 	mov.w	sl, #2
 8003c3e:	e7d1      	b.n	8003be4 <_scanf_float+0x188>
 8003c40:	b97d      	cbnz	r5, 8003c62 <_scanf_float+0x206>
 8003c42:	f1b9 0f00 	cmp.w	r9, #0
 8003c46:	f47f af3c 	bne.w	8003ac2 <_scanf_float+0x66>
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c54:	f47f af39 	bne.w	8003aca <_scanf_float+0x6e>
 8003c58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c5c:	6022      	str	r2, [r4, #0]
 8003c5e:	2501      	movs	r5, #1
 8003c60:	e7c0      	b.n	8003be4 <_scanf_float+0x188>
 8003c62:	2d03      	cmp	r5, #3
 8003c64:	d0e2      	beq.n	8003c2c <_scanf_float+0x1d0>
 8003c66:	2d05      	cmp	r5, #5
 8003c68:	e7de      	b.n	8003c28 <_scanf_float+0x1cc>
 8003c6a:	2d02      	cmp	r5, #2
 8003c6c:	f47f af26 	bne.w	8003abc <_scanf_float+0x60>
 8003c70:	2503      	movs	r5, #3
 8003c72:	e7b7      	b.n	8003be4 <_scanf_float+0x188>
 8003c74:	2d06      	cmp	r5, #6
 8003c76:	f47f af21 	bne.w	8003abc <_scanf_float+0x60>
 8003c7a:	2507      	movs	r5, #7
 8003c7c:	e7b2      	b.n	8003be4 <_scanf_float+0x188>
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	0591      	lsls	r1, r2, #22
 8003c82:	f57f af1b 	bpl.w	8003abc <_scanf_float+0x60>
 8003c86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c90:	e7a8      	b.n	8003be4 <_scanf_float+0x188>
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003c98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003c9c:	d006      	beq.n	8003cac <_scanf_float+0x250>
 8003c9e:	0550      	lsls	r0, r2, #21
 8003ca0:	f57f af0c 	bpl.w	8003abc <_scanf_float+0x60>
 8003ca4:	f1b9 0f00 	cmp.w	r9, #0
 8003ca8:	f43f af0f 	beq.w	8003aca <_scanf_float+0x6e>
 8003cac:	0591      	lsls	r1, r2, #22
 8003cae:	bf58      	it	pl
 8003cb0:	9901      	ldrpl	r1, [sp, #4]
 8003cb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003cb6:	bf58      	it	pl
 8003cb8:	eba9 0101 	subpl.w	r1, r9, r1
 8003cbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003cc0:	bf58      	it	pl
 8003cc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003cc6:	6022      	str	r2, [r4, #0]
 8003cc8:	f04f 0900 	mov.w	r9, #0
 8003ccc:	e78a      	b.n	8003be4 <_scanf_float+0x188>
 8003cce:	f04f 0a03 	mov.w	sl, #3
 8003cd2:	e787      	b.n	8003be4 <_scanf_float+0x188>
 8003cd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003cd8:	4639      	mov	r1, r7
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4798      	blx	r3
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	f43f aedf 	beq.w	8003aa2 <_scanf_float+0x46>
 8003ce4:	e6ea      	b.n	8003abc <_scanf_float+0x60>
 8003ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cee:	463a      	mov	r2, r7
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	4798      	blx	r3
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	e6ec      	b.n	8003ad6 <_scanf_float+0x7a>
 8003cfc:	1e6b      	subs	r3, r5, #1
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d825      	bhi.n	8003d4e <_scanf_float+0x2f2>
 8003d02:	2d02      	cmp	r5, #2
 8003d04:	d836      	bhi.n	8003d74 <_scanf_float+0x318>
 8003d06:	455e      	cmp	r6, fp
 8003d08:	f67f aee8 	bls.w	8003adc <_scanf_float+0x80>
 8003d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d14:	463a      	mov	r2, r7
 8003d16:	4640      	mov	r0, r8
 8003d18:	4798      	blx	r3
 8003d1a:	6923      	ldr	r3, [r4, #16]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	e7f1      	b.n	8003d06 <_scanf_float+0x2aa>
 8003d22:	9802      	ldr	r0, [sp, #8]
 8003d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003d2c:	9002      	str	r0, [sp, #8]
 8003d2e:	463a      	mov	r2, r7
 8003d30:	4640      	mov	r0, r8
 8003d32:	4798      	blx	r3
 8003d34:	6923      	ldr	r3, [r4, #16]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d3e:	fa5f fa8a 	uxtb.w	sl, sl
 8003d42:	f1ba 0f02 	cmp.w	sl, #2
 8003d46:	d1ec      	bne.n	8003d22 <_scanf_float+0x2c6>
 8003d48:	3d03      	subs	r5, #3
 8003d4a:	b2ed      	uxtb	r5, r5
 8003d4c:	1b76      	subs	r6, r6, r5
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	05da      	lsls	r2, r3, #23
 8003d52:	d52f      	bpl.n	8003db4 <_scanf_float+0x358>
 8003d54:	055b      	lsls	r3, r3, #21
 8003d56:	d510      	bpl.n	8003d7a <_scanf_float+0x31e>
 8003d58:	455e      	cmp	r6, fp
 8003d5a:	f67f aebf 	bls.w	8003adc <_scanf_float+0x80>
 8003d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d66:	463a      	mov	r2, r7
 8003d68:	4640      	mov	r0, r8
 8003d6a:	4798      	blx	r3
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	e7f1      	b.n	8003d58 <_scanf_float+0x2fc>
 8003d74:	46aa      	mov	sl, r5
 8003d76:	9602      	str	r6, [sp, #8]
 8003d78:	e7df      	b.n	8003d3a <_scanf_float+0x2de>
 8003d7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	2965      	cmp	r1, #101	; 0x65
 8003d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d86:	f106 35ff 	add.w	r5, r6, #4294967295
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	d00c      	beq.n	8003da8 <_scanf_float+0x34c>
 8003d8e:	2945      	cmp	r1, #69	; 0x45
 8003d90:	d00a      	beq.n	8003da8 <_scanf_float+0x34c>
 8003d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d96:	463a      	mov	r2, r7
 8003d98:	4640      	mov	r0, r8
 8003d9a:	4798      	blx	r3
 8003d9c:	6923      	ldr	r3, [r4, #16]
 8003d9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	1eb5      	subs	r5, r6, #2
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dac:	463a      	mov	r2, r7
 8003dae:	4640      	mov	r0, r8
 8003db0:	4798      	blx	r3
 8003db2:	462e      	mov	r6, r5
 8003db4:	6825      	ldr	r5, [r4, #0]
 8003db6:	f015 0510 	ands.w	r5, r5, #16
 8003dba:	d159      	bne.n	8003e70 <_scanf_float+0x414>
 8003dbc:	7035      	strb	r5, [r6, #0]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d11b      	bne.n	8003e02 <_scanf_float+0x3a6>
 8003dca:	9b01      	ldr	r3, [sp, #4]
 8003dcc:	454b      	cmp	r3, r9
 8003dce:	eba3 0209 	sub.w	r2, r3, r9
 8003dd2:	d123      	bne.n	8003e1c <_scanf_float+0x3c0>
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	4640      	mov	r0, r8
 8003dda:	f000 fe97 	bl	8004b0c <_strtod_r>
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	f012 0f02 	tst.w	r2, #2
 8003de6:	ec57 6b10 	vmov	r6, r7, d0
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	d021      	beq.n	8003e32 <_scanf_float+0x3d6>
 8003dee:	9903      	ldr	r1, [sp, #12]
 8003df0:	1d1a      	adds	r2, r3, #4
 8003df2:	600a      	str	r2, [r1, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	e9c3 6700 	strd	r6, r7, [r3]
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60e3      	str	r3, [r4, #12]
 8003e00:	e66d      	b.n	8003ade <_scanf_float+0x82>
 8003e02:	9b04      	ldr	r3, [sp, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0e5      	beq.n	8003dd4 <_scanf_float+0x378>
 8003e08:	9905      	ldr	r1, [sp, #20]
 8003e0a:	230a      	movs	r3, #10
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	3101      	adds	r1, #1
 8003e10:	4640      	mov	r0, r8
 8003e12:	f000 ff03 	bl	8004c1c <_strtol_r>
 8003e16:	9b04      	ldr	r3, [sp, #16]
 8003e18:	9e05      	ldr	r6, [sp, #20]
 8003e1a:	1ac2      	subs	r2, r0, r3
 8003e1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003e20:	429e      	cmp	r6, r3
 8003e22:	bf28      	it	cs
 8003e24:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003e28:	4912      	ldr	r1, [pc, #72]	; (8003e74 <_scanf_float+0x418>)
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f000 f82c 	bl	8003e88 <siprintf>
 8003e30:	e7d0      	b.n	8003dd4 <_scanf_float+0x378>
 8003e32:	9903      	ldr	r1, [sp, #12]
 8003e34:	f012 0f04 	tst.w	r2, #4
 8003e38:	f103 0204 	add.w	r2, r3, #4
 8003e3c:	600a      	str	r2, [r1, #0]
 8003e3e:	d1d9      	bne.n	8003df4 <_scanf_float+0x398>
 8003e40:	f8d3 8000 	ldr.w	r8, [r3]
 8003e44:	ee10 2a10 	vmov	r2, s0
 8003e48:	ee10 0a10 	vmov	r0, s0
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	4639      	mov	r1, r7
 8003e50:	f7fc fe74 	bl	8000b3c <__aeabi_dcmpun>
 8003e54:	b128      	cbz	r0, 8003e62 <_scanf_float+0x406>
 8003e56:	4808      	ldr	r0, [pc, #32]	; (8003e78 <_scanf_float+0x41c>)
 8003e58:	f000 f810 	bl	8003e7c <nanf>
 8003e5c:	ed88 0a00 	vstr	s0, [r8]
 8003e60:	e7cb      	b.n	8003dfa <_scanf_float+0x39e>
 8003e62:	4630      	mov	r0, r6
 8003e64:	4639      	mov	r1, r7
 8003e66:	f7fc fec7 	bl	8000bf8 <__aeabi_d2f>
 8003e6a:	f8c8 0000 	str.w	r0, [r8]
 8003e6e:	e7c4      	b.n	8003dfa <_scanf_float+0x39e>
 8003e70:	2500      	movs	r5, #0
 8003e72:	e634      	b.n	8003ade <_scanf_float+0x82>
 8003e74:	08007ad0 	.word	0x08007ad0
 8003e78:	08007ed8 	.word	0x08007ed8

08003e7c <nanf>:
 8003e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003e84 <nanf+0x8>
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	7fc00000 	.word	0x7fc00000

08003e88 <siprintf>:
 8003e88:	b40e      	push	{r1, r2, r3}
 8003e8a:	b500      	push	{lr}
 8003e8c:	b09c      	sub	sp, #112	; 0x70
 8003e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e90:	9002      	str	r0, [sp, #8]
 8003e92:	9006      	str	r0, [sp, #24]
 8003e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e98:	4809      	ldr	r0, [pc, #36]	; (8003ec0 <siprintf+0x38>)
 8003e9a:	9107      	str	r1, [sp, #28]
 8003e9c:	9104      	str	r1, [sp, #16]
 8003e9e:	4909      	ldr	r1, [pc, #36]	; (8003ec4 <siprintf+0x3c>)
 8003ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ea4:	9105      	str	r1, [sp, #20]
 8003ea6:	6800      	ldr	r0, [r0, #0]
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	a902      	add	r1, sp, #8
 8003eac:	f002 fee2 	bl	8006c74 <_svfiprintf_r>
 8003eb0:	9b02      	ldr	r3, [sp, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	b01c      	add	sp, #112	; 0x70
 8003eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ebc:	b003      	add	sp, #12
 8003ebe:	4770      	bx	lr
 8003ec0:	2000000c 	.word	0x2000000c
 8003ec4:	ffff0208 	.word	0xffff0208

08003ec8 <sulp>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	4604      	mov	r4, r0
 8003ecc:	460d      	mov	r5, r1
 8003ece:	ec45 4b10 	vmov	d0, r4, r5
 8003ed2:	4616      	mov	r6, r2
 8003ed4:	f002 fc2c 	bl	8006730 <__ulp>
 8003ed8:	ec51 0b10 	vmov	r0, r1, d0
 8003edc:	b17e      	cbz	r6, 8003efe <sulp+0x36>
 8003ede:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003ee2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	dd09      	ble.n	8003efe <sulp+0x36>
 8003eea:	051b      	lsls	r3, r3, #20
 8003eec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	f7fc fb85 	bl	8000608 <__aeabi_dmul>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}

08003f00 <_strtod_l>:
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f04:	ed2d 8b02 	vpush	{d8}
 8003f08:	b09d      	sub	sp, #116	; 0x74
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9318      	str	r3, [sp, #96]	; 0x60
 8003f10:	4ba2      	ldr	r3, [pc, #648]	; (800419c <_strtod_l+0x29c>)
 8003f12:	9213      	str	r2, [sp, #76]	; 0x4c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9305      	str	r3, [sp, #20]
 8003f18:	4604      	mov	r4, r0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	4688      	mov	r8, r1
 8003f1e:	f7fc f95f 	bl	80001e0 <strlen>
 8003f22:	f04f 0a00 	mov.w	sl, #0
 8003f26:	4605      	mov	r5, r0
 8003f28:	f04f 0b00 	mov.w	fp, #0
 8003f2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	2a2b      	cmp	r2, #43	; 0x2b
 8003f36:	d04e      	beq.n	8003fd6 <_strtod_l+0xd6>
 8003f38:	d83b      	bhi.n	8003fb2 <_strtod_l+0xb2>
 8003f3a:	2a0d      	cmp	r2, #13
 8003f3c:	d834      	bhi.n	8003fa8 <_strtod_l+0xa8>
 8003f3e:	2a08      	cmp	r2, #8
 8003f40:	d834      	bhi.n	8003fac <_strtod_l+0xac>
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d03e      	beq.n	8003fc4 <_strtod_l+0xc4>
 8003f46:	2300      	movs	r3, #0
 8003f48:	930a      	str	r3, [sp, #40]	; 0x28
 8003f4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003f4c:	7833      	ldrb	r3, [r6, #0]
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	f040 80b0 	bne.w	80040b4 <_strtod_l+0x1b4>
 8003f54:	7873      	ldrb	r3, [r6, #1]
 8003f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f5a:	2b58      	cmp	r3, #88	; 0x58
 8003f5c:	d168      	bne.n	8004030 <_strtod_l+0x130>
 8003f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	ab18      	add	r3, sp, #96	; 0x60
 8003f64:	9702      	str	r7, [sp, #8]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	4a8d      	ldr	r2, [pc, #564]	; (80041a0 <_strtod_l+0x2a0>)
 8003f6a:	ab19      	add	r3, sp, #100	; 0x64
 8003f6c:	a917      	add	r1, sp, #92	; 0x5c
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f001 fd38 	bl	80059e4 <__gethex>
 8003f74:	f010 0707 	ands.w	r7, r0, #7
 8003f78:	4605      	mov	r5, r0
 8003f7a:	d005      	beq.n	8003f88 <_strtod_l+0x88>
 8003f7c:	2f06      	cmp	r7, #6
 8003f7e:	d12c      	bne.n	8003fda <_strtod_l+0xda>
 8003f80:	3601      	adds	r6, #1
 8003f82:	2300      	movs	r3, #0
 8003f84:	9617      	str	r6, [sp, #92]	; 0x5c
 8003f86:	930a      	str	r3, [sp, #40]	; 0x28
 8003f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 8590 	bne.w	8004ab0 <_strtod_l+0xbb0>
 8003f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f92:	b1eb      	cbz	r3, 8003fd0 <_strtod_l+0xd0>
 8003f94:	4652      	mov	r2, sl
 8003f96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003f9a:	ec43 2b10 	vmov	d0, r2, r3
 8003f9e:	b01d      	add	sp, #116	; 0x74
 8003fa0:	ecbd 8b02 	vpop	{d8}
 8003fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa8:	2a20      	cmp	r2, #32
 8003faa:	d1cc      	bne.n	8003f46 <_strtod_l+0x46>
 8003fac:	3301      	adds	r3, #1
 8003fae:	9317      	str	r3, [sp, #92]	; 0x5c
 8003fb0:	e7be      	b.n	8003f30 <_strtod_l+0x30>
 8003fb2:	2a2d      	cmp	r2, #45	; 0x2d
 8003fb4:	d1c7      	bne.n	8003f46 <_strtod_l+0x46>
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	920a      	str	r2, [sp, #40]	; 0x28
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1c2      	bne.n	8003f4a <_strtod_l+0x4a>
 8003fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003fc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 856e 	bne.w	8004aac <_strtod_l+0xbac>
 8003fd0:	4652      	mov	r2, sl
 8003fd2:	465b      	mov	r3, fp
 8003fd4:	e7e1      	b.n	8003f9a <_strtod_l+0x9a>
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	e7ee      	b.n	8003fb8 <_strtod_l+0xb8>
 8003fda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003fdc:	b13a      	cbz	r2, 8003fee <_strtod_l+0xee>
 8003fde:	2135      	movs	r1, #53	; 0x35
 8003fe0:	a81a      	add	r0, sp, #104	; 0x68
 8003fe2:	f002 fcb0 	bl	8006946 <__copybits>
 8003fe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f002 f86f 	bl	80060cc <_Bfree>
 8003fee:	3f01      	subs	r7, #1
 8003ff0:	2f04      	cmp	r7, #4
 8003ff2:	d806      	bhi.n	8004002 <_strtod_l+0x102>
 8003ff4:	e8df f007 	tbb	[pc, r7]
 8003ff8:	1714030a 	.word	0x1714030a
 8003ffc:	0a          	.byte	0x0a
 8003ffd:	00          	.byte	0x00
 8003ffe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004002:	0728      	lsls	r0, r5, #28
 8004004:	d5c0      	bpl.n	8003f88 <_strtod_l+0x88>
 8004006:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800400a:	e7bd      	b.n	8003f88 <_strtod_l+0x88>
 800400c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004010:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004012:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800401a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800401e:	e7f0      	b.n	8004002 <_strtod_l+0x102>
 8004020:	f8df b180 	ldr.w	fp, [pc, #384]	; 80041a4 <_strtod_l+0x2a4>
 8004024:	e7ed      	b.n	8004002 <_strtod_l+0x102>
 8004026:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800402a:	f04f 3aff 	mov.w	sl, #4294967295
 800402e:	e7e8      	b.n	8004002 <_strtod_l+0x102>
 8004030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	9217      	str	r2, [sp, #92]	; 0x5c
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b30      	cmp	r3, #48	; 0x30
 800403a:	d0f9      	beq.n	8004030 <_strtod_l+0x130>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0a3      	beq.n	8003f88 <_strtod_l+0x88>
 8004040:	2301      	movs	r3, #1
 8004042:	f04f 0900 	mov.w	r9, #0
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800404a:	9308      	str	r3, [sp, #32]
 800404c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004050:	464f      	mov	r7, r9
 8004052:	220a      	movs	r2, #10
 8004054:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004056:	7806      	ldrb	r6, [r0, #0]
 8004058:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800405c:	b2d9      	uxtb	r1, r3
 800405e:	2909      	cmp	r1, #9
 8004060:	d92a      	bls.n	80040b8 <_strtod_l+0x1b8>
 8004062:	9905      	ldr	r1, [sp, #20]
 8004064:	462a      	mov	r2, r5
 8004066:	f002 ff1f 	bl	8006ea8 <strncmp>
 800406a:	b398      	cbz	r0, 80040d4 <_strtod_l+0x1d4>
 800406c:	2000      	movs	r0, #0
 800406e:	4632      	mov	r2, r6
 8004070:	463d      	mov	r5, r7
 8004072:	9005      	str	r0, [sp, #20]
 8004074:	4603      	mov	r3, r0
 8004076:	2a65      	cmp	r2, #101	; 0x65
 8004078:	d001      	beq.n	800407e <_strtod_l+0x17e>
 800407a:	2a45      	cmp	r2, #69	; 0x45
 800407c:	d118      	bne.n	80040b0 <_strtod_l+0x1b0>
 800407e:	b91d      	cbnz	r5, 8004088 <_strtod_l+0x188>
 8004080:	9a04      	ldr	r2, [sp, #16]
 8004082:	4302      	orrs	r2, r0
 8004084:	d09e      	beq.n	8003fc4 <_strtod_l+0xc4>
 8004086:	2500      	movs	r5, #0
 8004088:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800408c:	f108 0201 	add.w	r2, r8, #1
 8004090:	9217      	str	r2, [sp, #92]	; 0x5c
 8004092:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004096:	2a2b      	cmp	r2, #43	; 0x2b
 8004098:	d075      	beq.n	8004186 <_strtod_l+0x286>
 800409a:	2a2d      	cmp	r2, #45	; 0x2d
 800409c:	d07b      	beq.n	8004196 <_strtod_l+0x296>
 800409e:	f04f 0c00 	mov.w	ip, #0
 80040a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80040a6:	2909      	cmp	r1, #9
 80040a8:	f240 8082 	bls.w	80041b0 <_strtod_l+0x2b0>
 80040ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80040b0:	2600      	movs	r6, #0
 80040b2:	e09d      	b.n	80041f0 <_strtod_l+0x2f0>
 80040b4:	2300      	movs	r3, #0
 80040b6:	e7c4      	b.n	8004042 <_strtod_l+0x142>
 80040b8:	2f08      	cmp	r7, #8
 80040ba:	bfd8      	it	le
 80040bc:	9907      	ldrle	r1, [sp, #28]
 80040be:	f100 0001 	add.w	r0, r0, #1
 80040c2:	bfda      	itte	le
 80040c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80040c8:	9307      	strle	r3, [sp, #28]
 80040ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80040ce:	3701      	adds	r7, #1
 80040d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80040d2:	e7bf      	b.n	8004054 <_strtod_l+0x154>
 80040d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040d6:	195a      	adds	r2, r3, r5
 80040d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80040da:	5d5a      	ldrb	r2, [r3, r5]
 80040dc:	2f00      	cmp	r7, #0
 80040de:	d037      	beq.n	8004150 <_strtod_l+0x250>
 80040e0:	9005      	str	r0, [sp, #20]
 80040e2:	463d      	mov	r5, r7
 80040e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80040e8:	2b09      	cmp	r3, #9
 80040ea:	d912      	bls.n	8004112 <_strtod_l+0x212>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e7c2      	b.n	8004076 <_strtod_l+0x176>
 80040f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80040f6:	785a      	ldrb	r2, [r3, #1]
 80040f8:	3001      	adds	r0, #1
 80040fa:	2a30      	cmp	r2, #48	; 0x30
 80040fc:	d0f8      	beq.n	80040f0 <_strtod_l+0x1f0>
 80040fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004102:	2b08      	cmp	r3, #8
 8004104:	f200 84d9 	bhi.w	8004aba <_strtod_l+0xbba>
 8004108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800410a:	9005      	str	r0, [sp, #20]
 800410c:	2000      	movs	r0, #0
 800410e:	9308      	str	r3, [sp, #32]
 8004110:	4605      	mov	r5, r0
 8004112:	3a30      	subs	r2, #48	; 0x30
 8004114:	f100 0301 	add.w	r3, r0, #1
 8004118:	d014      	beq.n	8004144 <_strtod_l+0x244>
 800411a:	9905      	ldr	r1, [sp, #20]
 800411c:	4419      	add	r1, r3
 800411e:	9105      	str	r1, [sp, #20]
 8004120:	462b      	mov	r3, r5
 8004122:	eb00 0e05 	add.w	lr, r0, r5
 8004126:	210a      	movs	r1, #10
 8004128:	4573      	cmp	r3, lr
 800412a:	d113      	bne.n	8004154 <_strtod_l+0x254>
 800412c:	182b      	adds	r3, r5, r0
 800412e:	2b08      	cmp	r3, #8
 8004130:	f105 0501 	add.w	r5, r5, #1
 8004134:	4405      	add	r5, r0
 8004136:	dc1c      	bgt.n	8004172 <_strtod_l+0x272>
 8004138:	9907      	ldr	r1, [sp, #28]
 800413a:	230a      	movs	r3, #10
 800413c:	fb03 2301 	mla	r3, r3, r1, r2
 8004140:	9307      	str	r3, [sp, #28]
 8004142:	2300      	movs	r3, #0
 8004144:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004146:	1c51      	adds	r1, r2, #1
 8004148:	9117      	str	r1, [sp, #92]	; 0x5c
 800414a:	7852      	ldrb	r2, [r2, #1]
 800414c:	4618      	mov	r0, r3
 800414e:	e7c9      	b.n	80040e4 <_strtod_l+0x1e4>
 8004150:	4638      	mov	r0, r7
 8004152:	e7d2      	b.n	80040fa <_strtod_l+0x1fa>
 8004154:	2b08      	cmp	r3, #8
 8004156:	dc04      	bgt.n	8004162 <_strtod_l+0x262>
 8004158:	9e07      	ldr	r6, [sp, #28]
 800415a:	434e      	muls	r6, r1
 800415c:	9607      	str	r6, [sp, #28]
 800415e:	3301      	adds	r3, #1
 8004160:	e7e2      	b.n	8004128 <_strtod_l+0x228>
 8004162:	f103 0c01 	add.w	ip, r3, #1
 8004166:	f1bc 0f10 	cmp.w	ip, #16
 800416a:	bfd8      	it	le
 800416c:	fb01 f909 	mulle.w	r9, r1, r9
 8004170:	e7f5      	b.n	800415e <_strtod_l+0x25e>
 8004172:	2d10      	cmp	r5, #16
 8004174:	bfdc      	itt	le
 8004176:	230a      	movle	r3, #10
 8004178:	fb03 2909 	mlale	r9, r3, r9, r2
 800417c:	e7e1      	b.n	8004142 <_strtod_l+0x242>
 800417e:	2300      	movs	r3, #0
 8004180:	9305      	str	r3, [sp, #20]
 8004182:	2301      	movs	r3, #1
 8004184:	e77c      	b.n	8004080 <_strtod_l+0x180>
 8004186:	f04f 0c00 	mov.w	ip, #0
 800418a:	f108 0202 	add.w	r2, r8, #2
 800418e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004190:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004194:	e785      	b.n	80040a2 <_strtod_l+0x1a2>
 8004196:	f04f 0c01 	mov.w	ip, #1
 800419a:	e7f6      	b.n	800418a <_strtod_l+0x28a>
 800419c:	08007d20 	.word	0x08007d20
 80041a0:	08007ad8 	.word	0x08007ad8
 80041a4:	7ff00000 	.word	0x7ff00000
 80041a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041aa:	1c51      	adds	r1, r2, #1
 80041ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80041ae:	7852      	ldrb	r2, [r2, #1]
 80041b0:	2a30      	cmp	r2, #48	; 0x30
 80041b2:	d0f9      	beq.n	80041a8 <_strtod_l+0x2a8>
 80041b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80041b8:	2908      	cmp	r1, #8
 80041ba:	f63f af79 	bhi.w	80040b0 <_strtod_l+0x1b0>
 80041be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80041c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041c4:	9206      	str	r2, [sp, #24]
 80041c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041c8:	1c51      	adds	r1, r2, #1
 80041ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80041cc:	7852      	ldrb	r2, [r2, #1]
 80041ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80041d2:	2e09      	cmp	r6, #9
 80041d4:	d937      	bls.n	8004246 <_strtod_l+0x346>
 80041d6:	9e06      	ldr	r6, [sp, #24]
 80041d8:	1b89      	subs	r1, r1, r6
 80041da:	2908      	cmp	r1, #8
 80041dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80041e0:	dc02      	bgt.n	80041e8 <_strtod_l+0x2e8>
 80041e2:	4576      	cmp	r6, lr
 80041e4:	bfa8      	it	ge
 80041e6:	4676      	movge	r6, lr
 80041e8:	f1bc 0f00 	cmp.w	ip, #0
 80041ec:	d000      	beq.n	80041f0 <_strtod_l+0x2f0>
 80041ee:	4276      	negs	r6, r6
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	d14d      	bne.n	8004290 <_strtod_l+0x390>
 80041f4:	9904      	ldr	r1, [sp, #16]
 80041f6:	4301      	orrs	r1, r0
 80041f8:	f47f aec6 	bne.w	8003f88 <_strtod_l+0x88>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f aee1 	bne.w	8003fc4 <_strtod_l+0xc4>
 8004202:	2a69      	cmp	r2, #105	; 0x69
 8004204:	d027      	beq.n	8004256 <_strtod_l+0x356>
 8004206:	dc24      	bgt.n	8004252 <_strtod_l+0x352>
 8004208:	2a49      	cmp	r2, #73	; 0x49
 800420a:	d024      	beq.n	8004256 <_strtod_l+0x356>
 800420c:	2a4e      	cmp	r2, #78	; 0x4e
 800420e:	f47f aed9 	bne.w	8003fc4 <_strtod_l+0xc4>
 8004212:	499f      	ldr	r1, [pc, #636]	; (8004490 <_strtod_l+0x590>)
 8004214:	a817      	add	r0, sp, #92	; 0x5c
 8004216:	f001 fe3d 	bl	8005e94 <__match>
 800421a:	2800      	cmp	r0, #0
 800421c:	f43f aed2 	beq.w	8003fc4 <_strtod_l+0xc4>
 8004220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b28      	cmp	r3, #40	; 0x28
 8004226:	d12d      	bne.n	8004284 <_strtod_l+0x384>
 8004228:	499a      	ldr	r1, [pc, #616]	; (8004494 <_strtod_l+0x594>)
 800422a:	aa1a      	add	r2, sp, #104	; 0x68
 800422c:	a817      	add	r0, sp, #92	; 0x5c
 800422e:	f001 fe45 	bl	8005ebc <__hexnan>
 8004232:	2805      	cmp	r0, #5
 8004234:	d126      	bne.n	8004284 <_strtod_l+0x384>
 8004236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004238:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800423c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004240:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004244:	e6a0      	b.n	8003f88 <_strtod_l+0x88>
 8004246:	210a      	movs	r1, #10
 8004248:	fb01 2e0e 	mla	lr, r1, lr, r2
 800424c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004250:	e7b9      	b.n	80041c6 <_strtod_l+0x2c6>
 8004252:	2a6e      	cmp	r2, #110	; 0x6e
 8004254:	e7db      	b.n	800420e <_strtod_l+0x30e>
 8004256:	4990      	ldr	r1, [pc, #576]	; (8004498 <_strtod_l+0x598>)
 8004258:	a817      	add	r0, sp, #92	; 0x5c
 800425a:	f001 fe1b 	bl	8005e94 <__match>
 800425e:	2800      	cmp	r0, #0
 8004260:	f43f aeb0 	beq.w	8003fc4 <_strtod_l+0xc4>
 8004264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004266:	498d      	ldr	r1, [pc, #564]	; (800449c <_strtod_l+0x59c>)
 8004268:	3b01      	subs	r3, #1
 800426a:	a817      	add	r0, sp, #92	; 0x5c
 800426c:	9317      	str	r3, [sp, #92]	; 0x5c
 800426e:	f001 fe11 	bl	8005e94 <__match>
 8004272:	b910      	cbnz	r0, 800427a <_strtod_l+0x37a>
 8004274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004276:	3301      	adds	r3, #1
 8004278:	9317      	str	r3, [sp, #92]	; 0x5c
 800427a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80044ac <_strtod_l+0x5ac>
 800427e:	f04f 0a00 	mov.w	sl, #0
 8004282:	e681      	b.n	8003f88 <_strtod_l+0x88>
 8004284:	4886      	ldr	r0, [pc, #536]	; (80044a0 <_strtod_l+0x5a0>)
 8004286:	f002 fdf7 	bl	8006e78 <nan>
 800428a:	ec5b ab10 	vmov	sl, fp, d0
 800428e:	e67b      	b.n	8003f88 <_strtod_l+0x88>
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	9807      	ldr	r0, [sp, #28]
 8004294:	1af3      	subs	r3, r6, r3
 8004296:	2f00      	cmp	r7, #0
 8004298:	bf08      	it	eq
 800429a:	462f      	moveq	r7, r5
 800429c:	2d10      	cmp	r5, #16
 800429e:	9306      	str	r3, [sp, #24]
 80042a0:	46a8      	mov	r8, r5
 80042a2:	bfa8      	it	ge
 80042a4:	f04f 0810 	movge.w	r8, #16
 80042a8:	f7fc f934 	bl	8000514 <__aeabi_ui2d>
 80042ac:	2d09      	cmp	r5, #9
 80042ae:	4682      	mov	sl, r0
 80042b0:	468b      	mov	fp, r1
 80042b2:	dd13      	ble.n	80042dc <_strtod_l+0x3dc>
 80042b4:	4b7b      	ldr	r3, [pc, #492]	; (80044a4 <_strtod_l+0x5a4>)
 80042b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80042ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042be:	f7fc f9a3 	bl	8000608 <__aeabi_dmul>
 80042c2:	4682      	mov	sl, r0
 80042c4:	4648      	mov	r0, r9
 80042c6:	468b      	mov	fp, r1
 80042c8:	f7fc f924 	bl	8000514 <__aeabi_ui2d>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4650      	mov	r0, sl
 80042d2:	4659      	mov	r1, fp
 80042d4:	f7fb ffe2 	bl	800029c <__adddf3>
 80042d8:	4682      	mov	sl, r0
 80042da:	468b      	mov	fp, r1
 80042dc:	2d0f      	cmp	r5, #15
 80042de:	dc38      	bgt.n	8004352 <_strtod_l+0x452>
 80042e0:	9b06      	ldr	r3, [sp, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f43f ae50 	beq.w	8003f88 <_strtod_l+0x88>
 80042e8:	dd24      	ble.n	8004334 <_strtod_l+0x434>
 80042ea:	2b16      	cmp	r3, #22
 80042ec:	dc0b      	bgt.n	8004306 <_strtod_l+0x406>
 80042ee:	496d      	ldr	r1, [pc, #436]	; (80044a4 <_strtod_l+0x5a4>)
 80042f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042f8:	4652      	mov	r2, sl
 80042fa:	465b      	mov	r3, fp
 80042fc:	f7fc f984 	bl	8000608 <__aeabi_dmul>
 8004300:	4682      	mov	sl, r0
 8004302:	468b      	mov	fp, r1
 8004304:	e640      	b.n	8003f88 <_strtod_l+0x88>
 8004306:	9a06      	ldr	r2, [sp, #24]
 8004308:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800430c:	4293      	cmp	r3, r2
 800430e:	db20      	blt.n	8004352 <_strtod_l+0x452>
 8004310:	4c64      	ldr	r4, [pc, #400]	; (80044a4 <_strtod_l+0x5a4>)
 8004312:	f1c5 050f 	rsb	r5, r5, #15
 8004316:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800431a:	4652      	mov	r2, sl
 800431c:	465b      	mov	r3, fp
 800431e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004322:	f7fc f971 	bl	8000608 <__aeabi_dmul>
 8004326:	9b06      	ldr	r3, [sp, #24]
 8004328:	1b5d      	subs	r5, r3, r5
 800432a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800432e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004332:	e7e3      	b.n	80042fc <_strtod_l+0x3fc>
 8004334:	9b06      	ldr	r3, [sp, #24]
 8004336:	3316      	adds	r3, #22
 8004338:	db0b      	blt.n	8004352 <_strtod_l+0x452>
 800433a:	9b05      	ldr	r3, [sp, #20]
 800433c:	1b9e      	subs	r6, r3, r6
 800433e:	4b59      	ldr	r3, [pc, #356]	; (80044a4 <_strtod_l+0x5a4>)
 8004340:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004344:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004348:	4650      	mov	r0, sl
 800434a:	4659      	mov	r1, fp
 800434c:	f7fc fa86 	bl	800085c <__aeabi_ddiv>
 8004350:	e7d6      	b.n	8004300 <_strtod_l+0x400>
 8004352:	9b06      	ldr	r3, [sp, #24]
 8004354:	eba5 0808 	sub.w	r8, r5, r8
 8004358:	4498      	add	r8, r3
 800435a:	f1b8 0f00 	cmp.w	r8, #0
 800435e:	dd74      	ble.n	800444a <_strtod_l+0x54a>
 8004360:	f018 030f 	ands.w	r3, r8, #15
 8004364:	d00a      	beq.n	800437c <_strtod_l+0x47c>
 8004366:	494f      	ldr	r1, [pc, #316]	; (80044a4 <_strtod_l+0x5a4>)
 8004368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800436c:	4652      	mov	r2, sl
 800436e:	465b      	mov	r3, fp
 8004370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004374:	f7fc f948 	bl	8000608 <__aeabi_dmul>
 8004378:	4682      	mov	sl, r0
 800437a:	468b      	mov	fp, r1
 800437c:	f038 080f 	bics.w	r8, r8, #15
 8004380:	d04f      	beq.n	8004422 <_strtod_l+0x522>
 8004382:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004386:	dd22      	ble.n	80043ce <_strtod_l+0x4ce>
 8004388:	2500      	movs	r5, #0
 800438a:	462e      	mov	r6, r5
 800438c:	9507      	str	r5, [sp, #28]
 800438e:	9505      	str	r5, [sp, #20]
 8004390:	2322      	movs	r3, #34	; 0x22
 8004392:	f8df b118 	ldr.w	fp, [pc, #280]	; 80044ac <_strtod_l+0x5ac>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	f04f 0a00 	mov.w	sl, #0
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f43f adf2 	beq.w	8003f88 <_strtod_l+0x88>
 80043a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80043a6:	4620      	mov	r0, r4
 80043a8:	f001 fe90 	bl	80060cc <_Bfree>
 80043ac:	9905      	ldr	r1, [sp, #20]
 80043ae:	4620      	mov	r0, r4
 80043b0:	f001 fe8c 	bl	80060cc <_Bfree>
 80043b4:	4631      	mov	r1, r6
 80043b6:	4620      	mov	r0, r4
 80043b8:	f001 fe88 	bl	80060cc <_Bfree>
 80043bc:	9907      	ldr	r1, [sp, #28]
 80043be:	4620      	mov	r0, r4
 80043c0:	f001 fe84 	bl	80060cc <_Bfree>
 80043c4:	4629      	mov	r1, r5
 80043c6:	4620      	mov	r0, r4
 80043c8:	f001 fe80 	bl	80060cc <_Bfree>
 80043cc:	e5dc      	b.n	8003f88 <_strtod_l+0x88>
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <_strtod_l+0x5a8>)
 80043d0:	9304      	str	r3, [sp, #16]
 80043d2:	2300      	movs	r3, #0
 80043d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80043d8:	4650      	mov	r0, sl
 80043da:	4659      	mov	r1, fp
 80043dc:	4699      	mov	r9, r3
 80043de:	f1b8 0f01 	cmp.w	r8, #1
 80043e2:	dc21      	bgt.n	8004428 <_strtod_l+0x528>
 80043e4:	b10b      	cbz	r3, 80043ea <_strtod_l+0x4ea>
 80043e6:	4682      	mov	sl, r0
 80043e8:	468b      	mov	fp, r1
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <_strtod_l+0x5a8>)
 80043ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80043f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80043f4:	4652      	mov	r2, sl
 80043f6:	465b      	mov	r3, fp
 80043f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80043fc:	f7fc f904 	bl	8000608 <__aeabi_dmul>
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <_strtod_l+0x5ac>)
 8004402:	460a      	mov	r2, r1
 8004404:	400b      	ands	r3, r1
 8004406:	492a      	ldr	r1, [pc, #168]	; (80044b0 <_strtod_l+0x5b0>)
 8004408:	428b      	cmp	r3, r1
 800440a:	4682      	mov	sl, r0
 800440c:	d8bc      	bhi.n	8004388 <_strtod_l+0x488>
 800440e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004412:	428b      	cmp	r3, r1
 8004414:	bf86      	itte	hi
 8004416:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80044b4 <_strtod_l+0x5b4>
 800441a:	f04f 3aff 	movhi.w	sl, #4294967295
 800441e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004422:	2300      	movs	r3, #0
 8004424:	9304      	str	r3, [sp, #16]
 8004426:	e084      	b.n	8004532 <_strtod_l+0x632>
 8004428:	f018 0f01 	tst.w	r8, #1
 800442c:	d005      	beq.n	800443a <_strtod_l+0x53a>
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fc f8e8 	bl	8000608 <__aeabi_dmul>
 8004438:	2301      	movs	r3, #1
 800443a:	9a04      	ldr	r2, [sp, #16]
 800443c:	3208      	adds	r2, #8
 800443e:	f109 0901 	add.w	r9, r9, #1
 8004442:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004446:	9204      	str	r2, [sp, #16]
 8004448:	e7c9      	b.n	80043de <_strtod_l+0x4de>
 800444a:	d0ea      	beq.n	8004422 <_strtod_l+0x522>
 800444c:	f1c8 0800 	rsb	r8, r8, #0
 8004450:	f018 020f 	ands.w	r2, r8, #15
 8004454:	d00a      	beq.n	800446c <_strtod_l+0x56c>
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <_strtod_l+0x5a4>)
 8004458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800445c:	4650      	mov	r0, sl
 800445e:	4659      	mov	r1, fp
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc f9fa 	bl	800085c <__aeabi_ddiv>
 8004468:	4682      	mov	sl, r0
 800446a:	468b      	mov	fp, r1
 800446c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004470:	d0d7      	beq.n	8004422 <_strtod_l+0x522>
 8004472:	f1b8 0f1f 	cmp.w	r8, #31
 8004476:	dd1f      	ble.n	80044b8 <_strtod_l+0x5b8>
 8004478:	2500      	movs	r5, #0
 800447a:	462e      	mov	r6, r5
 800447c:	9507      	str	r5, [sp, #28]
 800447e:	9505      	str	r5, [sp, #20]
 8004480:	2322      	movs	r3, #34	; 0x22
 8004482:	f04f 0a00 	mov.w	sl, #0
 8004486:	f04f 0b00 	mov.w	fp, #0
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	e786      	b.n	800439c <_strtod_l+0x49c>
 800448e:	bf00      	nop
 8004490:	08007aa9 	.word	0x08007aa9
 8004494:	08007aec 	.word	0x08007aec
 8004498:	08007aa1 	.word	0x08007aa1
 800449c:	08007c2c 	.word	0x08007c2c
 80044a0:	08007ed8 	.word	0x08007ed8
 80044a4:	08007db8 	.word	0x08007db8
 80044a8:	08007d90 	.word	0x08007d90
 80044ac:	7ff00000 	.word	0x7ff00000
 80044b0:	7ca00000 	.word	0x7ca00000
 80044b4:	7fefffff 	.word	0x7fefffff
 80044b8:	f018 0310 	ands.w	r3, r8, #16
 80044bc:	bf18      	it	ne
 80044be:	236a      	movne	r3, #106	; 0x6a
 80044c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004870 <_strtod_l+0x970>
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	4650      	mov	r0, sl
 80044c8:	4659      	mov	r1, fp
 80044ca:	2300      	movs	r3, #0
 80044cc:	f018 0f01 	tst.w	r8, #1
 80044d0:	d004      	beq.n	80044dc <_strtod_l+0x5dc>
 80044d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80044d6:	f7fc f897 	bl	8000608 <__aeabi_dmul>
 80044da:	2301      	movs	r3, #1
 80044dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80044e0:	f109 0908 	add.w	r9, r9, #8
 80044e4:	d1f2      	bne.n	80044cc <_strtod_l+0x5cc>
 80044e6:	b10b      	cbz	r3, 80044ec <_strtod_l+0x5ec>
 80044e8:	4682      	mov	sl, r0
 80044ea:	468b      	mov	fp, r1
 80044ec:	9b04      	ldr	r3, [sp, #16]
 80044ee:	b1c3      	cbz	r3, 8004522 <_strtod_l+0x622>
 80044f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80044f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	4659      	mov	r1, fp
 80044fc:	dd11      	ble.n	8004522 <_strtod_l+0x622>
 80044fe:	2b1f      	cmp	r3, #31
 8004500:	f340 8124 	ble.w	800474c <_strtod_l+0x84c>
 8004504:	2b34      	cmp	r3, #52	; 0x34
 8004506:	bfde      	ittt	le
 8004508:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800450c:	f04f 33ff 	movle.w	r3, #4294967295
 8004510:	fa03 f202 	lslle.w	r2, r3, r2
 8004514:	f04f 0a00 	mov.w	sl, #0
 8004518:	bfcc      	ite	gt
 800451a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800451e:	ea02 0b01 	andle.w	fp, r2, r1
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	4650      	mov	r0, sl
 8004528:	4659      	mov	r1, fp
 800452a:	f7fc fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800452e:	2800      	cmp	r0, #0
 8004530:	d1a2      	bne.n	8004478 <_strtod_l+0x578>
 8004532:	9b07      	ldr	r3, [sp, #28]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	9908      	ldr	r1, [sp, #32]
 8004538:	462b      	mov	r3, r5
 800453a:	463a      	mov	r2, r7
 800453c:	4620      	mov	r0, r4
 800453e:	f001 fe2d 	bl	800619c <__s2b>
 8004542:	9007      	str	r0, [sp, #28]
 8004544:	2800      	cmp	r0, #0
 8004546:	f43f af1f 	beq.w	8004388 <_strtod_l+0x488>
 800454a:	9b05      	ldr	r3, [sp, #20]
 800454c:	1b9e      	subs	r6, r3, r6
 800454e:	9b06      	ldr	r3, [sp, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	bfb4      	ite	lt
 8004554:	4633      	movlt	r3, r6
 8004556:	2300      	movge	r3, #0
 8004558:	930c      	str	r3, [sp, #48]	; 0x30
 800455a:	9b06      	ldr	r3, [sp, #24]
 800455c:	2500      	movs	r5, #0
 800455e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004562:	9312      	str	r3, [sp, #72]	; 0x48
 8004564:	462e      	mov	r6, r5
 8004566:	9b07      	ldr	r3, [sp, #28]
 8004568:	4620      	mov	r0, r4
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	f001 fd6e 	bl	800604c <_Balloc>
 8004570:	9005      	str	r0, [sp, #20]
 8004572:	2800      	cmp	r0, #0
 8004574:	f43f af0c 	beq.w	8004390 <_strtod_l+0x490>
 8004578:	9b07      	ldr	r3, [sp, #28]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	3202      	adds	r2, #2
 800457e:	f103 010c 	add.w	r1, r3, #12
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	300c      	adds	r0, #12
 8004586:	f001 fd53 	bl	8006030 <memcpy>
 800458a:	ec4b ab10 	vmov	d0, sl, fp
 800458e:	aa1a      	add	r2, sp, #104	; 0x68
 8004590:	a919      	add	r1, sp, #100	; 0x64
 8004592:	4620      	mov	r0, r4
 8004594:	f002 f948 	bl	8006828 <__d2b>
 8004598:	ec4b ab18 	vmov	d8, sl, fp
 800459c:	9018      	str	r0, [sp, #96]	; 0x60
 800459e:	2800      	cmp	r0, #0
 80045a0:	f43f aef6 	beq.w	8004390 <_strtod_l+0x490>
 80045a4:	2101      	movs	r1, #1
 80045a6:	4620      	mov	r0, r4
 80045a8:	f001 fe92 	bl	80062d0 <__i2b>
 80045ac:	4606      	mov	r6, r0
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f43f aeee 	beq.w	8004390 <_strtod_l+0x490>
 80045b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045b6:	9904      	ldr	r1, [sp, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfab      	itete	ge
 80045bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80045be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80045c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80045c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80045c6:	bfac      	ite	ge
 80045c8:	eb03 0902 	addge.w	r9, r3, r2
 80045cc:	1ad7      	sublt	r7, r2, r3
 80045ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80045d0:	eba3 0801 	sub.w	r8, r3, r1
 80045d4:	4490      	add	r8, r2
 80045d6:	4ba1      	ldr	r3, [pc, #644]	; (800485c <_strtod_l+0x95c>)
 80045d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80045dc:	4598      	cmp	r8, r3
 80045de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045e2:	f280 80c7 	bge.w	8004774 <_strtod_l+0x874>
 80045e6:	eba3 0308 	sub.w	r3, r3, r8
 80045ea:	2b1f      	cmp	r3, #31
 80045ec:	eba2 0203 	sub.w	r2, r2, r3
 80045f0:	f04f 0101 	mov.w	r1, #1
 80045f4:	f300 80b1 	bgt.w	800475a <_strtod_l+0x85a>
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	930d      	str	r3, [sp, #52]	; 0x34
 80045fe:	2300      	movs	r3, #0
 8004600:	9308      	str	r3, [sp, #32]
 8004602:	eb09 0802 	add.w	r8, r9, r2
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	45c1      	cmp	r9, r8
 800460a:	4417      	add	r7, r2
 800460c:	441f      	add	r7, r3
 800460e:	464b      	mov	r3, r9
 8004610:	bfa8      	it	ge
 8004612:	4643      	movge	r3, r8
 8004614:	42bb      	cmp	r3, r7
 8004616:	bfa8      	it	ge
 8004618:	463b      	movge	r3, r7
 800461a:	2b00      	cmp	r3, #0
 800461c:	bfc2      	ittt	gt
 800461e:	eba8 0803 	subgt.w	r8, r8, r3
 8004622:	1aff      	subgt	r7, r7, r3
 8004624:	eba9 0903 	subgt.w	r9, r9, r3
 8004628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800462a:	2b00      	cmp	r3, #0
 800462c:	dd17      	ble.n	800465e <_strtod_l+0x75e>
 800462e:	4631      	mov	r1, r6
 8004630:	461a      	mov	r2, r3
 8004632:	4620      	mov	r0, r4
 8004634:	f001 ff0c 	bl	8006450 <__pow5mult>
 8004638:	4606      	mov	r6, r0
 800463a:	2800      	cmp	r0, #0
 800463c:	f43f aea8 	beq.w	8004390 <_strtod_l+0x490>
 8004640:	4601      	mov	r1, r0
 8004642:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004644:	4620      	mov	r0, r4
 8004646:	f001 fe59 	bl	80062fc <__multiply>
 800464a:	900b      	str	r0, [sp, #44]	; 0x2c
 800464c:	2800      	cmp	r0, #0
 800464e:	f43f ae9f 	beq.w	8004390 <_strtod_l+0x490>
 8004652:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004654:	4620      	mov	r0, r4
 8004656:	f001 fd39 	bl	80060cc <_Bfree>
 800465a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800465c:	9318      	str	r3, [sp, #96]	; 0x60
 800465e:	f1b8 0f00 	cmp.w	r8, #0
 8004662:	f300 808c 	bgt.w	800477e <_strtod_l+0x87e>
 8004666:	9b06      	ldr	r3, [sp, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	dd08      	ble.n	800467e <_strtod_l+0x77e>
 800466c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800466e:	9905      	ldr	r1, [sp, #20]
 8004670:	4620      	mov	r0, r4
 8004672:	f001 feed 	bl	8006450 <__pow5mult>
 8004676:	9005      	str	r0, [sp, #20]
 8004678:	2800      	cmp	r0, #0
 800467a:	f43f ae89 	beq.w	8004390 <_strtod_l+0x490>
 800467e:	2f00      	cmp	r7, #0
 8004680:	dd08      	ble.n	8004694 <_strtod_l+0x794>
 8004682:	9905      	ldr	r1, [sp, #20]
 8004684:	463a      	mov	r2, r7
 8004686:	4620      	mov	r0, r4
 8004688:	f001 ff3c 	bl	8006504 <__lshift>
 800468c:	9005      	str	r0, [sp, #20]
 800468e:	2800      	cmp	r0, #0
 8004690:	f43f ae7e 	beq.w	8004390 <_strtod_l+0x490>
 8004694:	f1b9 0f00 	cmp.w	r9, #0
 8004698:	dd08      	ble.n	80046ac <_strtod_l+0x7ac>
 800469a:	4631      	mov	r1, r6
 800469c:	464a      	mov	r2, r9
 800469e:	4620      	mov	r0, r4
 80046a0:	f001 ff30 	bl	8006504 <__lshift>
 80046a4:	4606      	mov	r6, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f43f ae72 	beq.w	8004390 <_strtod_l+0x490>
 80046ac:	9a05      	ldr	r2, [sp, #20]
 80046ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80046b0:	4620      	mov	r0, r4
 80046b2:	f001 ffb3 	bl	800661c <__mdiff>
 80046b6:	4605      	mov	r5, r0
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f43f ae69 	beq.w	8004390 <_strtod_l+0x490>
 80046be:	68c3      	ldr	r3, [r0, #12]
 80046c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80046c2:	2300      	movs	r3, #0
 80046c4:	60c3      	str	r3, [r0, #12]
 80046c6:	4631      	mov	r1, r6
 80046c8:	f001 ff8c 	bl	80065e4 <__mcmp>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	da60      	bge.n	8004792 <_strtod_l+0x892>
 80046d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d2:	ea53 030a 	orrs.w	r3, r3, sl
 80046d6:	f040 8082 	bne.w	80047de <_strtod_l+0x8de>
 80046da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d17d      	bne.n	80047de <_strtod_l+0x8de>
 80046e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80046e6:	0d1b      	lsrs	r3, r3, #20
 80046e8:	051b      	lsls	r3, r3, #20
 80046ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80046ee:	d976      	bls.n	80047de <_strtod_l+0x8de>
 80046f0:	696b      	ldr	r3, [r5, #20]
 80046f2:	b913      	cbnz	r3, 80046fa <_strtod_l+0x7fa>
 80046f4:	692b      	ldr	r3, [r5, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	dd71      	ble.n	80047de <_strtod_l+0x8de>
 80046fa:	4629      	mov	r1, r5
 80046fc:	2201      	movs	r2, #1
 80046fe:	4620      	mov	r0, r4
 8004700:	f001 ff00 	bl	8006504 <__lshift>
 8004704:	4631      	mov	r1, r6
 8004706:	4605      	mov	r5, r0
 8004708:	f001 ff6c 	bl	80065e4 <__mcmp>
 800470c:	2800      	cmp	r0, #0
 800470e:	dd66      	ble.n	80047de <_strtod_l+0x8de>
 8004710:	9904      	ldr	r1, [sp, #16]
 8004712:	4a53      	ldr	r2, [pc, #332]	; (8004860 <_strtod_l+0x960>)
 8004714:	465b      	mov	r3, fp
 8004716:	2900      	cmp	r1, #0
 8004718:	f000 8081 	beq.w	800481e <_strtod_l+0x91e>
 800471c:	ea02 010b 	and.w	r1, r2, fp
 8004720:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004724:	dc7b      	bgt.n	800481e <_strtod_l+0x91e>
 8004726:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800472a:	f77f aea9 	ble.w	8004480 <_strtod_l+0x580>
 800472e:	4b4d      	ldr	r3, [pc, #308]	; (8004864 <_strtod_l+0x964>)
 8004730:	4650      	mov	r0, sl
 8004732:	4659      	mov	r1, fp
 8004734:	2200      	movs	r2, #0
 8004736:	f7fb ff67 	bl	8000608 <__aeabi_dmul>
 800473a:	460b      	mov	r3, r1
 800473c:	4303      	orrs	r3, r0
 800473e:	bf08      	it	eq
 8004740:	2322      	moveq	r3, #34	; 0x22
 8004742:	4682      	mov	sl, r0
 8004744:	468b      	mov	fp, r1
 8004746:	bf08      	it	eq
 8004748:	6023      	streq	r3, [r4, #0]
 800474a:	e62b      	b.n	80043a4 <_strtod_l+0x4a4>
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	ea03 0a0a 	and.w	sl, r3, sl
 8004758:	e6e3      	b.n	8004522 <_strtod_l+0x622>
 800475a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800475e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004762:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004766:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800476a:	fa01 f308 	lsl.w	r3, r1, r8
 800476e:	9308      	str	r3, [sp, #32]
 8004770:	910d      	str	r1, [sp, #52]	; 0x34
 8004772:	e746      	b.n	8004602 <_strtod_l+0x702>
 8004774:	2300      	movs	r3, #0
 8004776:	9308      	str	r3, [sp, #32]
 8004778:	2301      	movs	r3, #1
 800477a:	930d      	str	r3, [sp, #52]	; 0x34
 800477c:	e741      	b.n	8004602 <_strtod_l+0x702>
 800477e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004780:	4642      	mov	r2, r8
 8004782:	4620      	mov	r0, r4
 8004784:	f001 febe 	bl	8006504 <__lshift>
 8004788:	9018      	str	r0, [sp, #96]	; 0x60
 800478a:	2800      	cmp	r0, #0
 800478c:	f47f af6b 	bne.w	8004666 <_strtod_l+0x766>
 8004790:	e5fe      	b.n	8004390 <_strtod_l+0x490>
 8004792:	465f      	mov	r7, fp
 8004794:	d16e      	bne.n	8004874 <_strtod_l+0x974>
 8004796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800479c:	b342      	cbz	r2, 80047f0 <_strtod_l+0x8f0>
 800479e:	4a32      	ldr	r2, [pc, #200]	; (8004868 <_strtod_l+0x968>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d128      	bne.n	80047f6 <_strtod_l+0x8f6>
 80047a4:	9b04      	ldr	r3, [sp, #16]
 80047a6:	4651      	mov	r1, sl
 80047a8:	b1eb      	cbz	r3, 80047e6 <_strtod_l+0x8e6>
 80047aa:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <_strtod_l+0x960>)
 80047ac:	403b      	ands	r3, r7
 80047ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295
 80047b6:	d819      	bhi.n	80047ec <_strtod_l+0x8ec>
 80047b8:	0d1b      	lsrs	r3, r3, #20
 80047ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d117      	bne.n	80047f6 <_strtod_l+0x8f6>
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <_strtod_l+0x96c>)
 80047c8:	429f      	cmp	r7, r3
 80047ca:	d102      	bne.n	80047d2 <_strtod_l+0x8d2>
 80047cc:	3101      	adds	r1, #1
 80047ce:	f43f addf 	beq.w	8004390 <_strtod_l+0x490>
 80047d2:	4b23      	ldr	r3, [pc, #140]	; (8004860 <_strtod_l+0x960>)
 80047d4:	403b      	ands	r3, r7
 80047d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80047da:	f04f 0a00 	mov.w	sl, #0
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1a4      	bne.n	800472e <_strtod_l+0x82e>
 80047e4:	e5de      	b.n	80043a4 <_strtod_l+0x4a4>
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	e7ea      	b.n	80047c2 <_strtod_l+0x8c2>
 80047ec:	4613      	mov	r3, r2
 80047ee:	e7e8      	b.n	80047c2 <_strtod_l+0x8c2>
 80047f0:	ea53 030a 	orrs.w	r3, r3, sl
 80047f4:	d08c      	beq.n	8004710 <_strtod_l+0x810>
 80047f6:	9b08      	ldr	r3, [sp, #32]
 80047f8:	b1db      	cbz	r3, 8004832 <_strtod_l+0x932>
 80047fa:	423b      	tst	r3, r7
 80047fc:	d0ef      	beq.n	80047de <_strtod_l+0x8de>
 80047fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004800:	9a04      	ldr	r2, [sp, #16]
 8004802:	4650      	mov	r0, sl
 8004804:	4659      	mov	r1, fp
 8004806:	b1c3      	cbz	r3, 800483a <_strtod_l+0x93a>
 8004808:	f7ff fb5e 	bl	8003ec8 <sulp>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	ec51 0b18 	vmov	r0, r1, d8
 8004814:	f7fb fd42 	bl	800029c <__adddf3>
 8004818:	4682      	mov	sl, r0
 800481a:	468b      	mov	fp, r1
 800481c:	e7df      	b.n	80047de <_strtod_l+0x8de>
 800481e:	4013      	ands	r3, r2
 8004820:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004824:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004828:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800482c:	f04f 3aff 	mov.w	sl, #4294967295
 8004830:	e7d5      	b.n	80047de <_strtod_l+0x8de>
 8004832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004834:	ea13 0f0a 	tst.w	r3, sl
 8004838:	e7e0      	b.n	80047fc <_strtod_l+0x8fc>
 800483a:	f7ff fb45 	bl	8003ec8 <sulp>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	ec51 0b18 	vmov	r0, r1, d8
 8004846:	f7fb fd27 	bl	8000298 <__aeabi_dsub>
 800484a:	2200      	movs	r2, #0
 800484c:	2300      	movs	r3, #0
 800484e:	4682      	mov	sl, r0
 8004850:	468b      	mov	fp, r1
 8004852:	f7fc f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8004856:	2800      	cmp	r0, #0
 8004858:	d0c1      	beq.n	80047de <_strtod_l+0x8de>
 800485a:	e611      	b.n	8004480 <_strtod_l+0x580>
 800485c:	fffffc02 	.word	0xfffffc02
 8004860:	7ff00000 	.word	0x7ff00000
 8004864:	39500000 	.word	0x39500000
 8004868:	000fffff 	.word	0x000fffff
 800486c:	7fefffff 	.word	0x7fefffff
 8004870:	08007b00 	.word	0x08007b00
 8004874:	4631      	mov	r1, r6
 8004876:	4628      	mov	r0, r5
 8004878:	f002 f832 	bl	80068e0 <__ratio>
 800487c:	ec59 8b10 	vmov	r8, r9, d0
 8004880:	ee10 0a10 	vmov	r0, s0
 8004884:	2200      	movs	r2, #0
 8004886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800488a:	4649      	mov	r1, r9
 800488c:	f7fc f938 	bl	8000b00 <__aeabi_dcmple>
 8004890:	2800      	cmp	r0, #0
 8004892:	d07a      	beq.n	800498a <_strtod_l+0xa8a>
 8004894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04a      	beq.n	8004930 <_strtod_l+0xa30>
 800489a:	4b95      	ldr	r3, [pc, #596]	; (8004af0 <_strtod_l+0xbf0>)
 800489c:	2200      	movs	r2, #0
 800489e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004af0 <_strtod_l+0xbf0>
 80048a6:	f04f 0800 	mov.w	r8, #0
 80048aa:	4b92      	ldr	r3, [pc, #584]	; (8004af4 <_strtod_l+0xbf4>)
 80048ac:	403b      	ands	r3, r7
 80048ae:	930d      	str	r3, [sp, #52]	; 0x34
 80048b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048b2:	4b91      	ldr	r3, [pc, #580]	; (8004af8 <_strtod_l+0xbf8>)
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f040 80b0 	bne.w	8004a1a <_strtod_l+0xb1a>
 80048ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80048be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80048c2:	ec4b ab10 	vmov	d0, sl, fp
 80048c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80048ca:	f001 ff31 	bl	8006730 <__ulp>
 80048ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80048d2:	ec53 2b10 	vmov	r2, r3, d0
 80048d6:	f7fb fe97 	bl	8000608 <__aeabi_dmul>
 80048da:	4652      	mov	r2, sl
 80048dc:	465b      	mov	r3, fp
 80048de:	f7fb fcdd 	bl	800029c <__adddf3>
 80048e2:	460b      	mov	r3, r1
 80048e4:	4983      	ldr	r1, [pc, #524]	; (8004af4 <_strtod_l+0xbf4>)
 80048e6:	4a85      	ldr	r2, [pc, #532]	; (8004afc <_strtod_l+0xbfc>)
 80048e8:	4019      	ands	r1, r3
 80048ea:	4291      	cmp	r1, r2
 80048ec:	4682      	mov	sl, r0
 80048ee:	d960      	bls.n	80049b2 <_strtod_l+0xab2>
 80048f0:	ee18 3a90 	vmov	r3, s17
 80048f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d104      	bne.n	8004906 <_strtod_l+0xa06>
 80048fc:	ee18 3a10 	vmov	r3, s16
 8004900:	3301      	adds	r3, #1
 8004902:	f43f ad45 	beq.w	8004390 <_strtod_l+0x490>
 8004906:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004b08 <_strtod_l+0xc08>
 800490a:	f04f 3aff 	mov.w	sl, #4294967295
 800490e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004910:	4620      	mov	r0, r4
 8004912:	f001 fbdb 	bl	80060cc <_Bfree>
 8004916:	9905      	ldr	r1, [sp, #20]
 8004918:	4620      	mov	r0, r4
 800491a:	f001 fbd7 	bl	80060cc <_Bfree>
 800491e:	4631      	mov	r1, r6
 8004920:	4620      	mov	r0, r4
 8004922:	f001 fbd3 	bl	80060cc <_Bfree>
 8004926:	4629      	mov	r1, r5
 8004928:	4620      	mov	r0, r4
 800492a:	f001 fbcf 	bl	80060cc <_Bfree>
 800492e:	e61a      	b.n	8004566 <_strtod_l+0x666>
 8004930:	f1ba 0f00 	cmp.w	sl, #0
 8004934:	d11b      	bne.n	800496e <_strtod_l+0xa6e>
 8004936:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800493a:	b9f3      	cbnz	r3, 800497a <_strtod_l+0xa7a>
 800493c:	4b6c      	ldr	r3, [pc, #432]	; (8004af0 <_strtod_l+0xbf0>)
 800493e:	2200      	movs	r2, #0
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fc f8d2 	bl	8000aec <__aeabi_dcmplt>
 8004948:	b9d0      	cbnz	r0, 8004980 <_strtod_l+0xa80>
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	4b6c      	ldr	r3, [pc, #432]	; (8004b00 <_strtod_l+0xc00>)
 8004950:	2200      	movs	r2, #0
 8004952:	f7fb fe59 	bl	8000608 <__aeabi_dmul>
 8004956:	4680      	mov	r8, r0
 8004958:	4689      	mov	r9, r1
 800495a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800495e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004962:	9315      	str	r3, [sp, #84]	; 0x54
 8004964:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004968:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800496c:	e79d      	b.n	80048aa <_strtod_l+0x9aa>
 800496e:	f1ba 0f01 	cmp.w	sl, #1
 8004972:	d102      	bne.n	800497a <_strtod_l+0xa7a>
 8004974:	2f00      	cmp	r7, #0
 8004976:	f43f ad83 	beq.w	8004480 <_strtod_l+0x580>
 800497a:	4b62      	ldr	r3, [pc, #392]	; (8004b04 <_strtod_l+0xc04>)
 800497c:	2200      	movs	r2, #0
 800497e:	e78e      	b.n	800489e <_strtod_l+0x99e>
 8004980:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004b00 <_strtod_l+0xc00>
 8004984:	f04f 0800 	mov.w	r8, #0
 8004988:	e7e7      	b.n	800495a <_strtod_l+0xa5a>
 800498a:	4b5d      	ldr	r3, [pc, #372]	; (8004b00 <_strtod_l+0xc00>)
 800498c:	4640      	mov	r0, r8
 800498e:	4649      	mov	r1, r9
 8004990:	2200      	movs	r2, #0
 8004992:	f7fb fe39 	bl	8000608 <__aeabi_dmul>
 8004996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004998:	4680      	mov	r8, r0
 800499a:	4689      	mov	r9, r1
 800499c:	b933      	cbnz	r3, 80049ac <_strtod_l+0xaac>
 800499e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049a2:	900e      	str	r0, [sp, #56]	; 0x38
 80049a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80049aa:	e7dd      	b.n	8004968 <_strtod_l+0xa68>
 80049ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80049b0:	e7f9      	b.n	80049a6 <_strtod_l+0xaa6>
 80049b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80049b6:	9b04      	ldr	r3, [sp, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1a8      	bne.n	800490e <_strtod_l+0xa0e>
 80049bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	051b      	lsls	r3, r3, #20
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d1a1      	bne.n	800490e <_strtod_l+0xa0e>
 80049ca:	4640      	mov	r0, r8
 80049cc:	4649      	mov	r1, r9
 80049ce:	f7fc f97b 	bl	8000cc8 <__aeabi_d2lz>
 80049d2:	f7fb fdeb 	bl	80005ac <__aeabi_l2d>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fb fc5b 	bl	8000298 <__aeabi_dsub>
 80049e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049e8:	ea43 030a 	orr.w	r3, r3, sl
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4680      	mov	r8, r0
 80049f0:	4689      	mov	r9, r1
 80049f2:	d055      	beq.n	8004aa0 <_strtod_l+0xba0>
 80049f4:	a336      	add	r3, pc, #216	; (adr r3, 8004ad0 <_strtod_l+0xbd0>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f7fc f877 	bl	8000aec <__aeabi_dcmplt>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f47f acd0 	bne.w	80043a4 <_strtod_l+0x4a4>
 8004a04:	a334      	add	r3, pc, #208	; (adr r3, 8004ad8 <_strtod_l+0xbd8>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	f7fc f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f43f af7b 	beq.w	800490e <_strtod_l+0xa0e>
 8004a18:	e4c4      	b.n	80043a4 <_strtod_l+0x4a4>
 8004a1a:	9b04      	ldr	r3, [sp, #16]
 8004a1c:	b333      	cbz	r3, 8004a6c <_strtod_l+0xb6c>
 8004a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a24:	d822      	bhi.n	8004a6c <_strtod_l+0xb6c>
 8004a26:	a32e      	add	r3, pc, #184	; (adr r3, 8004ae0 <_strtod_l+0xbe0>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fc f866 	bl	8000b00 <__aeabi_dcmple>
 8004a34:	b1a0      	cbz	r0, 8004a60 <_strtod_l+0xb60>
 8004a36:	4649      	mov	r1, r9
 8004a38:	4640      	mov	r0, r8
 8004a3a:	f7fc f8bd 	bl	8000bb8 <__aeabi_d2uiz>
 8004a3e:	2801      	cmp	r0, #1
 8004a40:	bf38      	it	cc
 8004a42:	2001      	movcc	r0, #1
 8004a44:	f7fb fd66 	bl	8000514 <__aeabi_ui2d>
 8004a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	4689      	mov	r9, r1
 8004a4e:	bb23      	cbnz	r3, 8004a9a <_strtod_l+0xb9a>
 8004a50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a54:	9010      	str	r0, [sp, #64]	; 0x40
 8004a56:	9311      	str	r3, [sp, #68]	; 0x44
 8004a58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a70:	eeb0 0a48 	vmov.f32	s0, s16
 8004a74:	eef0 0a68 	vmov.f32	s1, s17
 8004a78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a7c:	f001 fe58 	bl	8006730 <__ulp>
 8004a80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a84:	ec53 2b10 	vmov	r2, r3, d0
 8004a88:	f7fb fdbe 	bl	8000608 <__aeabi_dmul>
 8004a8c:	ec53 2b18 	vmov	r2, r3, d8
 8004a90:	f7fb fc04 	bl	800029c <__adddf3>
 8004a94:	4682      	mov	sl, r0
 8004a96:	468b      	mov	fp, r1
 8004a98:	e78d      	b.n	80049b6 <_strtod_l+0xab6>
 8004a9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004a9e:	e7db      	b.n	8004a58 <_strtod_l+0xb58>
 8004aa0:	a311      	add	r3, pc, #68	; (adr r3, 8004ae8 <_strtod_l+0xbe8>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fc f821 	bl	8000aec <__aeabi_dcmplt>
 8004aaa:	e7b2      	b.n	8004a12 <_strtod_l+0xb12>
 8004aac:	2300      	movs	r3, #0
 8004aae:	930a      	str	r3, [sp, #40]	; 0x28
 8004ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ab2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	f7ff ba6b 	b.w	8003f90 <_strtod_l+0x90>
 8004aba:	2a65      	cmp	r2, #101	; 0x65
 8004abc:	f43f ab5f 	beq.w	800417e <_strtod_l+0x27e>
 8004ac0:	2a45      	cmp	r2, #69	; 0x45
 8004ac2:	f43f ab5c 	beq.w	800417e <_strtod_l+0x27e>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f7ff bb94 	b.w	80041f4 <_strtod_l+0x2f4>
 8004acc:	f3af 8000 	nop.w
 8004ad0:	94a03595 	.word	0x94a03595
 8004ad4:	3fdfffff 	.word	0x3fdfffff
 8004ad8:	35afe535 	.word	0x35afe535
 8004adc:	3fe00000 	.word	0x3fe00000
 8004ae0:	ffc00000 	.word	0xffc00000
 8004ae4:	41dfffff 	.word	0x41dfffff
 8004ae8:	94a03595 	.word	0x94a03595
 8004aec:	3fcfffff 	.word	0x3fcfffff
 8004af0:	3ff00000 	.word	0x3ff00000
 8004af4:	7ff00000 	.word	0x7ff00000
 8004af8:	7fe00000 	.word	0x7fe00000
 8004afc:	7c9fffff 	.word	0x7c9fffff
 8004b00:	3fe00000 	.word	0x3fe00000
 8004b04:	bff00000 	.word	0xbff00000
 8004b08:	7fefffff 	.word	0x7fefffff

08004b0c <_strtod_r>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <_strtod_r+0x8>)
 8004b0e:	f7ff b9f7 	b.w	8003f00 <_strtod_l>
 8004b12:	bf00      	nop
 8004b14:	20000074 	.word	0x20000074

08004b18 <_strtol_l.constprop.0>:
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1e:	d001      	beq.n	8004b24 <_strtol_l.constprop.0+0xc>
 8004b20:	2b24      	cmp	r3, #36	; 0x24
 8004b22:	d906      	bls.n	8004b32 <_strtol_l.constprop.0+0x1a>
 8004b24:	f7fe fafe 	bl	8003124 <__errno>
 8004b28:	2316      	movs	r3, #22
 8004b2a:	6003      	str	r3, [r0, #0]
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004c18 <_strtol_l.constprop.0+0x100>
 8004b36:	460d      	mov	r5, r1
 8004b38:	462e      	mov	r6, r5
 8004b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004b42:	f017 0708 	ands.w	r7, r7, #8
 8004b46:	d1f7      	bne.n	8004b38 <_strtol_l.constprop.0+0x20>
 8004b48:	2c2d      	cmp	r4, #45	; 0x2d
 8004b4a:	d132      	bne.n	8004bb2 <_strtol_l.constprop.0+0x9a>
 8004b4c:	782c      	ldrb	r4, [r5, #0]
 8004b4e:	2701      	movs	r7, #1
 8004b50:	1cb5      	adds	r5, r6, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d05b      	beq.n	8004c0e <_strtol_l.constprop.0+0xf6>
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d109      	bne.n	8004b6e <_strtol_l.constprop.0+0x56>
 8004b5a:	2c30      	cmp	r4, #48	; 0x30
 8004b5c:	d107      	bne.n	8004b6e <_strtol_l.constprop.0+0x56>
 8004b5e:	782c      	ldrb	r4, [r5, #0]
 8004b60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004b64:	2c58      	cmp	r4, #88	; 0x58
 8004b66:	d14d      	bne.n	8004c04 <_strtol_l.constprop.0+0xec>
 8004b68:	786c      	ldrb	r4, [r5, #1]
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	3502      	adds	r5, #2
 8004b6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004b72:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b76:	f04f 0c00 	mov.w	ip, #0
 8004b7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004b7e:	4666      	mov	r6, ip
 8004b80:	fb03 8a19 	mls	sl, r3, r9, r8
 8004b84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004b88:	f1be 0f09 	cmp.w	lr, #9
 8004b8c:	d816      	bhi.n	8004bbc <_strtol_l.constprop.0+0xa4>
 8004b8e:	4674      	mov	r4, lr
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	dd24      	ble.n	8004bde <_strtol_l.constprop.0+0xc6>
 8004b94:	f1bc 0f00 	cmp.w	ip, #0
 8004b98:	db1e      	blt.n	8004bd8 <_strtol_l.constprop.0+0xc0>
 8004b9a:	45b1      	cmp	r9, r6
 8004b9c:	d31c      	bcc.n	8004bd8 <_strtol_l.constprop.0+0xc0>
 8004b9e:	d101      	bne.n	8004ba4 <_strtol_l.constprop.0+0x8c>
 8004ba0:	45a2      	cmp	sl, r4
 8004ba2:	db19      	blt.n	8004bd8 <_strtol_l.constprop.0+0xc0>
 8004ba4:	fb06 4603 	mla	r6, r6, r3, r4
 8004ba8:	f04f 0c01 	mov.w	ip, #1
 8004bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bb0:	e7e8      	b.n	8004b84 <_strtol_l.constprop.0+0x6c>
 8004bb2:	2c2b      	cmp	r4, #43	; 0x2b
 8004bb4:	bf04      	itt	eq
 8004bb6:	782c      	ldrbeq	r4, [r5, #0]
 8004bb8:	1cb5      	addeq	r5, r6, #2
 8004bba:	e7ca      	b.n	8004b52 <_strtol_l.constprop.0+0x3a>
 8004bbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004bc0:	f1be 0f19 	cmp.w	lr, #25
 8004bc4:	d801      	bhi.n	8004bca <_strtol_l.constprop.0+0xb2>
 8004bc6:	3c37      	subs	r4, #55	; 0x37
 8004bc8:	e7e2      	b.n	8004b90 <_strtol_l.constprop.0+0x78>
 8004bca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004bce:	f1be 0f19 	cmp.w	lr, #25
 8004bd2:	d804      	bhi.n	8004bde <_strtol_l.constprop.0+0xc6>
 8004bd4:	3c57      	subs	r4, #87	; 0x57
 8004bd6:	e7db      	b.n	8004b90 <_strtol_l.constprop.0+0x78>
 8004bd8:	f04f 3cff 	mov.w	ip, #4294967295
 8004bdc:	e7e6      	b.n	8004bac <_strtol_l.constprop.0+0x94>
 8004bde:	f1bc 0f00 	cmp.w	ip, #0
 8004be2:	da05      	bge.n	8004bf0 <_strtol_l.constprop.0+0xd8>
 8004be4:	2322      	movs	r3, #34	; 0x22
 8004be6:	6003      	str	r3, [r0, #0]
 8004be8:	4646      	mov	r6, r8
 8004bea:	b942      	cbnz	r2, 8004bfe <_strtol_l.constprop.0+0xe6>
 8004bec:	4630      	mov	r0, r6
 8004bee:	e79e      	b.n	8004b2e <_strtol_l.constprop.0+0x16>
 8004bf0:	b107      	cbz	r7, 8004bf4 <_strtol_l.constprop.0+0xdc>
 8004bf2:	4276      	negs	r6, r6
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d0f9      	beq.n	8004bec <_strtol_l.constprop.0+0xd4>
 8004bf8:	f1bc 0f00 	cmp.w	ip, #0
 8004bfc:	d000      	beq.n	8004c00 <_strtol_l.constprop.0+0xe8>
 8004bfe:	1e69      	subs	r1, r5, #1
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	e7f3      	b.n	8004bec <_strtol_l.constprop.0+0xd4>
 8004c04:	2430      	movs	r4, #48	; 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1b1      	bne.n	8004b6e <_strtol_l.constprop.0+0x56>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	e7af      	b.n	8004b6e <_strtol_l.constprop.0+0x56>
 8004c0e:	2c30      	cmp	r4, #48	; 0x30
 8004c10:	d0a5      	beq.n	8004b5e <_strtol_l.constprop.0+0x46>
 8004c12:	230a      	movs	r3, #10
 8004c14:	e7ab      	b.n	8004b6e <_strtol_l.constprop.0+0x56>
 8004c16:	bf00      	nop
 8004c18:	08007b29 	.word	0x08007b29

08004c1c <_strtol_r>:
 8004c1c:	f7ff bf7c 	b.w	8004b18 <_strtol_l.constprop.0>

08004c20 <quorem>:
 8004c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	6903      	ldr	r3, [r0, #16]
 8004c26:	690c      	ldr	r4, [r1, #16]
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	f2c0 8081 	blt.w	8004d32 <quorem+0x112>
 8004c30:	3c01      	subs	r4, #1
 8004c32:	f101 0814 	add.w	r8, r1, #20
 8004c36:	f100 0514 	add.w	r5, r0, #20
 8004c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c58:	d331      	bcc.n	8004cbe <quorem+0x9e>
 8004c5a:	f04f 0e00 	mov.w	lr, #0
 8004c5e:	4640      	mov	r0, r8
 8004c60:	46ac      	mov	ip, r5
 8004c62:	46f2      	mov	sl, lr
 8004c64:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c68:	b293      	uxth	r3, r2
 8004c6a:	fb06 e303 	mla	r3, r6, r3, lr
 8004c6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	ebaa 0303 	sub.w	r3, sl, r3
 8004c78:	f8dc a000 	ldr.w	sl, [ip]
 8004c7c:	0c12      	lsrs	r2, r2, #16
 8004c7e:	fa13 f38a 	uxtah	r3, r3, sl
 8004c82:	fb06 e202 	mla	r2, r6, r2, lr
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	9b00      	ldr	r3, [sp, #0]
 8004c8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c98:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c9c:	4581      	cmp	r9, r0
 8004c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ca2:	f84c 3b04 	str.w	r3, [ip], #4
 8004ca6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004caa:	d2db      	bcs.n	8004c64 <quorem+0x44>
 8004cac:	f855 300b 	ldr.w	r3, [r5, fp]
 8004cb0:	b92b      	cbnz	r3, 8004cbe <quorem+0x9e>
 8004cb2:	9b01      	ldr	r3, [sp, #4]
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	429d      	cmp	r5, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	d32e      	bcc.n	8004d1a <quorem+0xfa>
 8004cbc:	613c      	str	r4, [r7, #16]
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	f001 fc90 	bl	80065e4 <__mcmp>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	db24      	blt.n	8004d12 <quorem+0xf2>
 8004cc8:	3601      	adds	r6, #1
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f04f 0c00 	mov.w	ip, #0
 8004cd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8004cd8:	b293      	uxth	r3, r2
 8004cda:	ebac 0303 	sub.w	r3, ip, r3
 8004cde:	0c12      	lsrs	r2, r2, #16
 8004ce0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cf2:	45c1      	cmp	r9, r8
 8004cf4:	f840 3b04 	str.w	r3, [r0], #4
 8004cf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004cfc:	d2e8      	bcs.n	8004cd0 <quorem+0xb0>
 8004cfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d06:	b922      	cbnz	r2, 8004d12 <quorem+0xf2>
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	429d      	cmp	r5, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	d30a      	bcc.n	8004d26 <quorem+0x106>
 8004d10:	613c      	str	r4, [r7, #16]
 8004d12:	4630      	mov	r0, r6
 8004d14:	b003      	add	sp, #12
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	d1cc      	bne.n	8004cbc <quorem+0x9c>
 8004d22:	3c01      	subs	r4, #1
 8004d24:	e7c7      	b.n	8004cb6 <quorem+0x96>
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	3b04      	subs	r3, #4
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d1f0      	bne.n	8004d10 <quorem+0xf0>
 8004d2e:	3c01      	subs	r4, #1
 8004d30:	e7eb      	b.n	8004d0a <quorem+0xea>
 8004d32:	2000      	movs	r0, #0
 8004d34:	e7ee      	b.n	8004d14 <quorem+0xf4>
	...

08004d38 <_dtoa_r>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	ed2d 8b04 	vpush	{d8-d9}
 8004d40:	ec57 6b10 	vmov	r6, r7, d0
 8004d44:	b093      	sub	sp, #76	; 0x4c
 8004d46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d4c:	9106      	str	r1, [sp, #24]
 8004d4e:	ee10 aa10 	vmov	sl, s0
 8004d52:	4604      	mov	r4, r0
 8004d54:	9209      	str	r2, [sp, #36]	; 0x24
 8004d56:	930c      	str	r3, [sp, #48]	; 0x30
 8004d58:	46bb      	mov	fp, r7
 8004d5a:	b975      	cbnz	r5, 8004d7a <_dtoa_r+0x42>
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f001 f94d 	bl	8005ffc <malloc>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6260      	str	r0, [r4, #36]	; 0x24
 8004d66:	b920      	cbnz	r0, 8004d72 <_dtoa_r+0x3a>
 8004d68:	4ba7      	ldr	r3, [pc, #668]	; (8005008 <_dtoa_r+0x2d0>)
 8004d6a:	21ea      	movs	r1, #234	; 0xea
 8004d6c:	48a7      	ldr	r0, [pc, #668]	; (800500c <_dtoa_r+0x2d4>)
 8004d6e:	f002 f8bd 	bl	8006eec <__assert_func>
 8004d72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d76:	6005      	str	r5, [r0, #0]
 8004d78:	60c5      	str	r5, [r0, #12]
 8004d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	b151      	cbz	r1, 8004d96 <_dtoa_r+0x5e>
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	604a      	str	r2, [r1, #4]
 8004d84:	2301      	movs	r3, #1
 8004d86:	4093      	lsls	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f001 f99e 	bl	80060cc <_Bfree>
 8004d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	1e3b      	subs	r3, r7, #0
 8004d98:	bfaa      	itet	ge
 8004d9a:	2300      	movge	r3, #0
 8004d9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004da0:	f8c8 3000 	strge.w	r3, [r8]
 8004da4:	4b9a      	ldr	r3, [pc, #616]	; (8005010 <_dtoa_r+0x2d8>)
 8004da6:	bfbc      	itt	lt
 8004da8:	2201      	movlt	r2, #1
 8004daa:	f8c8 2000 	strlt.w	r2, [r8]
 8004dae:	ea33 030b 	bics.w	r3, r3, fp
 8004db2:	d11b      	bne.n	8004dec <_dtoa_r+0xb4>
 8004db4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004db6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004dc0:	4333      	orrs	r3, r6
 8004dc2:	f000 8592 	beq.w	80058ea <_dtoa_r+0xbb2>
 8004dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dc8:	b963      	cbnz	r3, 8004de4 <_dtoa_r+0xac>
 8004dca:	4b92      	ldr	r3, [pc, #584]	; (8005014 <_dtoa_r+0x2dc>)
 8004dcc:	e022      	b.n	8004e14 <_dtoa_r+0xdc>
 8004dce:	4b92      	ldr	r3, [pc, #584]	; (8005018 <_dtoa_r+0x2e0>)
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	9801      	ldr	r0, [sp, #4]
 8004dda:	b013      	add	sp, #76	; 0x4c
 8004ddc:	ecbd 8b04 	vpop	{d8-d9}
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	4b8b      	ldr	r3, [pc, #556]	; (8005014 <_dtoa_r+0x2dc>)
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	3303      	adds	r3, #3
 8004dea:	e7f3      	b.n	8004dd4 <_dtoa_r+0x9c>
 8004dec:	2200      	movs	r2, #0
 8004dee:	2300      	movs	r3, #0
 8004df0:	4650      	mov	r0, sl
 8004df2:	4659      	mov	r1, fp
 8004df4:	f7fb fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df8:	ec4b ab19 	vmov	d9, sl, fp
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	b158      	cbz	r0, 8004e18 <_dtoa_r+0xe0>
 8004e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e02:	2301      	movs	r3, #1
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 856b 	beq.w	80058e4 <_dtoa_r+0xbac>
 8004e0e:	4883      	ldr	r0, [pc, #524]	; (800501c <_dtoa_r+0x2e4>)
 8004e10:	6018      	str	r0, [r3, #0]
 8004e12:	1e43      	subs	r3, r0, #1
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	e7df      	b.n	8004dd8 <_dtoa_r+0xa0>
 8004e18:	ec4b ab10 	vmov	d0, sl, fp
 8004e1c:	aa10      	add	r2, sp, #64	; 0x40
 8004e1e:	a911      	add	r1, sp, #68	; 0x44
 8004e20:	4620      	mov	r0, r4
 8004e22:	f001 fd01 	bl	8006828 <__d2b>
 8004e26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004e2a:	ee08 0a10 	vmov	s16, r0
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	f000 8084 	beq.w	8004f3c <_dtoa_r+0x204>
 8004e34:	ee19 3a90 	vmov	r3, s19
 8004e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004e40:	4656      	mov	r6, sl
 8004e42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004e46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <_dtoa_r+0x2e8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	4630      	mov	r0, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	f7fb fa1f 	bl	8000298 <__aeabi_dsub>
 8004e5a:	a365      	add	r3, pc, #404	; (adr r3, 8004ff0 <_dtoa_r+0x2b8>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f7fb fbd2 	bl	8000608 <__aeabi_dmul>
 8004e64:	a364      	add	r3, pc, #400	; (adr r3, 8004ff8 <_dtoa_r+0x2c0>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb fa17 	bl	800029c <__adddf3>
 8004e6e:	4606      	mov	r6, r0
 8004e70:	4628      	mov	r0, r5
 8004e72:	460f      	mov	r7, r1
 8004e74:	f7fb fb5e 	bl	8000534 <__aeabi_i2d>
 8004e78:	a361      	add	r3, pc, #388	; (adr r3, 8005000 <_dtoa_r+0x2c8>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb fbc3 	bl	8000608 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4630      	mov	r0, r6
 8004e88:	4639      	mov	r1, r7
 8004e8a:	f7fb fa07 	bl	800029c <__adddf3>
 8004e8e:	4606      	mov	r6, r0
 8004e90:	460f      	mov	r7, r1
 8004e92:	f7fb fe69 	bl	8000b68 <__aeabi_d2iz>
 8004e96:	2200      	movs	r2, #0
 8004e98:	9000      	str	r0, [sp, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	4639      	mov	r1, r7
 8004ea0:	f7fb fe24 	bl	8000aec <__aeabi_dcmplt>
 8004ea4:	b150      	cbz	r0, 8004ebc <_dtoa_r+0x184>
 8004ea6:	9800      	ldr	r0, [sp, #0]
 8004ea8:	f7fb fb44 	bl	8000534 <__aeabi_i2d>
 8004eac:	4632      	mov	r2, r6
 8004eae:	463b      	mov	r3, r7
 8004eb0:	f7fb fe12 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eb4:	b910      	cbnz	r0, 8004ebc <_dtoa_r+0x184>
 8004eb6:	9b00      	ldr	r3, [sp, #0]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	9b00      	ldr	r3, [sp, #0]
 8004ebe:	2b16      	cmp	r3, #22
 8004ec0:	d85a      	bhi.n	8004f78 <_dtoa_r+0x240>
 8004ec2:	9a00      	ldr	r2, [sp, #0]
 8004ec4:	4b57      	ldr	r3, [pc, #348]	; (8005024 <_dtoa_r+0x2ec>)
 8004ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	ec51 0b19 	vmov	r0, r1, d9
 8004ed2:	f7fb fe0b 	bl	8000aec <__aeabi_dcmplt>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d050      	beq.n	8004f7c <_dtoa_r+0x244>
 8004eda:	9b00      	ldr	r3, [sp, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ee6:	1b5d      	subs	r5, r3, r5
 8004ee8:	1e6b      	subs	r3, r5, #1
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	bf45      	ittet	mi
 8004eee:	f1c5 0301 	rsbmi	r3, r5, #1
 8004ef2:	9304      	strmi	r3, [sp, #16]
 8004ef4:	2300      	movpl	r3, #0
 8004ef6:	2300      	movmi	r3, #0
 8004ef8:	bf4c      	ite	mi
 8004efa:	9305      	strmi	r3, [sp, #20]
 8004efc:	9304      	strpl	r3, [sp, #16]
 8004efe:	9b00      	ldr	r3, [sp, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	db3d      	blt.n	8004f80 <_dtoa_r+0x248>
 8004f04:	9b05      	ldr	r3, [sp, #20]
 8004f06:	9a00      	ldr	r2, [sp, #0]
 8004f08:	920a      	str	r2, [sp, #40]	; 0x28
 8004f0a:	4413      	add	r3, r2
 8004f0c:	9305      	str	r3, [sp, #20]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9307      	str	r3, [sp, #28]
 8004f12:	9b06      	ldr	r3, [sp, #24]
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	f200 8089 	bhi.w	800502c <_dtoa_r+0x2f4>
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	bfc4      	itt	gt
 8004f1e:	3b04      	subgt	r3, #4
 8004f20:	9306      	strgt	r3, [sp, #24]
 8004f22:	9b06      	ldr	r3, [sp, #24]
 8004f24:	f1a3 0302 	sub.w	r3, r3, #2
 8004f28:	bfcc      	ite	gt
 8004f2a:	2500      	movgt	r5, #0
 8004f2c:	2501      	movle	r5, #1
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	f200 8087 	bhi.w	8005042 <_dtoa_r+0x30a>
 8004f34:	e8df f003 	tbb	[pc, r3]
 8004f38:	59383a2d 	.word	0x59383a2d
 8004f3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004f40:	441d      	add	r5, r3
 8004f42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	bfc1      	itttt	gt
 8004f4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004f52:	fa0b f303 	lslgt.w	r3, fp, r3
 8004f56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f5a:	bfda      	itte	le
 8004f5c:	f1c3 0320 	rsble	r3, r3, #32
 8004f60:	fa06 f003 	lslle.w	r0, r6, r3
 8004f64:	4318      	orrgt	r0, r3
 8004f66:	f7fb fad5 	bl	8000514 <__aeabi_ui2d>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004f72:	3d01      	subs	r5, #1
 8004f74:	930e      	str	r3, [sp, #56]	; 0x38
 8004f76:	e76a      	b.n	8004e4e <_dtoa_r+0x116>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e7b2      	b.n	8004ee2 <_dtoa_r+0x1aa>
 8004f7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f7e:	e7b1      	b.n	8004ee4 <_dtoa_r+0x1ac>
 8004f80:	9b04      	ldr	r3, [sp, #16]
 8004f82:	9a00      	ldr	r2, [sp, #0]
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	4253      	negs	r3, r2
 8004f8a:	9307      	str	r3, [sp, #28]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f90:	e7bf      	b.n	8004f12 <_dtoa_r+0x1da>
 8004f92:	2300      	movs	r3, #0
 8004f94:	9308      	str	r3, [sp, #32]
 8004f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	dc55      	bgt.n	8005048 <_dtoa_r+0x310>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa6:	e00c      	b.n	8004fc2 <_dtoa_r+0x28a>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e7f3      	b.n	8004f94 <_dtoa_r+0x25c>
 8004fac:	2300      	movs	r3, #0
 8004fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb0:	9308      	str	r3, [sp, #32]
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	bfb8      	it	lt
 8004fc0:	2301      	movlt	r3, #1
 8004fc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	6042      	str	r2, [r0, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	f102 0614 	add.w	r6, r2, #20
 8004fce:	429e      	cmp	r6, r3
 8004fd0:	6841      	ldr	r1, [r0, #4]
 8004fd2:	d93d      	bls.n	8005050 <_dtoa_r+0x318>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f001 f839 	bl	800604c <_Balloc>
 8004fda:	9001      	str	r0, [sp, #4]
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d13b      	bne.n	8005058 <_dtoa_r+0x320>
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <_dtoa_r+0x2f0>)
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fe8:	e6c0      	b.n	8004d6c <_dtoa_r+0x34>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e7df      	b.n	8004fae <_dtoa_r+0x276>
 8004fee:	bf00      	nop
 8004ff0:	636f4361 	.word	0x636f4361
 8004ff4:	3fd287a7 	.word	0x3fd287a7
 8004ff8:	8b60c8b3 	.word	0x8b60c8b3
 8004ffc:	3fc68a28 	.word	0x3fc68a28
 8005000:	509f79fb 	.word	0x509f79fb
 8005004:	3fd34413 	.word	0x3fd34413
 8005008:	08007c36 	.word	0x08007c36
 800500c:	08007c4d 	.word	0x08007c4d
 8005010:	7ff00000 	.word	0x7ff00000
 8005014:	08007c32 	.word	0x08007c32
 8005018:	08007c29 	.word	0x08007c29
 800501c:	08007aad 	.word	0x08007aad
 8005020:	3ff80000 	.word	0x3ff80000
 8005024:	08007db8 	.word	0x08007db8
 8005028:	08007ca8 	.word	0x08007ca8
 800502c:	2501      	movs	r5, #1
 800502e:	2300      	movs	r3, #0
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	9508      	str	r5, [sp, #32]
 8005034:	f04f 33ff 	mov.w	r3, #4294967295
 8005038:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	2312      	movs	r3, #18
 8005040:	e7b0      	b.n	8004fa4 <_dtoa_r+0x26c>
 8005042:	2301      	movs	r3, #1
 8005044:	9308      	str	r3, [sp, #32]
 8005046:	e7f5      	b.n	8005034 <_dtoa_r+0x2fc>
 8005048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800504e:	e7b8      	b.n	8004fc2 <_dtoa_r+0x28a>
 8005050:	3101      	adds	r1, #1
 8005052:	6041      	str	r1, [r0, #4]
 8005054:	0052      	lsls	r2, r2, #1
 8005056:	e7b8      	b.n	8004fca <_dtoa_r+0x292>
 8005058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800505a:	9a01      	ldr	r2, [sp, #4]
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	2b0e      	cmp	r3, #14
 8005062:	f200 809d 	bhi.w	80051a0 <_dtoa_r+0x468>
 8005066:	2d00      	cmp	r5, #0
 8005068:	f000 809a 	beq.w	80051a0 <_dtoa_r+0x468>
 800506c:	9b00      	ldr	r3, [sp, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd32      	ble.n	80050d8 <_dtoa_r+0x3a0>
 8005072:	4ab7      	ldr	r2, [pc, #732]	; (8005350 <_dtoa_r+0x618>)
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800507c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005080:	9b00      	ldr	r3, [sp, #0]
 8005082:	05d8      	lsls	r0, r3, #23
 8005084:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005088:	d516      	bpl.n	80050b8 <_dtoa_r+0x380>
 800508a:	4bb2      	ldr	r3, [pc, #712]	; (8005354 <_dtoa_r+0x61c>)
 800508c:	ec51 0b19 	vmov	r0, r1, d9
 8005090:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005094:	f7fb fbe2 	bl	800085c <__aeabi_ddiv>
 8005098:	f007 070f 	and.w	r7, r7, #15
 800509c:	4682      	mov	sl, r0
 800509e:	468b      	mov	fp, r1
 80050a0:	2503      	movs	r5, #3
 80050a2:	4eac      	ldr	r6, [pc, #688]	; (8005354 <_dtoa_r+0x61c>)
 80050a4:	b957      	cbnz	r7, 80050bc <_dtoa_r+0x384>
 80050a6:	4642      	mov	r2, r8
 80050a8:	464b      	mov	r3, r9
 80050aa:	4650      	mov	r0, sl
 80050ac:	4659      	mov	r1, fp
 80050ae:	f7fb fbd5 	bl	800085c <__aeabi_ddiv>
 80050b2:	4682      	mov	sl, r0
 80050b4:	468b      	mov	fp, r1
 80050b6:	e028      	b.n	800510a <_dtoa_r+0x3d2>
 80050b8:	2502      	movs	r5, #2
 80050ba:	e7f2      	b.n	80050a2 <_dtoa_r+0x36a>
 80050bc:	07f9      	lsls	r1, r7, #31
 80050be:	d508      	bpl.n	80050d2 <_dtoa_r+0x39a>
 80050c0:	4640      	mov	r0, r8
 80050c2:	4649      	mov	r1, r9
 80050c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050c8:	f7fb fa9e 	bl	8000608 <__aeabi_dmul>
 80050cc:	3501      	adds	r5, #1
 80050ce:	4680      	mov	r8, r0
 80050d0:	4689      	mov	r9, r1
 80050d2:	107f      	asrs	r7, r7, #1
 80050d4:	3608      	adds	r6, #8
 80050d6:	e7e5      	b.n	80050a4 <_dtoa_r+0x36c>
 80050d8:	f000 809b 	beq.w	8005212 <_dtoa_r+0x4da>
 80050dc:	9b00      	ldr	r3, [sp, #0]
 80050de:	4f9d      	ldr	r7, [pc, #628]	; (8005354 <_dtoa_r+0x61c>)
 80050e0:	425e      	negs	r6, r3
 80050e2:	4b9b      	ldr	r3, [pc, #620]	; (8005350 <_dtoa_r+0x618>)
 80050e4:	f006 020f 	and.w	r2, r6, #15
 80050e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	ec51 0b19 	vmov	r0, r1, d9
 80050f4:	f7fb fa88 	bl	8000608 <__aeabi_dmul>
 80050f8:	1136      	asrs	r6, r6, #4
 80050fa:	4682      	mov	sl, r0
 80050fc:	468b      	mov	fp, r1
 80050fe:	2300      	movs	r3, #0
 8005100:	2502      	movs	r5, #2
 8005102:	2e00      	cmp	r6, #0
 8005104:	d17a      	bne.n	80051fc <_dtoa_r+0x4c4>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d3      	bne.n	80050b2 <_dtoa_r+0x37a>
 800510a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8082 	beq.w	8005216 <_dtoa_r+0x4de>
 8005112:	4b91      	ldr	r3, [pc, #580]	; (8005358 <_dtoa_r+0x620>)
 8005114:	2200      	movs	r2, #0
 8005116:	4650      	mov	r0, sl
 8005118:	4659      	mov	r1, fp
 800511a:	f7fb fce7 	bl	8000aec <__aeabi_dcmplt>
 800511e:	2800      	cmp	r0, #0
 8005120:	d079      	beq.n	8005216 <_dtoa_r+0x4de>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d076      	beq.n	8005216 <_dtoa_r+0x4de>
 8005128:	9b02      	ldr	r3, [sp, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	dd36      	ble.n	800519c <_dtoa_r+0x464>
 800512e:	9b00      	ldr	r3, [sp, #0]
 8005130:	4650      	mov	r0, sl
 8005132:	4659      	mov	r1, fp
 8005134:	1e5f      	subs	r7, r3, #1
 8005136:	2200      	movs	r2, #0
 8005138:	4b88      	ldr	r3, [pc, #544]	; (800535c <_dtoa_r+0x624>)
 800513a:	f7fb fa65 	bl	8000608 <__aeabi_dmul>
 800513e:	9e02      	ldr	r6, [sp, #8]
 8005140:	4682      	mov	sl, r0
 8005142:	468b      	mov	fp, r1
 8005144:	3501      	adds	r5, #1
 8005146:	4628      	mov	r0, r5
 8005148:	f7fb f9f4 	bl	8000534 <__aeabi_i2d>
 800514c:	4652      	mov	r2, sl
 800514e:	465b      	mov	r3, fp
 8005150:	f7fb fa5a 	bl	8000608 <__aeabi_dmul>
 8005154:	4b82      	ldr	r3, [pc, #520]	; (8005360 <_dtoa_r+0x628>)
 8005156:	2200      	movs	r2, #0
 8005158:	f7fb f8a0 	bl	800029c <__adddf3>
 800515c:	46d0      	mov	r8, sl
 800515e:	46d9      	mov	r9, fp
 8005160:	4682      	mov	sl, r0
 8005162:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005166:	2e00      	cmp	r6, #0
 8005168:	d158      	bne.n	800521c <_dtoa_r+0x4e4>
 800516a:	4b7e      	ldr	r3, [pc, #504]	; (8005364 <_dtoa_r+0x62c>)
 800516c:	2200      	movs	r2, #0
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb f891 	bl	8000298 <__aeabi_dsub>
 8005176:	4652      	mov	r2, sl
 8005178:	465b      	mov	r3, fp
 800517a:	4680      	mov	r8, r0
 800517c:	4689      	mov	r9, r1
 800517e:	f7fb fcd3 	bl	8000b28 <__aeabi_dcmpgt>
 8005182:	2800      	cmp	r0, #0
 8005184:	f040 8295 	bne.w	80056b2 <_dtoa_r+0x97a>
 8005188:	4652      	mov	r2, sl
 800518a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800518e:	4640      	mov	r0, r8
 8005190:	4649      	mov	r1, r9
 8005192:	f7fb fcab 	bl	8000aec <__aeabi_dcmplt>
 8005196:	2800      	cmp	r0, #0
 8005198:	f040 8289 	bne.w	80056ae <_dtoa_r+0x976>
 800519c:	ec5b ab19 	vmov	sl, fp, d9
 80051a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f2c0 8148 	blt.w	8005438 <_dtoa_r+0x700>
 80051a8:	9a00      	ldr	r2, [sp, #0]
 80051aa:	2a0e      	cmp	r2, #14
 80051ac:	f300 8144 	bgt.w	8005438 <_dtoa_r+0x700>
 80051b0:	4b67      	ldr	r3, [pc, #412]	; (8005350 <_dtoa_r+0x618>)
 80051b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f280 80d5 	bge.w	800536c <_dtoa_r+0x634>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f300 80d1 	bgt.w	800536c <_dtoa_r+0x634>
 80051ca:	f040 826f 	bne.w	80056ac <_dtoa_r+0x974>
 80051ce:	4b65      	ldr	r3, [pc, #404]	; (8005364 <_dtoa_r+0x62c>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	4640      	mov	r0, r8
 80051d4:	4649      	mov	r1, r9
 80051d6:	f7fb fa17 	bl	8000608 <__aeabi_dmul>
 80051da:	4652      	mov	r2, sl
 80051dc:	465b      	mov	r3, fp
 80051de:	f7fb fc99 	bl	8000b14 <__aeabi_dcmpge>
 80051e2:	9e03      	ldr	r6, [sp, #12]
 80051e4:	4637      	mov	r7, r6
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f040 8245 	bne.w	8005676 <_dtoa_r+0x93e>
 80051ec:	9d01      	ldr	r5, [sp, #4]
 80051ee:	2331      	movs	r3, #49	; 0x31
 80051f0:	f805 3b01 	strb.w	r3, [r5], #1
 80051f4:	9b00      	ldr	r3, [sp, #0]
 80051f6:	3301      	adds	r3, #1
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	e240      	b.n	800567e <_dtoa_r+0x946>
 80051fc:	07f2      	lsls	r2, r6, #31
 80051fe:	d505      	bpl.n	800520c <_dtoa_r+0x4d4>
 8005200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005204:	f7fb fa00 	bl	8000608 <__aeabi_dmul>
 8005208:	3501      	adds	r5, #1
 800520a:	2301      	movs	r3, #1
 800520c:	1076      	asrs	r6, r6, #1
 800520e:	3708      	adds	r7, #8
 8005210:	e777      	b.n	8005102 <_dtoa_r+0x3ca>
 8005212:	2502      	movs	r5, #2
 8005214:	e779      	b.n	800510a <_dtoa_r+0x3d2>
 8005216:	9f00      	ldr	r7, [sp, #0]
 8005218:	9e03      	ldr	r6, [sp, #12]
 800521a:	e794      	b.n	8005146 <_dtoa_r+0x40e>
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	4b4c      	ldr	r3, [pc, #304]	; (8005350 <_dtoa_r+0x618>)
 8005220:	4431      	add	r1, r6
 8005222:	910d      	str	r1, [sp, #52]	; 0x34
 8005224:	9908      	ldr	r1, [sp, #32]
 8005226:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800522a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800522e:	2900      	cmp	r1, #0
 8005230:	d043      	beq.n	80052ba <_dtoa_r+0x582>
 8005232:	494d      	ldr	r1, [pc, #308]	; (8005368 <_dtoa_r+0x630>)
 8005234:	2000      	movs	r0, #0
 8005236:	f7fb fb11 	bl	800085c <__aeabi_ddiv>
 800523a:	4652      	mov	r2, sl
 800523c:	465b      	mov	r3, fp
 800523e:	f7fb f82b 	bl	8000298 <__aeabi_dsub>
 8005242:	9d01      	ldr	r5, [sp, #4]
 8005244:	4682      	mov	sl, r0
 8005246:	468b      	mov	fp, r1
 8005248:	4649      	mov	r1, r9
 800524a:	4640      	mov	r0, r8
 800524c:	f7fb fc8c 	bl	8000b68 <__aeabi_d2iz>
 8005250:	4606      	mov	r6, r0
 8005252:	f7fb f96f 	bl	8000534 <__aeabi_i2d>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4640      	mov	r0, r8
 800525c:	4649      	mov	r1, r9
 800525e:	f7fb f81b 	bl	8000298 <__aeabi_dsub>
 8005262:	3630      	adds	r6, #48	; 0x30
 8005264:	f805 6b01 	strb.w	r6, [r5], #1
 8005268:	4652      	mov	r2, sl
 800526a:	465b      	mov	r3, fp
 800526c:	4680      	mov	r8, r0
 800526e:	4689      	mov	r9, r1
 8005270:	f7fb fc3c 	bl	8000aec <__aeabi_dcmplt>
 8005274:	2800      	cmp	r0, #0
 8005276:	d163      	bne.n	8005340 <_dtoa_r+0x608>
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	4936      	ldr	r1, [pc, #216]	; (8005358 <_dtoa_r+0x620>)
 800527e:	2000      	movs	r0, #0
 8005280:	f7fb f80a 	bl	8000298 <__aeabi_dsub>
 8005284:	4652      	mov	r2, sl
 8005286:	465b      	mov	r3, fp
 8005288:	f7fb fc30 	bl	8000aec <__aeabi_dcmplt>
 800528c:	2800      	cmp	r0, #0
 800528e:	f040 80b5 	bne.w	80053fc <_dtoa_r+0x6c4>
 8005292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005294:	429d      	cmp	r5, r3
 8005296:	d081      	beq.n	800519c <_dtoa_r+0x464>
 8005298:	4b30      	ldr	r3, [pc, #192]	; (800535c <_dtoa_r+0x624>)
 800529a:	2200      	movs	r2, #0
 800529c:	4650      	mov	r0, sl
 800529e:	4659      	mov	r1, fp
 80052a0:	f7fb f9b2 	bl	8000608 <__aeabi_dmul>
 80052a4:	4b2d      	ldr	r3, [pc, #180]	; (800535c <_dtoa_r+0x624>)
 80052a6:	4682      	mov	sl, r0
 80052a8:	468b      	mov	fp, r1
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	2200      	movs	r2, #0
 80052b0:	f7fb f9aa 	bl	8000608 <__aeabi_dmul>
 80052b4:	4680      	mov	r8, r0
 80052b6:	4689      	mov	r9, r1
 80052b8:	e7c6      	b.n	8005248 <_dtoa_r+0x510>
 80052ba:	4650      	mov	r0, sl
 80052bc:	4659      	mov	r1, fp
 80052be:	f7fb f9a3 	bl	8000608 <__aeabi_dmul>
 80052c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052c4:	9d01      	ldr	r5, [sp, #4]
 80052c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80052c8:	4682      	mov	sl, r0
 80052ca:	468b      	mov	fp, r1
 80052cc:	4649      	mov	r1, r9
 80052ce:	4640      	mov	r0, r8
 80052d0:	f7fb fc4a 	bl	8000b68 <__aeabi_d2iz>
 80052d4:	4606      	mov	r6, r0
 80052d6:	f7fb f92d 	bl	8000534 <__aeabi_i2d>
 80052da:	3630      	adds	r6, #48	; 0x30
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fa ffd8 	bl	8000298 <__aeabi_dsub>
 80052e8:	f805 6b01 	strb.w	r6, [r5], #1
 80052ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ee:	429d      	cmp	r5, r3
 80052f0:	4680      	mov	r8, r0
 80052f2:	4689      	mov	r9, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	d124      	bne.n	8005344 <_dtoa_r+0x60c>
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <_dtoa_r+0x630>)
 80052fc:	4650      	mov	r0, sl
 80052fe:	4659      	mov	r1, fp
 8005300:	f7fa ffcc 	bl	800029c <__adddf3>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4640      	mov	r0, r8
 800530a:	4649      	mov	r1, r9
 800530c:	f7fb fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 8005310:	2800      	cmp	r0, #0
 8005312:	d173      	bne.n	80053fc <_dtoa_r+0x6c4>
 8005314:	4652      	mov	r2, sl
 8005316:	465b      	mov	r3, fp
 8005318:	4913      	ldr	r1, [pc, #76]	; (8005368 <_dtoa_r+0x630>)
 800531a:	2000      	movs	r0, #0
 800531c:	f7fa ffbc 	bl	8000298 <__aeabi_dsub>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4640      	mov	r0, r8
 8005326:	4649      	mov	r1, r9
 8005328:	f7fb fbe0 	bl	8000aec <__aeabi_dcmplt>
 800532c:	2800      	cmp	r0, #0
 800532e:	f43f af35 	beq.w	800519c <_dtoa_r+0x464>
 8005332:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005334:	1e6b      	subs	r3, r5, #1
 8005336:	930f      	str	r3, [sp, #60]	; 0x3c
 8005338:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d0f8      	beq.n	8005332 <_dtoa_r+0x5fa>
 8005340:	9700      	str	r7, [sp, #0]
 8005342:	e049      	b.n	80053d8 <_dtoa_r+0x6a0>
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <_dtoa_r+0x624>)
 8005346:	f7fb f95f 	bl	8000608 <__aeabi_dmul>
 800534a:	4680      	mov	r8, r0
 800534c:	4689      	mov	r9, r1
 800534e:	e7bd      	b.n	80052cc <_dtoa_r+0x594>
 8005350:	08007db8 	.word	0x08007db8
 8005354:	08007d90 	.word	0x08007d90
 8005358:	3ff00000 	.word	0x3ff00000
 800535c:	40240000 	.word	0x40240000
 8005360:	401c0000 	.word	0x401c0000
 8005364:	40140000 	.word	0x40140000
 8005368:	3fe00000 	.word	0x3fe00000
 800536c:	9d01      	ldr	r5, [sp, #4]
 800536e:	4656      	mov	r6, sl
 8005370:	465f      	mov	r7, fp
 8005372:	4642      	mov	r2, r8
 8005374:	464b      	mov	r3, r9
 8005376:	4630      	mov	r0, r6
 8005378:	4639      	mov	r1, r7
 800537a:	f7fb fa6f 	bl	800085c <__aeabi_ddiv>
 800537e:	f7fb fbf3 	bl	8000b68 <__aeabi_d2iz>
 8005382:	4682      	mov	sl, r0
 8005384:	f7fb f8d6 	bl	8000534 <__aeabi_i2d>
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	f7fb f93c 	bl	8000608 <__aeabi_dmul>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800539c:	f7fa ff7c 	bl	8000298 <__aeabi_dsub>
 80053a0:	f805 6b01 	strb.w	r6, [r5], #1
 80053a4:	9e01      	ldr	r6, [sp, #4]
 80053a6:	9f03      	ldr	r7, [sp, #12]
 80053a8:	1bae      	subs	r6, r5, r6
 80053aa:	42b7      	cmp	r7, r6
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	d135      	bne.n	800541e <_dtoa_r+0x6e6>
 80053b2:	f7fa ff73 	bl	800029c <__adddf3>
 80053b6:	4642      	mov	r2, r8
 80053b8:	464b      	mov	r3, r9
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	f7fb fbb3 	bl	8000b28 <__aeabi_dcmpgt>
 80053c2:	b9d0      	cbnz	r0, 80053fa <_dtoa_r+0x6c2>
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fb fb84 	bl	8000ad8 <__aeabi_dcmpeq>
 80053d0:	b110      	cbz	r0, 80053d8 <_dtoa_r+0x6a0>
 80053d2:	f01a 0f01 	tst.w	sl, #1
 80053d6:	d110      	bne.n	80053fa <_dtoa_r+0x6c2>
 80053d8:	4620      	mov	r0, r4
 80053da:	ee18 1a10 	vmov	r1, s16
 80053de:	f000 fe75 	bl	80060cc <_Bfree>
 80053e2:	2300      	movs	r3, #0
 80053e4:	9800      	ldr	r0, [sp, #0]
 80053e6:	702b      	strb	r3, [r5, #0]
 80053e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053ea:	3001      	adds	r0, #1
 80053ec:	6018      	str	r0, [r3, #0]
 80053ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f43f acf1 	beq.w	8004dd8 <_dtoa_r+0xa0>
 80053f6:	601d      	str	r5, [r3, #0]
 80053f8:	e4ee      	b.n	8004dd8 <_dtoa_r+0xa0>
 80053fa:	9f00      	ldr	r7, [sp, #0]
 80053fc:	462b      	mov	r3, r5
 80053fe:	461d      	mov	r5, r3
 8005400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005404:	2a39      	cmp	r2, #57	; 0x39
 8005406:	d106      	bne.n	8005416 <_dtoa_r+0x6de>
 8005408:	9a01      	ldr	r2, [sp, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d1f7      	bne.n	80053fe <_dtoa_r+0x6c6>
 800540e:	9901      	ldr	r1, [sp, #4]
 8005410:	2230      	movs	r2, #48	; 0x30
 8005412:	3701      	adds	r7, #1
 8005414:	700a      	strb	r2, [r1, #0]
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	3201      	adds	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e790      	b.n	8005340 <_dtoa_r+0x608>
 800541e:	4ba6      	ldr	r3, [pc, #664]	; (80056b8 <_dtoa_r+0x980>)
 8005420:	2200      	movs	r2, #0
 8005422:	f7fb f8f1 	bl	8000608 <__aeabi_dmul>
 8005426:	2200      	movs	r2, #0
 8005428:	2300      	movs	r3, #0
 800542a:	4606      	mov	r6, r0
 800542c:	460f      	mov	r7, r1
 800542e:	f7fb fb53 	bl	8000ad8 <__aeabi_dcmpeq>
 8005432:	2800      	cmp	r0, #0
 8005434:	d09d      	beq.n	8005372 <_dtoa_r+0x63a>
 8005436:	e7cf      	b.n	80053d8 <_dtoa_r+0x6a0>
 8005438:	9a08      	ldr	r2, [sp, #32]
 800543a:	2a00      	cmp	r2, #0
 800543c:	f000 80d7 	beq.w	80055ee <_dtoa_r+0x8b6>
 8005440:	9a06      	ldr	r2, [sp, #24]
 8005442:	2a01      	cmp	r2, #1
 8005444:	f300 80ba 	bgt.w	80055bc <_dtoa_r+0x884>
 8005448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800544a:	2a00      	cmp	r2, #0
 800544c:	f000 80b2 	beq.w	80055b4 <_dtoa_r+0x87c>
 8005450:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005454:	9e07      	ldr	r6, [sp, #28]
 8005456:	9d04      	ldr	r5, [sp, #16]
 8005458:	9a04      	ldr	r2, [sp, #16]
 800545a:	441a      	add	r2, r3
 800545c:	9204      	str	r2, [sp, #16]
 800545e:	9a05      	ldr	r2, [sp, #20]
 8005460:	2101      	movs	r1, #1
 8005462:	441a      	add	r2, r3
 8005464:	4620      	mov	r0, r4
 8005466:	9205      	str	r2, [sp, #20]
 8005468:	f000 ff32 	bl	80062d0 <__i2b>
 800546c:	4607      	mov	r7, r0
 800546e:	2d00      	cmp	r5, #0
 8005470:	dd0c      	ble.n	800548c <_dtoa_r+0x754>
 8005472:	9b05      	ldr	r3, [sp, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	dd09      	ble.n	800548c <_dtoa_r+0x754>
 8005478:	42ab      	cmp	r3, r5
 800547a:	9a04      	ldr	r2, [sp, #16]
 800547c:	bfa8      	it	ge
 800547e:	462b      	movge	r3, r5
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	9204      	str	r2, [sp, #16]
 8005484:	9a05      	ldr	r2, [sp, #20]
 8005486:	1aed      	subs	r5, r5, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	9b07      	ldr	r3, [sp, #28]
 800548e:	b31b      	cbz	r3, 80054d8 <_dtoa_r+0x7a0>
 8005490:	9b08      	ldr	r3, [sp, #32]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80af 	beq.w	80055f6 <_dtoa_r+0x8be>
 8005498:	2e00      	cmp	r6, #0
 800549a:	dd13      	ble.n	80054c4 <_dtoa_r+0x78c>
 800549c:	4639      	mov	r1, r7
 800549e:	4632      	mov	r2, r6
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 ffd5 	bl	8006450 <__pow5mult>
 80054a6:	ee18 2a10 	vmov	r2, s16
 80054aa:	4601      	mov	r1, r0
 80054ac:	4607      	mov	r7, r0
 80054ae:	4620      	mov	r0, r4
 80054b0:	f000 ff24 	bl	80062fc <__multiply>
 80054b4:	ee18 1a10 	vmov	r1, s16
 80054b8:	4680      	mov	r8, r0
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fe06 	bl	80060cc <_Bfree>
 80054c0:	ee08 8a10 	vmov	s16, r8
 80054c4:	9b07      	ldr	r3, [sp, #28]
 80054c6:	1b9a      	subs	r2, r3, r6
 80054c8:	d006      	beq.n	80054d8 <_dtoa_r+0x7a0>
 80054ca:	ee18 1a10 	vmov	r1, s16
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 ffbe 	bl	8006450 <__pow5mult>
 80054d4:	ee08 0a10 	vmov	s16, r0
 80054d8:	2101      	movs	r1, #1
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fef8 	bl	80062d0 <__i2b>
 80054e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	4606      	mov	r6, r0
 80054e6:	f340 8088 	ble.w	80055fa <_dtoa_r+0x8c2>
 80054ea:	461a      	mov	r2, r3
 80054ec:	4601      	mov	r1, r0
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 ffae 	bl	8006450 <__pow5mult>
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	4606      	mov	r6, r0
 80054fa:	f340 8081 	ble.w	8005600 <_dtoa_r+0x8c8>
 80054fe:	f04f 0800 	mov.w	r8, #0
 8005502:	6933      	ldr	r3, [r6, #16]
 8005504:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005508:	6918      	ldr	r0, [r3, #16]
 800550a:	f000 fe91 	bl	8006230 <__hi0bits>
 800550e:	f1c0 0020 	rsb	r0, r0, #32
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	4418      	add	r0, r3
 8005516:	f010 001f 	ands.w	r0, r0, #31
 800551a:	f000 8092 	beq.w	8005642 <_dtoa_r+0x90a>
 800551e:	f1c0 0320 	rsb	r3, r0, #32
 8005522:	2b04      	cmp	r3, #4
 8005524:	f340 808a 	ble.w	800563c <_dtoa_r+0x904>
 8005528:	f1c0 001c 	rsb	r0, r0, #28
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	4403      	add	r3, r0
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	9b05      	ldr	r3, [sp, #20]
 8005534:	4403      	add	r3, r0
 8005536:	4405      	add	r5, r0
 8005538:	9305      	str	r3, [sp, #20]
 800553a:	9b04      	ldr	r3, [sp, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	dd07      	ble.n	8005550 <_dtoa_r+0x818>
 8005540:	ee18 1a10 	vmov	r1, s16
 8005544:	461a      	mov	r2, r3
 8005546:	4620      	mov	r0, r4
 8005548:	f000 ffdc 	bl	8006504 <__lshift>
 800554c:	ee08 0a10 	vmov	s16, r0
 8005550:	9b05      	ldr	r3, [sp, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	dd05      	ble.n	8005562 <_dtoa_r+0x82a>
 8005556:	4631      	mov	r1, r6
 8005558:	461a      	mov	r2, r3
 800555a:	4620      	mov	r0, r4
 800555c:	f000 ffd2 	bl	8006504 <__lshift>
 8005560:	4606      	mov	r6, r0
 8005562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d06e      	beq.n	8005646 <_dtoa_r+0x90e>
 8005568:	ee18 0a10 	vmov	r0, s16
 800556c:	4631      	mov	r1, r6
 800556e:	f001 f839 	bl	80065e4 <__mcmp>
 8005572:	2800      	cmp	r0, #0
 8005574:	da67      	bge.n	8005646 <_dtoa_r+0x90e>
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	3b01      	subs	r3, #1
 800557a:	ee18 1a10 	vmov	r1, s16
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	220a      	movs	r2, #10
 8005582:	2300      	movs	r3, #0
 8005584:	4620      	mov	r0, r4
 8005586:	f000 fdc3 	bl	8006110 <__multadd>
 800558a:	9b08      	ldr	r3, [sp, #32]
 800558c:	ee08 0a10 	vmov	s16, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 81b1 	beq.w	80058f8 <_dtoa_r+0xbc0>
 8005596:	2300      	movs	r3, #0
 8005598:	4639      	mov	r1, r7
 800559a:	220a      	movs	r2, #10
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fdb7 	bl	8006110 <__multadd>
 80055a2:	9b02      	ldr	r3, [sp, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	4607      	mov	r7, r0
 80055a8:	f300 808e 	bgt.w	80056c8 <_dtoa_r+0x990>
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	dc51      	bgt.n	8005656 <_dtoa_r+0x91e>
 80055b2:	e089      	b.n	80056c8 <_dtoa_r+0x990>
 80055b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055ba:	e74b      	b.n	8005454 <_dtoa_r+0x71c>
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	1e5e      	subs	r6, r3, #1
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	42b3      	cmp	r3, r6
 80055c4:	bfbf      	itttt	lt
 80055c6:	9b07      	ldrlt	r3, [sp, #28]
 80055c8:	9607      	strlt	r6, [sp, #28]
 80055ca:	1af2      	sublt	r2, r6, r3
 80055cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055ce:	bfb6      	itet	lt
 80055d0:	189b      	addlt	r3, r3, r2
 80055d2:	1b9e      	subge	r6, r3, r6
 80055d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	bfb8      	it	lt
 80055da:	2600      	movlt	r6, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bfb7      	itett	lt
 80055e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80055e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80055e8:	1a9d      	sublt	r5, r3, r2
 80055ea:	2300      	movlt	r3, #0
 80055ec:	e734      	b.n	8005458 <_dtoa_r+0x720>
 80055ee:	9e07      	ldr	r6, [sp, #28]
 80055f0:	9d04      	ldr	r5, [sp, #16]
 80055f2:	9f08      	ldr	r7, [sp, #32]
 80055f4:	e73b      	b.n	800546e <_dtoa_r+0x736>
 80055f6:	9a07      	ldr	r2, [sp, #28]
 80055f8:	e767      	b.n	80054ca <_dtoa_r+0x792>
 80055fa:	9b06      	ldr	r3, [sp, #24]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	dc18      	bgt.n	8005632 <_dtoa_r+0x8fa>
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	d115      	bne.n	8005632 <_dtoa_r+0x8fa>
 8005606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800560a:	b993      	cbnz	r3, 8005632 <_dtoa_r+0x8fa>
 800560c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005610:	0d1b      	lsrs	r3, r3, #20
 8005612:	051b      	lsls	r3, r3, #20
 8005614:	b183      	cbz	r3, 8005638 <_dtoa_r+0x900>
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	9b05      	ldr	r3, [sp, #20]
 800561e:	3301      	adds	r3, #1
 8005620:	9305      	str	r3, [sp, #20]
 8005622:	f04f 0801 	mov.w	r8, #1
 8005626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f af6a 	bne.w	8005502 <_dtoa_r+0x7ca>
 800562e:	2001      	movs	r0, #1
 8005630:	e76f      	b.n	8005512 <_dtoa_r+0x7da>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	e7f6      	b.n	8005626 <_dtoa_r+0x8ee>
 8005638:	4698      	mov	r8, r3
 800563a:	e7f4      	b.n	8005626 <_dtoa_r+0x8ee>
 800563c:	f43f af7d 	beq.w	800553a <_dtoa_r+0x802>
 8005640:	4618      	mov	r0, r3
 8005642:	301c      	adds	r0, #28
 8005644:	e772      	b.n	800552c <_dtoa_r+0x7f4>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	dc37      	bgt.n	80056bc <_dtoa_r+0x984>
 800564c:	9b06      	ldr	r3, [sp, #24]
 800564e:	2b02      	cmp	r3, #2
 8005650:	dd34      	ble.n	80056bc <_dtoa_r+0x984>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	9b02      	ldr	r3, [sp, #8]
 8005658:	b96b      	cbnz	r3, 8005676 <_dtoa_r+0x93e>
 800565a:	4631      	mov	r1, r6
 800565c:	2205      	movs	r2, #5
 800565e:	4620      	mov	r0, r4
 8005660:	f000 fd56 	bl	8006110 <__multadd>
 8005664:	4601      	mov	r1, r0
 8005666:	4606      	mov	r6, r0
 8005668:	ee18 0a10 	vmov	r0, s16
 800566c:	f000 ffba 	bl	80065e4 <__mcmp>
 8005670:	2800      	cmp	r0, #0
 8005672:	f73f adbb 	bgt.w	80051ec <_dtoa_r+0x4b4>
 8005676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005678:	9d01      	ldr	r5, [sp, #4]
 800567a:	43db      	mvns	r3, r3
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	f04f 0800 	mov.w	r8, #0
 8005682:	4631      	mov	r1, r6
 8005684:	4620      	mov	r0, r4
 8005686:	f000 fd21 	bl	80060cc <_Bfree>
 800568a:	2f00      	cmp	r7, #0
 800568c:	f43f aea4 	beq.w	80053d8 <_dtoa_r+0x6a0>
 8005690:	f1b8 0f00 	cmp.w	r8, #0
 8005694:	d005      	beq.n	80056a2 <_dtoa_r+0x96a>
 8005696:	45b8      	cmp	r8, r7
 8005698:	d003      	beq.n	80056a2 <_dtoa_r+0x96a>
 800569a:	4641      	mov	r1, r8
 800569c:	4620      	mov	r0, r4
 800569e:	f000 fd15 	bl	80060cc <_Bfree>
 80056a2:	4639      	mov	r1, r7
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 fd11 	bl	80060cc <_Bfree>
 80056aa:	e695      	b.n	80053d8 <_dtoa_r+0x6a0>
 80056ac:	2600      	movs	r6, #0
 80056ae:	4637      	mov	r7, r6
 80056b0:	e7e1      	b.n	8005676 <_dtoa_r+0x93e>
 80056b2:	9700      	str	r7, [sp, #0]
 80056b4:	4637      	mov	r7, r6
 80056b6:	e599      	b.n	80051ec <_dtoa_r+0x4b4>
 80056b8:	40240000 	.word	0x40240000
 80056bc:	9b08      	ldr	r3, [sp, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80ca 	beq.w	8005858 <_dtoa_r+0xb20>
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	9302      	str	r3, [sp, #8]
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	dd05      	ble.n	80056d8 <_dtoa_r+0x9a0>
 80056cc:	4639      	mov	r1, r7
 80056ce:	462a      	mov	r2, r5
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 ff17 	bl	8006504 <__lshift>
 80056d6:	4607      	mov	r7, r0
 80056d8:	f1b8 0f00 	cmp.w	r8, #0
 80056dc:	d05b      	beq.n	8005796 <_dtoa_r+0xa5e>
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 fcb3 	bl	800604c <_Balloc>
 80056e6:	4605      	mov	r5, r0
 80056e8:	b928      	cbnz	r0, 80056f6 <_dtoa_r+0x9be>
 80056ea:	4b87      	ldr	r3, [pc, #540]	; (8005908 <_dtoa_r+0xbd0>)
 80056ec:	4602      	mov	r2, r0
 80056ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056f2:	f7ff bb3b 	b.w	8004d6c <_dtoa_r+0x34>
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	3202      	adds	r2, #2
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	f107 010c 	add.w	r1, r7, #12
 8005700:	300c      	adds	r0, #12
 8005702:	f000 fc95 	bl	8006030 <memcpy>
 8005706:	2201      	movs	r2, #1
 8005708:	4629      	mov	r1, r5
 800570a:	4620      	mov	r0, r4
 800570c:	f000 fefa 	bl	8006504 <__lshift>
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	f103 0901 	add.w	r9, r3, #1
 8005716:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800571a:	4413      	add	r3, r2
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	f00a 0301 	and.w	r3, sl, #1
 8005722:	46b8      	mov	r8, r7
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	4607      	mov	r7, r0
 8005728:	4631      	mov	r1, r6
 800572a:	ee18 0a10 	vmov	r0, s16
 800572e:	f7ff fa77 	bl	8004c20 <quorem>
 8005732:	4641      	mov	r1, r8
 8005734:	9002      	str	r0, [sp, #8]
 8005736:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800573a:	ee18 0a10 	vmov	r0, s16
 800573e:	f000 ff51 	bl	80065e4 <__mcmp>
 8005742:	463a      	mov	r2, r7
 8005744:	9003      	str	r0, [sp, #12]
 8005746:	4631      	mov	r1, r6
 8005748:	4620      	mov	r0, r4
 800574a:	f000 ff67 	bl	800661c <__mdiff>
 800574e:	68c2      	ldr	r2, [r0, #12]
 8005750:	f109 3bff 	add.w	fp, r9, #4294967295
 8005754:	4605      	mov	r5, r0
 8005756:	bb02      	cbnz	r2, 800579a <_dtoa_r+0xa62>
 8005758:	4601      	mov	r1, r0
 800575a:	ee18 0a10 	vmov	r0, s16
 800575e:	f000 ff41 	bl	80065e4 <__mcmp>
 8005762:	4602      	mov	r2, r0
 8005764:	4629      	mov	r1, r5
 8005766:	4620      	mov	r0, r4
 8005768:	9207      	str	r2, [sp, #28]
 800576a:	f000 fcaf 	bl	80060cc <_Bfree>
 800576e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005772:	ea43 0102 	orr.w	r1, r3, r2
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	430b      	orrs	r3, r1
 800577a:	464d      	mov	r5, r9
 800577c:	d10f      	bne.n	800579e <_dtoa_r+0xa66>
 800577e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005782:	d02a      	beq.n	80057da <_dtoa_r+0xaa2>
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	dd02      	ble.n	8005790 <_dtoa_r+0xa58>
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005790:	f88b a000 	strb.w	sl, [fp]
 8005794:	e775      	b.n	8005682 <_dtoa_r+0x94a>
 8005796:	4638      	mov	r0, r7
 8005798:	e7ba      	b.n	8005710 <_dtoa_r+0x9d8>
 800579a:	2201      	movs	r2, #1
 800579c:	e7e2      	b.n	8005764 <_dtoa_r+0xa2c>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	db04      	blt.n	80057ae <_dtoa_r+0xa76>
 80057a4:	9906      	ldr	r1, [sp, #24]
 80057a6:	430b      	orrs	r3, r1
 80057a8:	9904      	ldr	r1, [sp, #16]
 80057aa:	430b      	orrs	r3, r1
 80057ac:	d122      	bne.n	80057f4 <_dtoa_r+0xabc>
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	ddee      	ble.n	8005790 <_dtoa_r+0xa58>
 80057b2:	ee18 1a10 	vmov	r1, s16
 80057b6:	2201      	movs	r2, #1
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fea3 	bl	8006504 <__lshift>
 80057be:	4631      	mov	r1, r6
 80057c0:	ee08 0a10 	vmov	s16, r0
 80057c4:	f000 ff0e 	bl	80065e4 <__mcmp>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	dc03      	bgt.n	80057d4 <_dtoa_r+0xa9c>
 80057cc:	d1e0      	bne.n	8005790 <_dtoa_r+0xa58>
 80057ce:	f01a 0f01 	tst.w	sl, #1
 80057d2:	d0dd      	beq.n	8005790 <_dtoa_r+0xa58>
 80057d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80057d8:	d1d7      	bne.n	800578a <_dtoa_r+0xa52>
 80057da:	2339      	movs	r3, #57	; 0x39
 80057dc:	f88b 3000 	strb.w	r3, [fp]
 80057e0:	462b      	mov	r3, r5
 80057e2:	461d      	mov	r5, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80057ea:	2a39      	cmp	r2, #57	; 0x39
 80057ec:	d071      	beq.n	80058d2 <_dtoa_r+0xb9a>
 80057ee:	3201      	adds	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e746      	b.n	8005682 <_dtoa_r+0x94a>
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	dd07      	ble.n	8005808 <_dtoa_r+0xad0>
 80057f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80057fc:	d0ed      	beq.n	80057da <_dtoa_r+0xaa2>
 80057fe:	f10a 0301 	add.w	r3, sl, #1
 8005802:	f88b 3000 	strb.w	r3, [fp]
 8005806:	e73c      	b.n	8005682 <_dtoa_r+0x94a>
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800580e:	4599      	cmp	r9, r3
 8005810:	d047      	beq.n	80058a2 <_dtoa_r+0xb6a>
 8005812:	ee18 1a10 	vmov	r1, s16
 8005816:	2300      	movs	r3, #0
 8005818:	220a      	movs	r2, #10
 800581a:	4620      	mov	r0, r4
 800581c:	f000 fc78 	bl	8006110 <__multadd>
 8005820:	45b8      	cmp	r8, r7
 8005822:	ee08 0a10 	vmov	s16, r0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	f04f 020a 	mov.w	r2, #10
 800582e:	4641      	mov	r1, r8
 8005830:	4620      	mov	r0, r4
 8005832:	d106      	bne.n	8005842 <_dtoa_r+0xb0a>
 8005834:	f000 fc6c 	bl	8006110 <__multadd>
 8005838:	4680      	mov	r8, r0
 800583a:	4607      	mov	r7, r0
 800583c:	f109 0901 	add.w	r9, r9, #1
 8005840:	e772      	b.n	8005728 <_dtoa_r+0x9f0>
 8005842:	f000 fc65 	bl	8006110 <__multadd>
 8005846:	4639      	mov	r1, r7
 8005848:	4680      	mov	r8, r0
 800584a:	2300      	movs	r3, #0
 800584c:	220a      	movs	r2, #10
 800584e:	4620      	mov	r0, r4
 8005850:	f000 fc5e 	bl	8006110 <__multadd>
 8005854:	4607      	mov	r7, r0
 8005856:	e7f1      	b.n	800583c <_dtoa_r+0xb04>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	9302      	str	r3, [sp, #8]
 800585c:	9d01      	ldr	r5, [sp, #4]
 800585e:	ee18 0a10 	vmov	r0, s16
 8005862:	4631      	mov	r1, r6
 8005864:	f7ff f9dc 	bl	8004c20 <quorem>
 8005868:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	f805 ab01 	strb.w	sl, [r5], #1
 8005872:	1aea      	subs	r2, r5, r3
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	4293      	cmp	r3, r2
 8005878:	dd09      	ble.n	800588e <_dtoa_r+0xb56>
 800587a:	ee18 1a10 	vmov	r1, s16
 800587e:	2300      	movs	r3, #0
 8005880:	220a      	movs	r2, #10
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fc44 	bl	8006110 <__multadd>
 8005888:	ee08 0a10 	vmov	s16, r0
 800588c:	e7e7      	b.n	800585e <_dtoa_r+0xb26>
 800588e:	9b02      	ldr	r3, [sp, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfc8      	it	gt
 8005894:	461d      	movgt	r5, r3
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	bfd8      	it	le
 800589a:	2501      	movle	r5, #1
 800589c:	441d      	add	r5, r3
 800589e:	f04f 0800 	mov.w	r8, #0
 80058a2:	ee18 1a10 	vmov	r1, s16
 80058a6:	2201      	movs	r2, #1
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 fe2b 	bl	8006504 <__lshift>
 80058ae:	4631      	mov	r1, r6
 80058b0:	ee08 0a10 	vmov	s16, r0
 80058b4:	f000 fe96 	bl	80065e4 <__mcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc91      	bgt.n	80057e0 <_dtoa_r+0xaa8>
 80058bc:	d102      	bne.n	80058c4 <_dtoa_r+0xb8c>
 80058be:	f01a 0f01 	tst.w	sl, #1
 80058c2:	d18d      	bne.n	80057e0 <_dtoa_r+0xaa8>
 80058c4:	462b      	mov	r3, r5
 80058c6:	461d      	mov	r5, r3
 80058c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058cc:	2a30      	cmp	r2, #48	; 0x30
 80058ce:	d0fa      	beq.n	80058c6 <_dtoa_r+0xb8e>
 80058d0:	e6d7      	b.n	8005682 <_dtoa_r+0x94a>
 80058d2:	9a01      	ldr	r2, [sp, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d184      	bne.n	80057e2 <_dtoa_r+0xaaa>
 80058d8:	9b00      	ldr	r3, [sp, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2331      	movs	r3, #49	; 0x31
 80058e0:	7013      	strb	r3, [r2, #0]
 80058e2:	e6ce      	b.n	8005682 <_dtoa_r+0x94a>
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <_dtoa_r+0xbd4>)
 80058e6:	f7ff ba95 	b.w	8004e14 <_dtoa_r+0xdc>
 80058ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f47f aa6e 	bne.w	8004dce <_dtoa_r+0x96>
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <_dtoa_r+0xbd8>)
 80058f4:	f7ff ba8e 	b.w	8004e14 <_dtoa_r+0xdc>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dcae      	bgt.n	800585c <_dtoa_r+0xb24>
 80058fe:	9b06      	ldr	r3, [sp, #24]
 8005900:	2b02      	cmp	r3, #2
 8005902:	f73f aea8 	bgt.w	8005656 <_dtoa_r+0x91e>
 8005906:	e7a9      	b.n	800585c <_dtoa_r+0xb24>
 8005908:	08007ca8 	.word	0x08007ca8
 800590c:	08007aac 	.word	0x08007aac
 8005910:	08007c29 	.word	0x08007c29

08005914 <rshift>:
 8005914:	6903      	ldr	r3, [r0, #16]
 8005916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800591a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800591e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005922:	f100 0414 	add.w	r4, r0, #20
 8005926:	dd45      	ble.n	80059b4 <rshift+0xa0>
 8005928:	f011 011f 	ands.w	r1, r1, #31
 800592c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005934:	d10c      	bne.n	8005950 <rshift+0x3c>
 8005936:	f100 0710 	add.w	r7, r0, #16
 800593a:	4629      	mov	r1, r5
 800593c:	42b1      	cmp	r1, r6
 800593e:	d334      	bcc.n	80059aa <rshift+0x96>
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	1eea      	subs	r2, r5, #3
 8005946:	4296      	cmp	r6, r2
 8005948:	bf38      	it	cc
 800594a:	2300      	movcc	r3, #0
 800594c:	4423      	add	r3, r4
 800594e:	e015      	b.n	800597c <rshift+0x68>
 8005950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005954:	f1c1 0820 	rsb	r8, r1, #32
 8005958:	40cf      	lsrs	r7, r1
 800595a:	f105 0e04 	add.w	lr, r5, #4
 800595e:	46a1      	mov	r9, r4
 8005960:	4576      	cmp	r6, lr
 8005962:	46f4      	mov	ip, lr
 8005964:	d815      	bhi.n	8005992 <rshift+0x7e>
 8005966:	1a9a      	subs	r2, r3, r2
 8005968:	0092      	lsls	r2, r2, #2
 800596a:	3a04      	subs	r2, #4
 800596c:	3501      	adds	r5, #1
 800596e:	42ae      	cmp	r6, r5
 8005970:	bf38      	it	cc
 8005972:	2200      	movcc	r2, #0
 8005974:	18a3      	adds	r3, r4, r2
 8005976:	50a7      	str	r7, [r4, r2]
 8005978:	b107      	cbz	r7, 800597c <rshift+0x68>
 800597a:	3304      	adds	r3, #4
 800597c:	1b1a      	subs	r2, r3, r4
 800597e:	42a3      	cmp	r3, r4
 8005980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005984:	bf08      	it	eq
 8005986:	2300      	moveq	r3, #0
 8005988:	6102      	str	r2, [r0, #16]
 800598a:	bf08      	it	eq
 800598c:	6143      	streq	r3, [r0, #20]
 800598e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005992:	f8dc c000 	ldr.w	ip, [ip]
 8005996:	fa0c fc08 	lsl.w	ip, ip, r8
 800599a:	ea4c 0707 	orr.w	r7, ip, r7
 800599e:	f849 7b04 	str.w	r7, [r9], #4
 80059a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80059a6:	40cf      	lsrs	r7, r1
 80059a8:	e7da      	b.n	8005960 <rshift+0x4c>
 80059aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80059ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80059b2:	e7c3      	b.n	800593c <rshift+0x28>
 80059b4:	4623      	mov	r3, r4
 80059b6:	e7e1      	b.n	800597c <rshift+0x68>

080059b8 <__hexdig_fun>:
 80059b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80059bc:	2b09      	cmp	r3, #9
 80059be:	d802      	bhi.n	80059c6 <__hexdig_fun+0xe>
 80059c0:	3820      	subs	r0, #32
 80059c2:	b2c0      	uxtb	r0, r0
 80059c4:	4770      	bx	lr
 80059c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d801      	bhi.n	80059d2 <__hexdig_fun+0x1a>
 80059ce:	3847      	subs	r0, #71	; 0x47
 80059d0:	e7f7      	b.n	80059c2 <__hexdig_fun+0xa>
 80059d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d801      	bhi.n	80059de <__hexdig_fun+0x26>
 80059da:	3827      	subs	r0, #39	; 0x27
 80059dc:	e7f1      	b.n	80059c2 <__hexdig_fun+0xa>
 80059de:	2000      	movs	r0, #0
 80059e0:	4770      	bx	lr
	...

080059e4 <__gethex>:
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	ed2d 8b02 	vpush	{d8}
 80059ec:	b089      	sub	sp, #36	; 0x24
 80059ee:	ee08 0a10 	vmov	s16, r0
 80059f2:	9304      	str	r3, [sp, #16]
 80059f4:	4bb4      	ldr	r3, [pc, #720]	; (8005cc8 <__gethex+0x2e4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	4618      	mov	r0, r3
 80059fc:	468b      	mov	fp, r1
 80059fe:	4690      	mov	r8, r2
 8005a00:	f7fa fbee 	bl	80001e0 <strlen>
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	f8db 2000 	ldr.w	r2, [fp]
 8005a0a:	4403      	add	r3, r0
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	1c93      	adds	r3, r2, #2
 8005a16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005a1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005a1e:	32fe      	adds	r2, #254	; 0xfe
 8005a20:	18d1      	adds	r1, r2, r3
 8005a22:	461f      	mov	r7, r3
 8005a24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005a28:	9100      	str	r1, [sp, #0]
 8005a2a:	2830      	cmp	r0, #48	; 0x30
 8005a2c:	d0f8      	beq.n	8005a20 <__gethex+0x3c>
 8005a2e:	f7ff ffc3 	bl	80059b8 <__hexdig_fun>
 8005a32:	4604      	mov	r4, r0
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d13a      	bne.n	8005aae <__gethex+0xca>
 8005a38:	9901      	ldr	r1, [sp, #4]
 8005a3a:	4652      	mov	r2, sl
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f001 fa33 	bl	8006ea8 <strncmp>
 8005a42:	4605      	mov	r5, r0
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d168      	bne.n	8005b1a <__gethex+0x136>
 8005a48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005a4c:	eb07 060a 	add.w	r6, r7, sl
 8005a50:	f7ff ffb2 	bl	80059b8 <__hexdig_fun>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d062      	beq.n	8005b1e <__gethex+0x13a>
 8005a58:	4633      	mov	r3, r6
 8005a5a:	7818      	ldrb	r0, [r3, #0]
 8005a5c:	2830      	cmp	r0, #48	; 0x30
 8005a5e:	461f      	mov	r7, r3
 8005a60:	f103 0301 	add.w	r3, r3, #1
 8005a64:	d0f9      	beq.n	8005a5a <__gethex+0x76>
 8005a66:	f7ff ffa7 	bl	80059b8 <__hexdig_fun>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	fab0 f480 	clz	r4, r0
 8005a70:	0964      	lsrs	r4, r4, #5
 8005a72:	4635      	mov	r5, r6
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	463a      	mov	r2, r7
 8005a78:	4616      	mov	r6, r2
 8005a7a:	3201      	adds	r2, #1
 8005a7c:	7830      	ldrb	r0, [r6, #0]
 8005a7e:	f7ff ff9b 	bl	80059b8 <__hexdig_fun>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d1f8      	bne.n	8005a78 <__gethex+0x94>
 8005a86:	9901      	ldr	r1, [sp, #4]
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f001 fa0c 	bl	8006ea8 <strncmp>
 8005a90:	b980      	cbnz	r0, 8005ab4 <__gethex+0xd0>
 8005a92:	b94d      	cbnz	r5, 8005aa8 <__gethex+0xc4>
 8005a94:	eb06 050a 	add.w	r5, r6, sl
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4616      	mov	r6, r2
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	7830      	ldrb	r0, [r6, #0]
 8005aa0:	f7ff ff8a 	bl	80059b8 <__hexdig_fun>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d1f8      	bne.n	8005a9a <__gethex+0xb6>
 8005aa8:	1bad      	subs	r5, r5, r6
 8005aaa:	00ad      	lsls	r5, r5, #2
 8005aac:	e004      	b.n	8005ab8 <__gethex+0xd4>
 8005aae:	2400      	movs	r4, #0
 8005ab0:	4625      	mov	r5, r4
 8005ab2:	e7e0      	b.n	8005a76 <__gethex+0x92>
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	d1f7      	bne.n	8005aa8 <__gethex+0xc4>
 8005ab8:	7833      	ldrb	r3, [r6, #0]
 8005aba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005abe:	2b50      	cmp	r3, #80	; 0x50
 8005ac0:	d13b      	bne.n	8005b3a <__gethex+0x156>
 8005ac2:	7873      	ldrb	r3, [r6, #1]
 8005ac4:	2b2b      	cmp	r3, #43	; 0x2b
 8005ac6:	d02c      	beq.n	8005b22 <__gethex+0x13e>
 8005ac8:	2b2d      	cmp	r3, #45	; 0x2d
 8005aca:	d02e      	beq.n	8005b2a <__gethex+0x146>
 8005acc:	1c71      	adds	r1, r6, #1
 8005ace:	f04f 0900 	mov.w	r9, #0
 8005ad2:	7808      	ldrb	r0, [r1, #0]
 8005ad4:	f7ff ff70 	bl	80059b8 <__hexdig_fun>
 8005ad8:	1e43      	subs	r3, r0, #1
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b18      	cmp	r3, #24
 8005ade:	d82c      	bhi.n	8005b3a <__gethex+0x156>
 8005ae0:	f1a0 0210 	sub.w	r2, r0, #16
 8005ae4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005ae8:	f7ff ff66 	bl	80059b8 <__hexdig_fun>
 8005aec:	1e43      	subs	r3, r0, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b18      	cmp	r3, #24
 8005af2:	d91d      	bls.n	8005b30 <__gethex+0x14c>
 8005af4:	f1b9 0f00 	cmp.w	r9, #0
 8005af8:	d000      	beq.n	8005afc <__gethex+0x118>
 8005afa:	4252      	negs	r2, r2
 8005afc:	4415      	add	r5, r2
 8005afe:	f8cb 1000 	str.w	r1, [fp]
 8005b02:	b1e4      	cbz	r4, 8005b3e <__gethex+0x15a>
 8005b04:	9b00      	ldr	r3, [sp, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2700      	movne	r7, #0
 8005b0c:	2706      	moveq	r7, #6
 8005b0e:	4638      	mov	r0, r7
 8005b10:	b009      	add	sp, #36	; 0x24
 8005b12:	ecbd 8b02 	vpop	{d8}
 8005b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1a:	463e      	mov	r6, r7
 8005b1c:	4625      	mov	r5, r4
 8005b1e:	2401      	movs	r4, #1
 8005b20:	e7ca      	b.n	8005ab8 <__gethex+0xd4>
 8005b22:	f04f 0900 	mov.w	r9, #0
 8005b26:	1cb1      	adds	r1, r6, #2
 8005b28:	e7d3      	b.n	8005ad2 <__gethex+0xee>
 8005b2a:	f04f 0901 	mov.w	r9, #1
 8005b2e:	e7fa      	b.n	8005b26 <__gethex+0x142>
 8005b30:	230a      	movs	r3, #10
 8005b32:	fb03 0202 	mla	r2, r3, r2, r0
 8005b36:	3a10      	subs	r2, #16
 8005b38:	e7d4      	b.n	8005ae4 <__gethex+0x100>
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	e7df      	b.n	8005afe <__gethex+0x11a>
 8005b3e:	1bf3      	subs	r3, r6, r7
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4621      	mov	r1, r4
 8005b44:	2b07      	cmp	r3, #7
 8005b46:	dc0b      	bgt.n	8005b60 <__gethex+0x17c>
 8005b48:	ee18 0a10 	vmov	r0, s16
 8005b4c:	f000 fa7e 	bl	800604c <_Balloc>
 8005b50:	4604      	mov	r4, r0
 8005b52:	b940      	cbnz	r0, 8005b66 <__gethex+0x182>
 8005b54:	4b5d      	ldr	r3, [pc, #372]	; (8005ccc <__gethex+0x2e8>)
 8005b56:	4602      	mov	r2, r0
 8005b58:	21de      	movs	r1, #222	; 0xde
 8005b5a:	485d      	ldr	r0, [pc, #372]	; (8005cd0 <__gethex+0x2ec>)
 8005b5c:	f001 f9c6 	bl	8006eec <__assert_func>
 8005b60:	3101      	adds	r1, #1
 8005b62:	105b      	asrs	r3, r3, #1
 8005b64:	e7ee      	b.n	8005b44 <__gethex+0x160>
 8005b66:	f100 0914 	add.w	r9, r0, #20
 8005b6a:	f04f 0b00 	mov.w	fp, #0
 8005b6e:	f1ca 0301 	rsb	r3, sl, #1
 8005b72:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b76:	f8cd b000 	str.w	fp, [sp]
 8005b7a:	9306      	str	r3, [sp, #24]
 8005b7c:	42b7      	cmp	r7, r6
 8005b7e:	d340      	bcc.n	8005c02 <__gethex+0x21e>
 8005b80:	9802      	ldr	r0, [sp, #8]
 8005b82:	9b00      	ldr	r3, [sp, #0]
 8005b84:	f840 3b04 	str.w	r3, [r0], #4
 8005b88:	eba0 0009 	sub.w	r0, r0, r9
 8005b8c:	1080      	asrs	r0, r0, #2
 8005b8e:	0146      	lsls	r6, r0, #5
 8005b90:	6120      	str	r0, [r4, #16]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fb4c 	bl	8006230 <__hi0bits>
 8005b98:	1a30      	subs	r0, r6, r0
 8005b9a:	f8d8 6000 	ldr.w	r6, [r8]
 8005b9e:	42b0      	cmp	r0, r6
 8005ba0:	dd63      	ble.n	8005c6a <__gethex+0x286>
 8005ba2:	1b87      	subs	r7, r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fef0 	bl	800698c <__any_on>
 8005bac:	4682      	mov	sl, r0
 8005bae:	b1a8      	cbz	r0, 8005bdc <__gethex+0x1f8>
 8005bb0:	1e7b      	subs	r3, r7, #1
 8005bb2:	1159      	asrs	r1, r3, #5
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005bbc:	f04f 0a01 	mov.w	sl, #1
 8005bc0:	fa0a f202 	lsl.w	r2, sl, r2
 8005bc4:	420a      	tst	r2, r1
 8005bc6:	d009      	beq.n	8005bdc <__gethex+0x1f8>
 8005bc8:	4553      	cmp	r3, sl
 8005bca:	dd05      	ble.n	8005bd8 <__gethex+0x1f4>
 8005bcc:	1eb9      	subs	r1, r7, #2
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f000 fedc 	bl	800698c <__any_on>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d145      	bne.n	8005c64 <__gethex+0x280>
 8005bd8:	f04f 0a02 	mov.w	sl, #2
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fe98 	bl	8005914 <rshift>
 8005be4:	443d      	add	r5, r7
 8005be6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bea:	42ab      	cmp	r3, r5
 8005bec:	da4c      	bge.n	8005c88 <__gethex+0x2a4>
 8005bee:	ee18 0a10 	vmov	r0, s16
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	f000 fa6a 	bl	80060cc <_Bfree>
 8005bf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	27a3      	movs	r7, #163	; 0xa3
 8005c00:	e785      	b.n	8005b0e <__gethex+0x12a>
 8005c02:	1e73      	subs	r3, r6, #1
 8005c04:	9a05      	ldr	r2, [sp, #20]
 8005c06:	9303      	str	r3, [sp, #12]
 8005c08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d019      	beq.n	8005c44 <__gethex+0x260>
 8005c10:	f1bb 0f20 	cmp.w	fp, #32
 8005c14:	d107      	bne.n	8005c26 <__gethex+0x242>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	9a00      	ldr	r2, [sp, #0]
 8005c1a:	f843 2b04 	str.w	r2, [r3], #4
 8005c1e:	9302      	str	r3, [sp, #8]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	469b      	mov	fp, r3
 8005c26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005c2a:	f7ff fec5 	bl	80059b8 <__hexdig_fun>
 8005c2e:	9b00      	ldr	r3, [sp, #0]
 8005c30:	f000 000f 	and.w	r0, r0, #15
 8005c34:	fa00 f00b 	lsl.w	r0, r0, fp
 8005c38:	4303      	orrs	r3, r0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f10b 0b04 	add.w	fp, fp, #4
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	e00d      	b.n	8005c60 <__gethex+0x27c>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	9a06      	ldr	r2, [sp, #24]
 8005c48:	4413      	add	r3, r2
 8005c4a:	42bb      	cmp	r3, r7
 8005c4c:	d3e0      	bcc.n	8005c10 <__gethex+0x22c>
 8005c4e:	4618      	mov	r0, r3
 8005c50:	9901      	ldr	r1, [sp, #4]
 8005c52:	9307      	str	r3, [sp, #28]
 8005c54:	4652      	mov	r2, sl
 8005c56:	f001 f927 	bl	8006ea8 <strncmp>
 8005c5a:	9b07      	ldr	r3, [sp, #28]
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d1d7      	bne.n	8005c10 <__gethex+0x22c>
 8005c60:	461e      	mov	r6, r3
 8005c62:	e78b      	b.n	8005b7c <__gethex+0x198>
 8005c64:	f04f 0a03 	mov.w	sl, #3
 8005c68:	e7b8      	b.n	8005bdc <__gethex+0x1f8>
 8005c6a:	da0a      	bge.n	8005c82 <__gethex+0x29e>
 8005c6c:	1a37      	subs	r7, r6, r0
 8005c6e:	4621      	mov	r1, r4
 8005c70:	ee18 0a10 	vmov	r0, s16
 8005c74:	463a      	mov	r2, r7
 8005c76:	f000 fc45 	bl	8006504 <__lshift>
 8005c7a:	1bed      	subs	r5, r5, r7
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	f100 0914 	add.w	r9, r0, #20
 8005c82:	f04f 0a00 	mov.w	sl, #0
 8005c86:	e7ae      	b.n	8005be6 <__gethex+0x202>
 8005c88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005c8c:	42a8      	cmp	r0, r5
 8005c8e:	dd72      	ble.n	8005d76 <__gethex+0x392>
 8005c90:	1b45      	subs	r5, r0, r5
 8005c92:	42ae      	cmp	r6, r5
 8005c94:	dc36      	bgt.n	8005d04 <__gethex+0x320>
 8005c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d02a      	beq.n	8005cf4 <__gethex+0x310>
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d02c      	beq.n	8005cfc <__gethex+0x318>
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d11c      	bne.n	8005ce0 <__gethex+0x2fc>
 8005ca6:	42ae      	cmp	r6, r5
 8005ca8:	d11a      	bne.n	8005ce0 <__gethex+0x2fc>
 8005caa:	2e01      	cmp	r6, #1
 8005cac:	d112      	bne.n	8005cd4 <__gethex+0x2f0>
 8005cae:	9a04      	ldr	r2, [sp, #16]
 8005cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	f8c9 3000 	str.w	r3, [r9]
 8005cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cc0:	2762      	movs	r7, #98	; 0x62
 8005cc2:	601c      	str	r4, [r3, #0]
 8005cc4:	e723      	b.n	8005b0e <__gethex+0x12a>
 8005cc6:	bf00      	nop
 8005cc8:	08007d20 	.word	0x08007d20
 8005ccc:	08007ca8 	.word	0x08007ca8
 8005cd0:	08007cb9 	.word	0x08007cb9
 8005cd4:	1e71      	subs	r1, r6, #1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fe58 	bl	800698c <__any_on>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d1e6      	bne.n	8005cae <__gethex+0x2ca>
 8005ce0:	ee18 0a10 	vmov	r0, s16
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	f000 f9f1 	bl	80060cc <_Bfree>
 8005cea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cec:	2300      	movs	r3, #0
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	2750      	movs	r7, #80	; 0x50
 8005cf2:	e70c      	b.n	8005b0e <__gethex+0x12a>
 8005cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f2      	bne.n	8005ce0 <__gethex+0x2fc>
 8005cfa:	e7d8      	b.n	8005cae <__gethex+0x2ca>
 8005cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d5      	bne.n	8005cae <__gethex+0x2ca>
 8005d02:	e7ed      	b.n	8005ce0 <__gethex+0x2fc>
 8005d04:	1e6f      	subs	r7, r5, #1
 8005d06:	f1ba 0f00 	cmp.w	sl, #0
 8005d0a:	d131      	bne.n	8005d70 <__gethex+0x38c>
 8005d0c:	b127      	cbz	r7, 8005d18 <__gethex+0x334>
 8005d0e:	4639      	mov	r1, r7
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 fe3b 	bl	800698c <__any_on>
 8005d16:	4682      	mov	sl, r0
 8005d18:	117b      	asrs	r3, r7, #5
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005d20:	f007 071f 	and.w	r7, r7, #31
 8005d24:	fa01 f707 	lsl.w	r7, r1, r7
 8005d28:	421f      	tst	r7, r3
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bf18      	it	ne
 8005d30:	f04a 0a02 	orrne.w	sl, sl, #2
 8005d34:	1b76      	subs	r6, r6, r5
 8005d36:	f7ff fded 	bl	8005914 <rshift>
 8005d3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005d3e:	2702      	movs	r7, #2
 8005d40:	f1ba 0f00 	cmp.w	sl, #0
 8005d44:	d048      	beq.n	8005dd8 <__gethex+0x3f4>
 8005d46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d015      	beq.n	8005d7a <__gethex+0x396>
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d017      	beq.n	8005d82 <__gethex+0x39e>
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d109      	bne.n	8005d6a <__gethex+0x386>
 8005d56:	f01a 0f02 	tst.w	sl, #2
 8005d5a:	d006      	beq.n	8005d6a <__gethex+0x386>
 8005d5c:	f8d9 0000 	ldr.w	r0, [r9]
 8005d60:	ea4a 0a00 	orr.w	sl, sl, r0
 8005d64:	f01a 0f01 	tst.w	sl, #1
 8005d68:	d10e      	bne.n	8005d88 <__gethex+0x3a4>
 8005d6a:	f047 0710 	orr.w	r7, r7, #16
 8005d6e:	e033      	b.n	8005dd8 <__gethex+0x3f4>
 8005d70:	f04f 0a01 	mov.w	sl, #1
 8005d74:	e7d0      	b.n	8005d18 <__gethex+0x334>
 8005d76:	2701      	movs	r7, #1
 8005d78:	e7e2      	b.n	8005d40 <__gethex+0x35c>
 8005d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d7c:	f1c3 0301 	rsb	r3, r3, #1
 8005d80:	9315      	str	r3, [sp, #84]	; 0x54
 8005d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <__gethex+0x386>
 8005d88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005d8c:	f104 0314 	add.w	r3, r4, #20
 8005d90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005d94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005d98:	f04f 0c00 	mov.w	ip, #0
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005da6:	d01c      	beq.n	8005de2 <__gethex+0x3fe>
 8005da8:	3201      	adds	r2, #1
 8005daa:	6002      	str	r2, [r0, #0]
 8005dac:	2f02      	cmp	r7, #2
 8005dae:	f104 0314 	add.w	r3, r4, #20
 8005db2:	d13f      	bne.n	8005e34 <__gethex+0x450>
 8005db4:	f8d8 2000 	ldr.w	r2, [r8]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	42b2      	cmp	r2, r6
 8005dbc:	d10a      	bne.n	8005dd4 <__gethex+0x3f0>
 8005dbe:	1171      	asrs	r1, r6, #5
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005dc6:	f006 061f 	and.w	r6, r6, #31
 8005dca:	fa02 f606 	lsl.w	r6, r2, r6
 8005dce:	421e      	tst	r6, r3
 8005dd0:	bf18      	it	ne
 8005dd2:	4617      	movne	r7, r2
 8005dd4:	f047 0720 	orr.w	r7, r7, #32
 8005dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dda:	601c      	str	r4, [r3, #0]
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	601d      	str	r5, [r3, #0]
 8005de0:	e695      	b.n	8005b0e <__gethex+0x12a>
 8005de2:	4299      	cmp	r1, r3
 8005de4:	f843 cc04 	str.w	ip, [r3, #-4]
 8005de8:	d8d8      	bhi.n	8005d9c <__gethex+0x3b8>
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	459b      	cmp	fp, r3
 8005dee:	db19      	blt.n	8005e24 <__gethex+0x440>
 8005df0:	6861      	ldr	r1, [r4, #4]
 8005df2:	ee18 0a10 	vmov	r0, s16
 8005df6:	3101      	adds	r1, #1
 8005df8:	f000 f928 	bl	800604c <_Balloc>
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	b918      	cbnz	r0, 8005e08 <__gethex+0x424>
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <__gethex+0x488>)
 8005e02:	4602      	mov	r2, r0
 8005e04:	2184      	movs	r1, #132	; 0x84
 8005e06:	e6a8      	b.n	8005b5a <__gethex+0x176>
 8005e08:	6922      	ldr	r2, [r4, #16]
 8005e0a:	3202      	adds	r2, #2
 8005e0c:	f104 010c 	add.w	r1, r4, #12
 8005e10:	0092      	lsls	r2, r2, #2
 8005e12:	300c      	adds	r0, #12
 8005e14:	f000 f90c 	bl	8006030 <memcpy>
 8005e18:	4621      	mov	r1, r4
 8005e1a:	ee18 0a10 	vmov	r0, s16
 8005e1e:	f000 f955 	bl	80060cc <_Bfree>
 8005e22:	464c      	mov	r4, r9
 8005e24:	6923      	ldr	r3, [r4, #16]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e2c:	6122      	str	r2, [r4, #16]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	615a      	str	r2, [r3, #20]
 8005e32:	e7bb      	b.n	8005dac <__gethex+0x3c8>
 8005e34:	6922      	ldr	r2, [r4, #16]
 8005e36:	455a      	cmp	r2, fp
 8005e38:	dd0b      	ble.n	8005e52 <__gethex+0x46e>
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff fd69 	bl	8005914 <rshift>
 8005e42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e46:	3501      	adds	r5, #1
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	f6ff aed0 	blt.w	8005bee <__gethex+0x20a>
 8005e4e:	2701      	movs	r7, #1
 8005e50:	e7c0      	b.n	8005dd4 <__gethex+0x3f0>
 8005e52:	f016 061f 	ands.w	r6, r6, #31
 8005e56:	d0fa      	beq.n	8005e4e <__gethex+0x46a>
 8005e58:	4453      	add	r3, sl
 8005e5a:	f1c6 0620 	rsb	r6, r6, #32
 8005e5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005e62:	f000 f9e5 	bl	8006230 <__hi0bits>
 8005e66:	42b0      	cmp	r0, r6
 8005e68:	dbe7      	blt.n	8005e3a <__gethex+0x456>
 8005e6a:	e7f0      	b.n	8005e4e <__gethex+0x46a>
 8005e6c:	08007ca8 	.word	0x08007ca8

08005e70 <L_shift>:
 8005e70:	f1c2 0208 	rsb	r2, r2, #8
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	b570      	push	{r4, r5, r6, lr}
 8005e78:	f1c2 0620 	rsb	r6, r2, #32
 8005e7c:	6843      	ldr	r3, [r0, #4]
 8005e7e:	6804      	ldr	r4, [r0, #0]
 8005e80:	fa03 f506 	lsl.w	r5, r3, r6
 8005e84:	432c      	orrs	r4, r5
 8005e86:	40d3      	lsrs	r3, r2
 8005e88:	6004      	str	r4, [r0, #0]
 8005e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e8e:	4288      	cmp	r0, r1
 8005e90:	d3f4      	bcc.n	8005e7c <L_shift+0xc>
 8005e92:	bd70      	pop	{r4, r5, r6, pc}

08005e94 <__match>:
 8005e94:	b530      	push	{r4, r5, lr}
 8005e96:	6803      	ldr	r3, [r0, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9e:	b914      	cbnz	r4, 8005ea6 <__match+0x12>
 8005ea0:	6003      	str	r3, [r0, #0]
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	bd30      	pop	{r4, r5, pc}
 8005ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005eae:	2d19      	cmp	r5, #25
 8005eb0:	bf98      	it	ls
 8005eb2:	3220      	addls	r2, #32
 8005eb4:	42a2      	cmp	r2, r4
 8005eb6:	d0f0      	beq.n	8005e9a <__match+0x6>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e7f3      	b.n	8005ea4 <__match+0x10>

08005ebc <__hexnan>:
 8005ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec0:	680b      	ldr	r3, [r1, #0]
 8005ec2:	115e      	asrs	r6, r3, #5
 8005ec4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ec8:	f013 031f 	ands.w	r3, r3, #31
 8005ecc:	b087      	sub	sp, #28
 8005ece:	bf18      	it	ne
 8005ed0:	3604      	addne	r6, #4
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	1f37      	subs	r7, r6, #4
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	6802      	ldr	r2, [r0, #0]
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	4682      	mov	sl, r0
 8005ede:	f846 5c04 	str.w	r5, [r6, #-4]
 8005ee2:	46b9      	mov	r9, r7
 8005ee4:	463c      	mov	r4, r7
 8005ee6:	9502      	str	r5, [sp, #8]
 8005ee8:	46ab      	mov	fp, r5
 8005eea:	7851      	ldrb	r1, [r2, #1]
 8005eec:	1c53      	adds	r3, r2, #1
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	b341      	cbz	r1, 8005f44 <__hexnan+0x88>
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	9205      	str	r2, [sp, #20]
 8005ef6:	9104      	str	r1, [sp, #16]
 8005ef8:	f7ff fd5e 	bl	80059b8 <__hexdig_fun>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d14f      	bne.n	8005fa0 <__hexnan+0xe4>
 8005f00:	9904      	ldr	r1, [sp, #16]
 8005f02:	9a05      	ldr	r2, [sp, #20]
 8005f04:	2920      	cmp	r1, #32
 8005f06:	d818      	bhi.n	8005f3a <__hexnan+0x7e>
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	459b      	cmp	fp, r3
 8005f0c:	dd13      	ble.n	8005f36 <__hexnan+0x7a>
 8005f0e:	454c      	cmp	r4, r9
 8005f10:	d206      	bcs.n	8005f20 <__hexnan+0x64>
 8005f12:	2d07      	cmp	r5, #7
 8005f14:	dc04      	bgt.n	8005f20 <__hexnan+0x64>
 8005f16:	462a      	mov	r2, r5
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f7ff ffa8 	bl	8005e70 <L_shift>
 8005f20:	4544      	cmp	r4, r8
 8005f22:	d950      	bls.n	8005fc6 <__hexnan+0x10a>
 8005f24:	2300      	movs	r3, #0
 8005f26:	f1a4 0904 	sub.w	r9, r4, #4
 8005f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f2e:	f8cd b008 	str.w	fp, [sp, #8]
 8005f32:	464c      	mov	r4, r9
 8005f34:	461d      	mov	r5, r3
 8005f36:	9a03      	ldr	r2, [sp, #12]
 8005f38:	e7d7      	b.n	8005eea <__hexnan+0x2e>
 8005f3a:	2929      	cmp	r1, #41	; 0x29
 8005f3c:	d156      	bne.n	8005fec <__hexnan+0x130>
 8005f3e:	3202      	adds	r2, #2
 8005f40:	f8ca 2000 	str.w	r2, [sl]
 8005f44:	f1bb 0f00 	cmp.w	fp, #0
 8005f48:	d050      	beq.n	8005fec <__hexnan+0x130>
 8005f4a:	454c      	cmp	r4, r9
 8005f4c:	d206      	bcs.n	8005f5c <__hexnan+0xa0>
 8005f4e:	2d07      	cmp	r5, #7
 8005f50:	dc04      	bgt.n	8005f5c <__hexnan+0xa0>
 8005f52:	462a      	mov	r2, r5
 8005f54:	4649      	mov	r1, r9
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff ff8a 	bl	8005e70 <L_shift>
 8005f5c:	4544      	cmp	r4, r8
 8005f5e:	d934      	bls.n	8005fca <__hexnan+0x10e>
 8005f60:	f1a8 0204 	sub.w	r2, r8, #4
 8005f64:	4623      	mov	r3, r4
 8005f66:	f853 1b04 	ldr.w	r1, [r3], #4
 8005f6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8005f6e:	429f      	cmp	r7, r3
 8005f70:	d2f9      	bcs.n	8005f66 <__hexnan+0xaa>
 8005f72:	1b3b      	subs	r3, r7, r4
 8005f74:	f023 0303 	bic.w	r3, r3, #3
 8005f78:	3304      	adds	r3, #4
 8005f7a:	3401      	adds	r4, #1
 8005f7c:	3e03      	subs	r6, #3
 8005f7e:	42b4      	cmp	r4, r6
 8005f80:	bf88      	it	hi
 8005f82:	2304      	movhi	r3, #4
 8005f84:	4443      	add	r3, r8
 8005f86:	2200      	movs	r2, #0
 8005f88:	f843 2b04 	str.w	r2, [r3], #4
 8005f8c:	429f      	cmp	r7, r3
 8005f8e:	d2fb      	bcs.n	8005f88 <__hexnan+0xcc>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	b91b      	cbnz	r3, 8005f9c <__hexnan+0xe0>
 8005f94:	4547      	cmp	r7, r8
 8005f96:	d127      	bne.n	8005fe8 <__hexnan+0x12c>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	2005      	movs	r0, #5
 8005f9e:	e026      	b.n	8005fee <__hexnan+0x132>
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	2d08      	cmp	r5, #8
 8005fa4:	f10b 0b01 	add.w	fp, fp, #1
 8005fa8:	dd06      	ble.n	8005fb8 <__hexnan+0xfc>
 8005faa:	4544      	cmp	r4, r8
 8005fac:	d9c3      	bls.n	8005f36 <__hexnan+0x7a>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fb4:	2501      	movs	r5, #1
 8005fb6:	3c04      	subs	r4, #4
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	f000 000f 	and.w	r0, r0, #15
 8005fbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005fc2:	6022      	str	r2, [r4, #0]
 8005fc4:	e7b7      	b.n	8005f36 <__hexnan+0x7a>
 8005fc6:	2508      	movs	r5, #8
 8005fc8:	e7b5      	b.n	8005f36 <__hexnan+0x7a>
 8005fca:	9b01      	ldr	r3, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0df      	beq.n	8005f90 <__hexnan+0xd4>
 8005fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd4:	f1c3 0320 	rsb	r3, r3, #32
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005fe0:	401a      	ands	r2, r3
 8005fe2:	f846 2c04 	str.w	r2, [r6, #-4]
 8005fe6:	e7d3      	b.n	8005f90 <__hexnan+0xd4>
 8005fe8:	3f04      	subs	r7, #4
 8005fea:	e7d1      	b.n	8005f90 <__hexnan+0xd4>
 8005fec:	2004      	movs	r0, #4
 8005fee:	b007      	add	sp, #28
 8005ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ff4 <_localeconv_r>:
 8005ff4:	4800      	ldr	r0, [pc, #0]	; (8005ff8 <_localeconv_r+0x4>)
 8005ff6:	4770      	bx	lr
 8005ff8:	20000164 	.word	0x20000164

08005ffc <malloc>:
 8005ffc:	4b02      	ldr	r3, [pc, #8]	; (8006008 <malloc+0xc>)
 8005ffe:	4601      	mov	r1, r0
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f000 bd67 	b.w	8006ad4 <_malloc_r>
 8006006:	bf00      	nop
 8006008:	2000000c 	.word	0x2000000c

0800600c <__ascii_mbtowc>:
 800600c:	b082      	sub	sp, #8
 800600e:	b901      	cbnz	r1, 8006012 <__ascii_mbtowc+0x6>
 8006010:	a901      	add	r1, sp, #4
 8006012:	b142      	cbz	r2, 8006026 <__ascii_mbtowc+0x1a>
 8006014:	b14b      	cbz	r3, 800602a <__ascii_mbtowc+0x1e>
 8006016:	7813      	ldrb	r3, [r2, #0]
 8006018:	600b      	str	r3, [r1, #0]
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	1e10      	subs	r0, r2, #0
 800601e:	bf18      	it	ne
 8006020:	2001      	movne	r0, #1
 8006022:	b002      	add	sp, #8
 8006024:	4770      	bx	lr
 8006026:	4610      	mov	r0, r2
 8006028:	e7fb      	b.n	8006022 <__ascii_mbtowc+0x16>
 800602a:	f06f 0001 	mvn.w	r0, #1
 800602e:	e7f8      	b.n	8006022 <__ascii_mbtowc+0x16>

08006030 <memcpy>:
 8006030:	440a      	add	r2, r1
 8006032:	4291      	cmp	r1, r2
 8006034:	f100 33ff 	add.w	r3, r0, #4294967295
 8006038:	d100      	bne.n	800603c <memcpy+0xc>
 800603a:	4770      	bx	lr
 800603c:	b510      	push	{r4, lr}
 800603e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006046:	4291      	cmp	r1, r2
 8006048:	d1f9      	bne.n	800603e <memcpy+0xe>
 800604a:	bd10      	pop	{r4, pc}

0800604c <_Balloc>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	b976      	cbnz	r6, 8006074 <_Balloc+0x28>
 8006056:	2010      	movs	r0, #16
 8006058:	f7ff ffd0 	bl	8005ffc <malloc>
 800605c:	4602      	mov	r2, r0
 800605e:	6260      	str	r0, [r4, #36]	; 0x24
 8006060:	b920      	cbnz	r0, 800606c <_Balloc+0x20>
 8006062:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <_Balloc+0x78>)
 8006064:	4818      	ldr	r0, [pc, #96]	; (80060c8 <_Balloc+0x7c>)
 8006066:	2166      	movs	r1, #102	; 0x66
 8006068:	f000 ff40 	bl	8006eec <__assert_func>
 800606c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006070:	6006      	str	r6, [r0, #0]
 8006072:	60c6      	str	r6, [r0, #12]
 8006074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006076:	68f3      	ldr	r3, [r6, #12]
 8006078:	b183      	cbz	r3, 800609c <_Balloc+0x50>
 800607a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006082:	b9b8      	cbnz	r0, 80060b4 <_Balloc+0x68>
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f605 	lsl.w	r6, r1, r5
 800608a:	1d72      	adds	r2, r6, #5
 800608c:	0092      	lsls	r2, r2, #2
 800608e:	4620      	mov	r0, r4
 8006090:	f000 fc9d 	bl	80069ce <_calloc_r>
 8006094:	b160      	cbz	r0, 80060b0 <_Balloc+0x64>
 8006096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800609a:	e00e      	b.n	80060ba <_Balloc+0x6e>
 800609c:	2221      	movs	r2, #33	; 0x21
 800609e:	2104      	movs	r1, #4
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fc94 	bl	80069ce <_calloc_r>
 80060a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a8:	60f0      	str	r0, [r6, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e4      	bne.n	800607a <_Balloc+0x2e>
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ba:	2300      	movs	r3, #0
 80060bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060c0:	e7f7      	b.n	80060b2 <_Balloc+0x66>
 80060c2:	bf00      	nop
 80060c4:	08007c36 	.word	0x08007c36
 80060c8:	08007d34 	.word	0x08007d34

080060cc <_Bfree>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060d0:	4605      	mov	r5, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	b976      	cbnz	r6, 80060f4 <_Bfree+0x28>
 80060d6:	2010      	movs	r0, #16
 80060d8:	f7ff ff90 	bl	8005ffc <malloc>
 80060dc:	4602      	mov	r2, r0
 80060de:	6268      	str	r0, [r5, #36]	; 0x24
 80060e0:	b920      	cbnz	r0, 80060ec <_Bfree+0x20>
 80060e2:	4b09      	ldr	r3, [pc, #36]	; (8006108 <_Bfree+0x3c>)
 80060e4:	4809      	ldr	r0, [pc, #36]	; (800610c <_Bfree+0x40>)
 80060e6:	218a      	movs	r1, #138	; 0x8a
 80060e8:	f000 ff00 	bl	8006eec <__assert_func>
 80060ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060f0:	6006      	str	r6, [r0, #0]
 80060f2:	60c6      	str	r6, [r0, #12]
 80060f4:	b13c      	cbz	r4, 8006106 <_Bfree+0x3a>
 80060f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060f8:	6862      	ldr	r2, [r4, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006100:	6021      	str	r1, [r4, #0]
 8006102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	08007c36 	.word	0x08007c36
 800610c:	08007d34 	.word	0x08007d34

08006110 <__multadd>:
 8006110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006114:	690d      	ldr	r5, [r1, #16]
 8006116:	4607      	mov	r7, r0
 8006118:	460c      	mov	r4, r1
 800611a:	461e      	mov	r6, r3
 800611c:	f101 0c14 	add.w	ip, r1, #20
 8006120:	2000      	movs	r0, #0
 8006122:	f8dc 3000 	ldr.w	r3, [ip]
 8006126:	b299      	uxth	r1, r3
 8006128:	fb02 6101 	mla	r1, r2, r1, r6
 800612c:	0c1e      	lsrs	r6, r3, #16
 800612e:	0c0b      	lsrs	r3, r1, #16
 8006130:	fb02 3306 	mla	r3, r2, r6, r3
 8006134:	b289      	uxth	r1, r1
 8006136:	3001      	adds	r0, #1
 8006138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800613c:	4285      	cmp	r5, r0
 800613e:	f84c 1b04 	str.w	r1, [ip], #4
 8006142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006146:	dcec      	bgt.n	8006122 <__multadd+0x12>
 8006148:	b30e      	cbz	r6, 800618e <__multadd+0x7e>
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	42ab      	cmp	r3, r5
 800614e:	dc19      	bgt.n	8006184 <__multadd+0x74>
 8006150:	6861      	ldr	r1, [r4, #4]
 8006152:	4638      	mov	r0, r7
 8006154:	3101      	adds	r1, #1
 8006156:	f7ff ff79 	bl	800604c <_Balloc>
 800615a:	4680      	mov	r8, r0
 800615c:	b928      	cbnz	r0, 800616a <__multadd+0x5a>
 800615e:	4602      	mov	r2, r0
 8006160:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <__multadd+0x84>)
 8006162:	480d      	ldr	r0, [pc, #52]	; (8006198 <__multadd+0x88>)
 8006164:	21b5      	movs	r1, #181	; 0xb5
 8006166:	f000 fec1 	bl	8006eec <__assert_func>
 800616a:	6922      	ldr	r2, [r4, #16]
 800616c:	3202      	adds	r2, #2
 800616e:	f104 010c 	add.w	r1, r4, #12
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	300c      	adds	r0, #12
 8006176:	f7ff ff5b 	bl	8006030 <memcpy>
 800617a:	4621      	mov	r1, r4
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff ffa5 	bl	80060cc <_Bfree>
 8006182:	4644      	mov	r4, r8
 8006184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006188:	3501      	adds	r5, #1
 800618a:	615e      	str	r6, [r3, #20]
 800618c:	6125      	str	r5, [r4, #16]
 800618e:	4620      	mov	r0, r4
 8006190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006194:	08007ca8 	.word	0x08007ca8
 8006198:	08007d34 	.word	0x08007d34

0800619c <__s2b>:
 800619c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	4615      	mov	r5, r2
 80061a4:	461f      	mov	r7, r3
 80061a6:	2209      	movs	r2, #9
 80061a8:	3308      	adds	r3, #8
 80061aa:	4606      	mov	r6, r0
 80061ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b0:	2100      	movs	r1, #0
 80061b2:	2201      	movs	r2, #1
 80061b4:	429a      	cmp	r2, r3
 80061b6:	db09      	blt.n	80061cc <__s2b+0x30>
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff ff47 	bl	800604c <_Balloc>
 80061be:	b940      	cbnz	r0, 80061d2 <__s2b+0x36>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b19      	ldr	r3, [pc, #100]	; (8006228 <__s2b+0x8c>)
 80061c4:	4819      	ldr	r0, [pc, #100]	; (800622c <__s2b+0x90>)
 80061c6:	21ce      	movs	r1, #206	; 0xce
 80061c8:	f000 fe90 	bl	8006eec <__assert_func>
 80061cc:	0052      	lsls	r2, r2, #1
 80061ce:	3101      	adds	r1, #1
 80061d0:	e7f0      	b.n	80061b4 <__s2b+0x18>
 80061d2:	9b08      	ldr	r3, [sp, #32]
 80061d4:	6143      	str	r3, [r0, #20]
 80061d6:	2d09      	cmp	r5, #9
 80061d8:	f04f 0301 	mov.w	r3, #1
 80061dc:	6103      	str	r3, [r0, #16]
 80061de:	dd16      	ble.n	800620e <__s2b+0x72>
 80061e0:	f104 0909 	add.w	r9, r4, #9
 80061e4:	46c8      	mov	r8, r9
 80061e6:	442c      	add	r4, r5
 80061e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80061ec:	4601      	mov	r1, r0
 80061ee:	3b30      	subs	r3, #48	; 0x30
 80061f0:	220a      	movs	r2, #10
 80061f2:	4630      	mov	r0, r6
 80061f4:	f7ff ff8c 	bl	8006110 <__multadd>
 80061f8:	45a0      	cmp	r8, r4
 80061fa:	d1f5      	bne.n	80061e8 <__s2b+0x4c>
 80061fc:	f1a5 0408 	sub.w	r4, r5, #8
 8006200:	444c      	add	r4, r9
 8006202:	1b2d      	subs	r5, r5, r4
 8006204:	1963      	adds	r3, r4, r5
 8006206:	42bb      	cmp	r3, r7
 8006208:	db04      	blt.n	8006214 <__s2b+0x78>
 800620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620e:	340a      	adds	r4, #10
 8006210:	2509      	movs	r5, #9
 8006212:	e7f6      	b.n	8006202 <__s2b+0x66>
 8006214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006218:	4601      	mov	r1, r0
 800621a:	3b30      	subs	r3, #48	; 0x30
 800621c:	220a      	movs	r2, #10
 800621e:	4630      	mov	r0, r6
 8006220:	f7ff ff76 	bl	8006110 <__multadd>
 8006224:	e7ee      	b.n	8006204 <__s2b+0x68>
 8006226:	bf00      	nop
 8006228:	08007ca8 	.word	0x08007ca8
 800622c:	08007d34 	.word	0x08007d34

08006230 <__hi0bits>:
 8006230:	0c03      	lsrs	r3, r0, #16
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	b9d3      	cbnz	r3, 800626c <__hi0bits+0x3c>
 8006236:	0400      	lsls	r0, r0, #16
 8006238:	2310      	movs	r3, #16
 800623a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800623e:	bf04      	itt	eq
 8006240:	0200      	lsleq	r0, r0, #8
 8006242:	3308      	addeq	r3, #8
 8006244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006248:	bf04      	itt	eq
 800624a:	0100      	lsleq	r0, r0, #4
 800624c:	3304      	addeq	r3, #4
 800624e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006252:	bf04      	itt	eq
 8006254:	0080      	lsleq	r0, r0, #2
 8006256:	3302      	addeq	r3, #2
 8006258:	2800      	cmp	r0, #0
 800625a:	db05      	blt.n	8006268 <__hi0bits+0x38>
 800625c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006260:	f103 0301 	add.w	r3, r3, #1
 8006264:	bf08      	it	eq
 8006266:	2320      	moveq	r3, #32
 8006268:	4618      	mov	r0, r3
 800626a:	4770      	bx	lr
 800626c:	2300      	movs	r3, #0
 800626e:	e7e4      	b.n	800623a <__hi0bits+0xa>

08006270 <__lo0bits>:
 8006270:	6803      	ldr	r3, [r0, #0]
 8006272:	f013 0207 	ands.w	r2, r3, #7
 8006276:	4601      	mov	r1, r0
 8006278:	d00b      	beq.n	8006292 <__lo0bits+0x22>
 800627a:	07da      	lsls	r2, r3, #31
 800627c:	d423      	bmi.n	80062c6 <__lo0bits+0x56>
 800627e:	0798      	lsls	r0, r3, #30
 8006280:	bf49      	itett	mi
 8006282:	085b      	lsrmi	r3, r3, #1
 8006284:	089b      	lsrpl	r3, r3, #2
 8006286:	2001      	movmi	r0, #1
 8006288:	600b      	strmi	r3, [r1, #0]
 800628a:	bf5c      	itt	pl
 800628c:	600b      	strpl	r3, [r1, #0]
 800628e:	2002      	movpl	r0, #2
 8006290:	4770      	bx	lr
 8006292:	b298      	uxth	r0, r3
 8006294:	b9a8      	cbnz	r0, 80062c2 <__lo0bits+0x52>
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	2010      	movs	r0, #16
 800629a:	b2da      	uxtb	r2, r3
 800629c:	b90a      	cbnz	r2, 80062a2 <__lo0bits+0x32>
 800629e:	3008      	adds	r0, #8
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	071a      	lsls	r2, r3, #28
 80062a4:	bf04      	itt	eq
 80062a6:	091b      	lsreq	r3, r3, #4
 80062a8:	3004      	addeq	r0, #4
 80062aa:	079a      	lsls	r2, r3, #30
 80062ac:	bf04      	itt	eq
 80062ae:	089b      	lsreq	r3, r3, #2
 80062b0:	3002      	addeq	r0, #2
 80062b2:	07da      	lsls	r2, r3, #31
 80062b4:	d403      	bmi.n	80062be <__lo0bits+0x4e>
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	f100 0001 	add.w	r0, r0, #1
 80062bc:	d005      	beq.n	80062ca <__lo0bits+0x5a>
 80062be:	600b      	str	r3, [r1, #0]
 80062c0:	4770      	bx	lr
 80062c2:	4610      	mov	r0, r2
 80062c4:	e7e9      	b.n	800629a <__lo0bits+0x2a>
 80062c6:	2000      	movs	r0, #0
 80062c8:	4770      	bx	lr
 80062ca:	2020      	movs	r0, #32
 80062cc:	4770      	bx	lr
	...

080062d0 <__i2b>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	460c      	mov	r4, r1
 80062d4:	2101      	movs	r1, #1
 80062d6:	f7ff feb9 	bl	800604c <_Balloc>
 80062da:	4602      	mov	r2, r0
 80062dc:	b928      	cbnz	r0, 80062ea <__i2b+0x1a>
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <__i2b+0x24>)
 80062e0:	4805      	ldr	r0, [pc, #20]	; (80062f8 <__i2b+0x28>)
 80062e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062e6:	f000 fe01 	bl	8006eec <__assert_func>
 80062ea:	2301      	movs	r3, #1
 80062ec:	6144      	str	r4, [r0, #20]
 80062ee:	6103      	str	r3, [r0, #16]
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	bf00      	nop
 80062f4:	08007ca8 	.word	0x08007ca8
 80062f8:	08007d34 	.word	0x08007d34

080062fc <__multiply>:
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	4691      	mov	r9, r2
 8006302:	690a      	ldr	r2, [r1, #16]
 8006304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	bfb8      	it	lt
 800630c:	460b      	movlt	r3, r1
 800630e:	460c      	mov	r4, r1
 8006310:	bfbc      	itt	lt
 8006312:	464c      	movlt	r4, r9
 8006314:	4699      	movlt	r9, r3
 8006316:	6927      	ldr	r7, [r4, #16]
 8006318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	6861      	ldr	r1, [r4, #4]
 8006320:	eb07 060a 	add.w	r6, r7, sl
 8006324:	42b3      	cmp	r3, r6
 8006326:	b085      	sub	sp, #20
 8006328:	bfb8      	it	lt
 800632a:	3101      	addlt	r1, #1
 800632c:	f7ff fe8e 	bl	800604c <_Balloc>
 8006330:	b930      	cbnz	r0, 8006340 <__multiply+0x44>
 8006332:	4602      	mov	r2, r0
 8006334:	4b44      	ldr	r3, [pc, #272]	; (8006448 <__multiply+0x14c>)
 8006336:	4845      	ldr	r0, [pc, #276]	; (800644c <__multiply+0x150>)
 8006338:	f240 115d 	movw	r1, #349	; 0x15d
 800633c:	f000 fdd6 	bl	8006eec <__assert_func>
 8006340:	f100 0514 	add.w	r5, r0, #20
 8006344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006348:	462b      	mov	r3, r5
 800634a:	2200      	movs	r2, #0
 800634c:	4543      	cmp	r3, r8
 800634e:	d321      	bcc.n	8006394 <__multiply+0x98>
 8006350:	f104 0314 	add.w	r3, r4, #20
 8006354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006358:	f109 0314 	add.w	r3, r9, #20
 800635c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006360:	9202      	str	r2, [sp, #8]
 8006362:	1b3a      	subs	r2, r7, r4
 8006364:	3a15      	subs	r2, #21
 8006366:	f022 0203 	bic.w	r2, r2, #3
 800636a:	3204      	adds	r2, #4
 800636c:	f104 0115 	add.w	r1, r4, #21
 8006370:	428f      	cmp	r7, r1
 8006372:	bf38      	it	cc
 8006374:	2204      	movcc	r2, #4
 8006376:	9201      	str	r2, [sp, #4]
 8006378:	9a02      	ldr	r2, [sp, #8]
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d80c      	bhi.n	800639a <__multiply+0x9e>
 8006380:	2e00      	cmp	r6, #0
 8006382:	dd03      	ble.n	800638c <__multiply+0x90>
 8006384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006388:	2b00      	cmp	r3, #0
 800638a:	d05a      	beq.n	8006442 <__multiply+0x146>
 800638c:	6106      	str	r6, [r0, #16]
 800638e:	b005      	add	sp, #20
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	f843 2b04 	str.w	r2, [r3], #4
 8006398:	e7d8      	b.n	800634c <__multiply+0x50>
 800639a:	f8b3 a000 	ldrh.w	sl, [r3]
 800639e:	f1ba 0f00 	cmp.w	sl, #0
 80063a2:	d024      	beq.n	80063ee <__multiply+0xf2>
 80063a4:	f104 0e14 	add.w	lr, r4, #20
 80063a8:	46a9      	mov	r9, r5
 80063aa:	f04f 0c00 	mov.w	ip, #0
 80063ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063b2:	f8d9 1000 	ldr.w	r1, [r9]
 80063b6:	fa1f fb82 	uxth.w	fp, r2
 80063ba:	b289      	uxth	r1, r1
 80063bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80063c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063c4:	f8d9 2000 	ldr.w	r2, [r9]
 80063c8:	4461      	add	r1, ip
 80063ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80063d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063d6:	b289      	uxth	r1, r1
 80063d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063dc:	4577      	cmp	r7, lr
 80063de:	f849 1b04 	str.w	r1, [r9], #4
 80063e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063e6:	d8e2      	bhi.n	80063ae <__multiply+0xb2>
 80063e8:	9a01      	ldr	r2, [sp, #4]
 80063ea:	f845 c002 	str.w	ip, [r5, r2]
 80063ee:	9a03      	ldr	r2, [sp, #12]
 80063f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063f4:	3304      	adds	r3, #4
 80063f6:	f1b9 0f00 	cmp.w	r9, #0
 80063fa:	d020      	beq.n	800643e <__multiply+0x142>
 80063fc:	6829      	ldr	r1, [r5, #0]
 80063fe:	f104 0c14 	add.w	ip, r4, #20
 8006402:	46ae      	mov	lr, r5
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	f8bc b000 	ldrh.w	fp, [ip]
 800640c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006410:	fb09 220b 	mla	r2, r9, fp, r2
 8006414:	4492      	add	sl, r2
 8006416:	b289      	uxth	r1, r1
 8006418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800641c:	f84e 1b04 	str.w	r1, [lr], #4
 8006420:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006424:	f8be 1000 	ldrh.w	r1, [lr]
 8006428:	0c12      	lsrs	r2, r2, #16
 800642a:	fb09 1102 	mla	r1, r9, r2, r1
 800642e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006432:	4567      	cmp	r7, ip
 8006434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006438:	d8e6      	bhi.n	8006408 <__multiply+0x10c>
 800643a:	9a01      	ldr	r2, [sp, #4]
 800643c:	50a9      	str	r1, [r5, r2]
 800643e:	3504      	adds	r5, #4
 8006440:	e79a      	b.n	8006378 <__multiply+0x7c>
 8006442:	3e01      	subs	r6, #1
 8006444:	e79c      	b.n	8006380 <__multiply+0x84>
 8006446:	bf00      	nop
 8006448:	08007ca8 	.word	0x08007ca8
 800644c:	08007d34 	.word	0x08007d34

08006450 <__pow5mult>:
 8006450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006454:	4615      	mov	r5, r2
 8006456:	f012 0203 	ands.w	r2, r2, #3
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	d007      	beq.n	8006470 <__pow5mult+0x20>
 8006460:	4c25      	ldr	r4, [pc, #148]	; (80064f8 <__pow5mult+0xa8>)
 8006462:	3a01      	subs	r2, #1
 8006464:	2300      	movs	r3, #0
 8006466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800646a:	f7ff fe51 	bl	8006110 <__multadd>
 800646e:	4607      	mov	r7, r0
 8006470:	10ad      	asrs	r5, r5, #2
 8006472:	d03d      	beq.n	80064f0 <__pow5mult+0xa0>
 8006474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006476:	b97c      	cbnz	r4, 8006498 <__pow5mult+0x48>
 8006478:	2010      	movs	r0, #16
 800647a:	f7ff fdbf 	bl	8005ffc <malloc>
 800647e:	4602      	mov	r2, r0
 8006480:	6270      	str	r0, [r6, #36]	; 0x24
 8006482:	b928      	cbnz	r0, 8006490 <__pow5mult+0x40>
 8006484:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <__pow5mult+0xac>)
 8006486:	481e      	ldr	r0, [pc, #120]	; (8006500 <__pow5mult+0xb0>)
 8006488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800648c:	f000 fd2e 	bl	8006eec <__assert_func>
 8006490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006494:	6004      	str	r4, [r0, #0]
 8006496:	60c4      	str	r4, [r0, #12]
 8006498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800649c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064a0:	b94c      	cbnz	r4, 80064b6 <__pow5mult+0x66>
 80064a2:	f240 2171 	movw	r1, #625	; 0x271
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ff12 	bl	80062d0 <__i2b>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80064b2:	4604      	mov	r4, r0
 80064b4:	6003      	str	r3, [r0, #0]
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	07eb      	lsls	r3, r5, #31
 80064bc:	d50a      	bpl.n	80064d4 <__pow5mult+0x84>
 80064be:	4639      	mov	r1, r7
 80064c0:	4622      	mov	r2, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ff1a 	bl	80062fc <__multiply>
 80064c8:	4639      	mov	r1, r7
 80064ca:	4680      	mov	r8, r0
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7ff fdfd 	bl	80060cc <_Bfree>
 80064d2:	4647      	mov	r7, r8
 80064d4:	106d      	asrs	r5, r5, #1
 80064d6:	d00b      	beq.n	80064f0 <__pow5mult+0xa0>
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	b938      	cbnz	r0, 80064ec <__pow5mult+0x9c>
 80064dc:	4622      	mov	r2, r4
 80064de:	4621      	mov	r1, r4
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff ff0b 	bl	80062fc <__multiply>
 80064e6:	6020      	str	r0, [r4, #0]
 80064e8:	f8c0 9000 	str.w	r9, [r0]
 80064ec:	4604      	mov	r4, r0
 80064ee:	e7e4      	b.n	80064ba <__pow5mult+0x6a>
 80064f0:	4638      	mov	r0, r7
 80064f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f6:	bf00      	nop
 80064f8:	08007e80 	.word	0x08007e80
 80064fc:	08007c36 	.word	0x08007c36
 8006500:	08007d34 	.word	0x08007d34

08006504 <__lshift>:
 8006504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	460c      	mov	r4, r1
 800650a:	6849      	ldr	r1, [r1, #4]
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	4607      	mov	r7, r0
 8006516:	4691      	mov	r9, r2
 8006518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800651c:	f108 0601 	add.w	r6, r8, #1
 8006520:	42b3      	cmp	r3, r6
 8006522:	db0b      	blt.n	800653c <__lshift+0x38>
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff fd91 	bl	800604c <_Balloc>
 800652a:	4605      	mov	r5, r0
 800652c:	b948      	cbnz	r0, 8006542 <__lshift+0x3e>
 800652e:	4602      	mov	r2, r0
 8006530:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <__lshift+0xd8>)
 8006532:	482b      	ldr	r0, [pc, #172]	; (80065e0 <__lshift+0xdc>)
 8006534:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006538:	f000 fcd8 	bl	8006eec <__assert_func>
 800653c:	3101      	adds	r1, #1
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	e7ee      	b.n	8006520 <__lshift+0x1c>
 8006542:	2300      	movs	r3, #0
 8006544:	f100 0114 	add.w	r1, r0, #20
 8006548:	f100 0210 	add.w	r2, r0, #16
 800654c:	4618      	mov	r0, r3
 800654e:	4553      	cmp	r3, sl
 8006550:	db37      	blt.n	80065c2 <__lshift+0xbe>
 8006552:	6920      	ldr	r0, [r4, #16]
 8006554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006558:	f104 0314 	add.w	r3, r4, #20
 800655c:	f019 091f 	ands.w	r9, r9, #31
 8006560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006568:	d02f      	beq.n	80065ca <__lshift+0xc6>
 800656a:	f1c9 0e20 	rsb	lr, r9, #32
 800656e:	468a      	mov	sl, r1
 8006570:	f04f 0c00 	mov.w	ip, #0
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	fa02 f209 	lsl.w	r2, r2, r9
 800657a:	ea42 020c 	orr.w	r2, r2, ip
 800657e:	f84a 2b04 	str.w	r2, [sl], #4
 8006582:	f853 2b04 	ldr.w	r2, [r3], #4
 8006586:	4298      	cmp	r0, r3
 8006588:	fa22 fc0e 	lsr.w	ip, r2, lr
 800658c:	d8f2      	bhi.n	8006574 <__lshift+0x70>
 800658e:	1b03      	subs	r3, r0, r4
 8006590:	3b15      	subs	r3, #21
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	3304      	adds	r3, #4
 8006598:	f104 0215 	add.w	r2, r4, #21
 800659c:	4290      	cmp	r0, r2
 800659e:	bf38      	it	cc
 80065a0:	2304      	movcc	r3, #4
 80065a2:	f841 c003 	str.w	ip, [r1, r3]
 80065a6:	f1bc 0f00 	cmp.w	ip, #0
 80065aa:	d001      	beq.n	80065b0 <__lshift+0xac>
 80065ac:	f108 0602 	add.w	r6, r8, #2
 80065b0:	3e01      	subs	r6, #1
 80065b2:	4638      	mov	r0, r7
 80065b4:	612e      	str	r6, [r5, #16]
 80065b6:	4621      	mov	r1, r4
 80065b8:	f7ff fd88 	bl	80060cc <_Bfree>
 80065bc:	4628      	mov	r0, r5
 80065be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80065c6:	3301      	adds	r3, #1
 80065c8:	e7c1      	b.n	800654e <__lshift+0x4a>
 80065ca:	3904      	subs	r1, #4
 80065cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80065d4:	4298      	cmp	r0, r3
 80065d6:	d8f9      	bhi.n	80065cc <__lshift+0xc8>
 80065d8:	e7ea      	b.n	80065b0 <__lshift+0xac>
 80065da:	bf00      	nop
 80065dc:	08007ca8 	.word	0x08007ca8
 80065e0:	08007d34 	.word	0x08007d34

080065e4 <__mcmp>:
 80065e4:	b530      	push	{r4, r5, lr}
 80065e6:	6902      	ldr	r2, [r0, #16]
 80065e8:	690c      	ldr	r4, [r1, #16]
 80065ea:	1b12      	subs	r2, r2, r4
 80065ec:	d10e      	bne.n	800660c <__mcmp+0x28>
 80065ee:	f100 0314 	add.w	r3, r0, #20
 80065f2:	3114      	adds	r1, #20
 80065f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80065f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006604:	42a5      	cmp	r5, r4
 8006606:	d003      	beq.n	8006610 <__mcmp+0x2c>
 8006608:	d305      	bcc.n	8006616 <__mcmp+0x32>
 800660a:	2201      	movs	r2, #1
 800660c:	4610      	mov	r0, r2
 800660e:	bd30      	pop	{r4, r5, pc}
 8006610:	4283      	cmp	r3, r0
 8006612:	d3f3      	bcc.n	80065fc <__mcmp+0x18>
 8006614:	e7fa      	b.n	800660c <__mcmp+0x28>
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	e7f7      	b.n	800660c <__mcmp+0x28>

0800661c <__mdiff>:
 800661c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	460c      	mov	r4, r1
 8006622:	4606      	mov	r6, r0
 8006624:	4611      	mov	r1, r2
 8006626:	4620      	mov	r0, r4
 8006628:	4690      	mov	r8, r2
 800662a:	f7ff ffdb 	bl	80065e4 <__mcmp>
 800662e:	1e05      	subs	r5, r0, #0
 8006630:	d110      	bne.n	8006654 <__mdiff+0x38>
 8006632:	4629      	mov	r1, r5
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff fd09 	bl	800604c <_Balloc>
 800663a:	b930      	cbnz	r0, 800664a <__mdiff+0x2e>
 800663c:	4b3a      	ldr	r3, [pc, #232]	; (8006728 <__mdiff+0x10c>)
 800663e:	4602      	mov	r2, r0
 8006640:	f240 2132 	movw	r1, #562	; 0x232
 8006644:	4839      	ldr	r0, [pc, #228]	; (800672c <__mdiff+0x110>)
 8006646:	f000 fc51 	bl	8006eec <__assert_func>
 800664a:	2301      	movs	r3, #1
 800664c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006654:	bfa4      	itt	ge
 8006656:	4643      	movge	r3, r8
 8006658:	46a0      	movge	r8, r4
 800665a:	4630      	mov	r0, r6
 800665c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006660:	bfa6      	itte	ge
 8006662:	461c      	movge	r4, r3
 8006664:	2500      	movge	r5, #0
 8006666:	2501      	movlt	r5, #1
 8006668:	f7ff fcf0 	bl	800604c <_Balloc>
 800666c:	b920      	cbnz	r0, 8006678 <__mdiff+0x5c>
 800666e:	4b2e      	ldr	r3, [pc, #184]	; (8006728 <__mdiff+0x10c>)
 8006670:	4602      	mov	r2, r0
 8006672:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006676:	e7e5      	b.n	8006644 <__mdiff+0x28>
 8006678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800667c:	6926      	ldr	r6, [r4, #16]
 800667e:	60c5      	str	r5, [r0, #12]
 8006680:	f104 0914 	add.w	r9, r4, #20
 8006684:	f108 0514 	add.w	r5, r8, #20
 8006688:	f100 0e14 	add.w	lr, r0, #20
 800668c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006694:	f108 0210 	add.w	r2, r8, #16
 8006698:	46f2      	mov	sl, lr
 800669a:	2100      	movs	r1, #0
 800669c:	f859 3b04 	ldr.w	r3, [r9], #4
 80066a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066a4:	fa1f f883 	uxth.w	r8, r3
 80066a8:	fa11 f18b 	uxtah	r1, r1, fp
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	eba1 0808 	sub.w	r8, r1, r8
 80066b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066ba:	fa1f f888 	uxth.w	r8, r8
 80066be:	1419      	asrs	r1, r3, #16
 80066c0:	454e      	cmp	r6, r9
 80066c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066c6:	f84a 3b04 	str.w	r3, [sl], #4
 80066ca:	d8e7      	bhi.n	800669c <__mdiff+0x80>
 80066cc:	1b33      	subs	r3, r6, r4
 80066ce:	3b15      	subs	r3, #21
 80066d0:	f023 0303 	bic.w	r3, r3, #3
 80066d4:	3304      	adds	r3, #4
 80066d6:	3415      	adds	r4, #21
 80066d8:	42a6      	cmp	r6, r4
 80066da:	bf38      	it	cc
 80066dc:	2304      	movcc	r3, #4
 80066de:	441d      	add	r5, r3
 80066e0:	4473      	add	r3, lr
 80066e2:	469e      	mov	lr, r3
 80066e4:	462e      	mov	r6, r5
 80066e6:	4566      	cmp	r6, ip
 80066e8:	d30e      	bcc.n	8006708 <__mdiff+0xec>
 80066ea:	f10c 0203 	add.w	r2, ip, #3
 80066ee:	1b52      	subs	r2, r2, r5
 80066f0:	f022 0203 	bic.w	r2, r2, #3
 80066f4:	3d03      	subs	r5, #3
 80066f6:	45ac      	cmp	ip, r5
 80066f8:	bf38      	it	cc
 80066fa:	2200      	movcc	r2, #0
 80066fc:	441a      	add	r2, r3
 80066fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006702:	b17b      	cbz	r3, 8006724 <__mdiff+0x108>
 8006704:	6107      	str	r7, [r0, #16]
 8006706:	e7a3      	b.n	8006650 <__mdiff+0x34>
 8006708:	f856 8b04 	ldr.w	r8, [r6], #4
 800670c:	fa11 f288 	uxtah	r2, r1, r8
 8006710:	1414      	asrs	r4, r2, #16
 8006712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006716:	b292      	uxth	r2, r2
 8006718:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800671c:	f84e 2b04 	str.w	r2, [lr], #4
 8006720:	1421      	asrs	r1, r4, #16
 8006722:	e7e0      	b.n	80066e6 <__mdiff+0xca>
 8006724:	3f01      	subs	r7, #1
 8006726:	e7ea      	b.n	80066fe <__mdiff+0xe2>
 8006728:	08007ca8 	.word	0x08007ca8
 800672c:	08007d34 	.word	0x08007d34

08006730 <__ulp>:
 8006730:	b082      	sub	sp, #8
 8006732:	ed8d 0b00 	vstr	d0, [sp]
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	4912      	ldr	r1, [pc, #72]	; (8006784 <__ulp+0x54>)
 800673a:	4019      	ands	r1, r3
 800673c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006740:	2900      	cmp	r1, #0
 8006742:	dd05      	ble.n	8006750 <__ulp+0x20>
 8006744:	2200      	movs	r2, #0
 8006746:	460b      	mov	r3, r1
 8006748:	ec43 2b10 	vmov	d0, r2, r3
 800674c:	b002      	add	sp, #8
 800674e:	4770      	bx	lr
 8006750:	4249      	negs	r1, r1
 8006752:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006756:	ea4f 5021 	mov.w	r0, r1, asr #20
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	da04      	bge.n	800676e <__ulp+0x3e>
 8006764:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006768:	fa41 f300 	asr.w	r3, r1, r0
 800676c:	e7ec      	b.n	8006748 <__ulp+0x18>
 800676e:	f1a0 0114 	sub.w	r1, r0, #20
 8006772:	291e      	cmp	r1, #30
 8006774:	bfda      	itte	le
 8006776:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800677a:	fa20 f101 	lsrle.w	r1, r0, r1
 800677e:	2101      	movgt	r1, #1
 8006780:	460a      	mov	r2, r1
 8006782:	e7e1      	b.n	8006748 <__ulp+0x18>
 8006784:	7ff00000 	.word	0x7ff00000

08006788 <__b2d>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	6905      	ldr	r5, [r0, #16]
 800678c:	f100 0714 	add.w	r7, r0, #20
 8006790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006794:	1f2e      	subs	r6, r5, #4
 8006796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff fd48 	bl	8006230 <__hi0bits>
 80067a0:	f1c0 0320 	rsb	r3, r0, #32
 80067a4:	280a      	cmp	r0, #10
 80067a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006824 <__b2d+0x9c>
 80067aa:	600b      	str	r3, [r1, #0]
 80067ac:	dc14      	bgt.n	80067d8 <__b2d+0x50>
 80067ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80067b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80067b6:	42b7      	cmp	r7, r6
 80067b8:	ea41 030c 	orr.w	r3, r1, ip
 80067bc:	bf34      	ite	cc
 80067be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80067c2:	2100      	movcs	r1, #0
 80067c4:	3015      	adds	r0, #21
 80067c6:	fa04 f000 	lsl.w	r0, r4, r0
 80067ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80067ce:	ea40 0201 	orr.w	r2, r0, r1
 80067d2:	ec43 2b10 	vmov	d0, r2, r3
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	42b7      	cmp	r7, r6
 80067da:	bf3a      	itte	cc
 80067dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80067e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80067e4:	2100      	movcs	r1, #0
 80067e6:	380b      	subs	r0, #11
 80067e8:	d017      	beq.n	800681a <__b2d+0x92>
 80067ea:	f1c0 0c20 	rsb	ip, r0, #32
 80067ee:	fa04 f500 	lsl.w	r5, r4, r0
 80067f2:	42be      	cmp	r6, r7
 80067f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80067f8:	ea45 0504 	orr.w	r5, r5, r4
 80067fc:	bf8c      	ite	hi
 80067fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006802:	2400      	movls	r4, #0
 8006804:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006808:	fa01 f000 	lsl.w	r0, r1, r0
 800680c:	fa24 f40c 	lsr.w	r4, r4, ip
 8006810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006814:	ea40 0204 	orr.w	r2, r0, r4
 8006818:	e7db      	b.n	80067d2 <__b2d+0x4a>
 800681a:	ea44 030c 	orr.w	r3, r4, ip
 800681e:	460a      	mov	r2, r1
 8006820:	e7d7      	b.n	80067d2 <__b2d+0x4a>
 8006822:	bf00      	nop
 8006824:	3ff00000 	.word	0x3ff00000

08006828 <__d2b>:
 8006828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800682c:	4689      	mov	r9, r1
 800682e:	2101      	movs	r1, #1
 8006830:	ec57 6b10 	vmov	r6, r7, d0
 8006834:	4690      	mov	r8, r2
 8006836:	f7ff fc09 	bl	800604c <_Balloc>
 800683a:	4604      	mov	r4, r0
 800683c:	b930      	cbnz	r0, 800684c <__d2b+0x24>
 800683e:	4602      	mov	r2, r0
 8006840:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <__d2b+0xb0>)
 8006842:	4826      	ldr	r0, [pc, #152]	; (80068dc <__d2b+0xb4>)
 8006844:	f240 310a 	movw	r1, #778	; 0x30a
 8006848:	f000 fb50 	bl	8006eec <__assert_func>
 800684c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006854:	bb35      	cbnz	r5, 80068a4 <__d2b+0x7c>
 8006856:	2e00      	cmp	r6, #0
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	d028      	beq.n	80068ae <__d2b+0x86>
 800685c:	4668      	mov	r0, sp
 800685e:	9600      	str	r6, [sp, #0]
 8006860:	f7ff fd06 	bl	8006270 <__lo0bits>
 8006864:	9900      	ldr	r1, [sp, #0]
 8006866:	b300      	cbz	r0, 80068aa <__d2b+0x82>
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	f1c0 0320 	rsb	r3, r0, #32
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	430b      	orrs	r3, r1
 8006874:	40c2      	lsrs	r2, r0
 8006876:	6163      	str	r3, [r4, #20]
 8006878:	9201      	str	r2, [sp, #4]
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	61a3      	str	r3, [r4, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2202      	movne	r2, #2
 8006884:	2201      	moveq	r2, #1
 8006886:	6122      	str	r2, [r4, #16]
 8006888:	b1d5      	cbz	r5, 80068c0 <__d2b+0x98>
 800688a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800688e:	4405      	add	r5, r0
 8006890:	f8c9 5000 	str.w	r5, [r9]
 8006894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006898:	f8c8 0000 	str.w	r0, [r8]
 800689c:	4620      	mov	r0, r4
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a8:	e7d5      	b.n	8006856 <__d2b+0x2e>
 80068aa:	6161      	str	r1, [r4, #20]
 80068ac:	e7e5      	b.n	800687a <__d2b+0x52>
 80068ae:	a801      	add	r0, sp, #4
 80068b0:	f7ff fcde 	bl	8006270 <__lo0bits>
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	6163      	str	r3, [r4, #20]
 80068b8:	2201      	movs	r2, #1
 80068ba:	6122      	str	r2, [r4, #16]
 80068bc:	3020      	adds	r0, #32
 80068be:	e7e3      	b.n	8006888 <__d2b+0x60>
 80068c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068c8:	f8c9 0000 	str.w	r0, [r9]
 80068cc:	6918      	ldr	r0, [r3, #16]
 80068ce:	f7ff fcaf 	bl	8006230 <__hi0bits>
 80068d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068d6:	e7df      	b.n	8006898 <__d2b+0x70>
 80068d8:	08007ca8 	.word	0x08007ca8
 80068dc:	08007d34 	.word	0x08007d34

080068e0 <__ratio>:
 80068e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	4688      	mov	r8, r1
 80068e6:	4669      	mov	r1, sp
 80068e8:	4681      	mov	r9, r0
 80068ea:	f7ff ff4d 	bl	8006788 <__b2d>
 80068ee:	a901      	add	r1, sp, #4
 80068f0:	4640      	mov	r0, r8
 80068f2:	ec55 4b10 	vmov	r4, r5, d0
 80068f6:	f7ff ff47 	bl	8006788 <__b2d>
 80068fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006902:	eba3 0c02 	sub.w	ip, r3, r2
 8006906:	e9dd 3200 	ldrd	r3, r2, [sp]
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006910:	ec51 0b10 	vmov	r0, r1, d0
 8006914:	2b00      	cmp	r3, #0
 8006916:	bfd6      	itet	le
 8006918:	460a      	movle	r2, r1
 800691a:	462a      	movgt	r2, r5
 800691c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006920:	468b      	mov	fp, r1
 8006922:	462f      	mov	r7, r5
 8006924:	bfd4      	ite	le
 8006926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800692a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800692e:	4620      	mov	r0, r4
 8006930:	ee10 2a10 	vmov	r2, s0
 8006934:	465b      	mov	r3, fp
 8006936:	4639      	mov	r1, r7
 8006938:	f7f9 ff90 	bl	800085c <__aeabi_ddiv>
 800693c:	ec41 0b10 	vmov	d0, r0, r1
 8006940:	b003      	add	sp, #12
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006946 <__copybits>:
 8006946:	3901      	subs	r1, #1
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	1149      	asrs	r1, r1, #5
 800694c:	6914      	ldr	r4, [r2, #16]
 800694e:	3101      	adds	r1, #1
 8006950:	f102 0314 	add.w	r3, r2, #20
 8006954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800695c:	1f05      	subs	r5, r0, #4
 800695e:	42a3      	cmp	r3, r4
 8006960:	d30c      	bcc.n	800697c <__copybits+0x36>
 8006962:	1aa3      	subs	r3, r4, r2
 8006964:	3b11      	subs	r3, #17
 8006966:	f023 0303 	bic.w	r3, r3, #3
 800696a:	3211      	adds	r2, #17
 800696c:	42a2      	cmp	r2, r4
 800696e:	bf88      	it	hi
 8006970:	2300      	movhi	r3, #0
 8006972:	4418      	add	r0, r3
 8006974:	2300      	movs	r3, #0
 8006976:	4288      	cmp	r0, r1
 8006978:	d305      	bcc.n	8006986 <__copybits+0x40>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006980:	f845 6f04 	str.w	r6, [r5, #4]!
 8006984:	e7eb      	b.n	800695e <__copybits+0x18>
 8006986:	f840 3b04 	str.w	r3, [r0], #4
 800698a:	e7f4      	b.n	8006976 <__copybits+0x30>

0800698c <__any_on>:
 800698c:	f100 0214 	add.w	r2, r0, #20
 8006990:	6900      	ldr	r0, [r0, #16]
 8006992:	114b      	asrs	r3, r1, #5
 8006994:	4298      	cmp	r0, r3
 8006996:	b510      	push	{r4, lr}
 8006998:	db11      	blt.n	80069be <__any_on+0x32>
 800699a:	dd0a      	ble.n	80069b2 <__any_on+0x26>
 800699c:	f011 011f 	ands.w	r1, r1, #31
 80069a0:	d007      	beq.n	80069b2 <__any_on+0x26>
 80069a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069a6:	fa24 f001 	lsr.w	r0, r4, r1
 80069aa:	fa00 f101 	lsl.w	r1, r0, r1
 80069ae:	428c      	cmp	r4, r1
 80069b0:	d10b      	bne.n	80069ca <__any_on+0x3e>
 80069b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d803      	bhi.n	80069c2 <__any_on+0x36>
 80069ba:	2000      	movs	r0, #0
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	4603      	mov	r3, r0
 80069c0:	e7f7      	b.n	80069b2 <__any_on+0x26>
 80069c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d0f5      	beq.n	80069b6 <__any_on+0x2a>
 80069ca:	2001      	movs	r0, #1
 80069cc:	e7f6      	b.n	80069bc <__any_on+0x30>

080069ce <_calloc_r>:
 80069ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069d0:	fba1 2402 	umull	r2, r4, r1, r2
 80069d4:	b94c      	cbnz	r4, 80069ea <_calloc_r+0x1c>
 80069d6:	4611      	mov	r1, r2
 80069d8:	9201      	str	r2, [sp, #4]
 80069da:	f000 f87b 	bl	8006ad4 <_malloc_r>
 80069de:	9a01      	ldr	r2, [sp, #4]
 80069e0:	4605      	mov	r5, r0
 80069e2:	b930      	cbnz	r0, 80069f2 <_calloc_r+0x24>
 80069e4:	4628      	mov	r0, r5
 80069e6:	b003      	add	sp, #12
 80069e8:	bd30      	pop	{r4, r5, pc}
 80069ea:	220c      	movs	r2, #12
 80069ec:	6002      	str	r2, [r0, #0]
 80069ee:	2500      	movs	r5, #0
 80069f0:	e7f8      	b.n	80069e4 <_calloc_r+0x16>
 80069f2:	4621      	mov	r1, r4
 80069f4:	f7fc fbc0 	bl	8003178 <memset>
 80069f8:	e7f4      	b.n	80069e4 <_calloc_r+0x16>
	...

080069fc <_free_r>:
 80069fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d044      	beq.n	8006a8c <_free_r+0x90>
 8006a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a06:	9001      	str	r0, [sp, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a0e:	bfb8      	it	lt
 8006a10:	18e4      	addlt	r4, r4, r3
 8006a12:	f000 fab5 	bl	8006f80 <__malloc_lock>
 8006a16:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <_free_r+0x94>)
 8006a18:	9801      	ldr	r0, [sp, #4]
 8006a1a:	6813      	ldr	r3, [r2, #0]
 8006a1c:	b933      	cbnz	r3, 8006a2c <_free_r+0x30>
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	b003      	add	sp, #12
 8006a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a28:	f000 bab0 	b.w	8006f8c <__malloc_unlock>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d908      	bls.n	8006a42 <_free_r+0x46>
 8006a30:	6825      	ldr	r5, [r4, #0]
 8006a32:	1961      	adds	r1, r4, r5
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1949      	addeq	r1, r1, r5
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	e7ed      	b.n	8006a1e <_free_r+0x22>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x50>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x46>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1855      	adds	r5, r2, r1
 8006a50:	42a5      	cmp	r5, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x70>
 8006a54:	6824      	ldr	r4, [r4, #0]
 8006a56:	4421      	add	r1, r4
 8006a58:	1854      	adds	r4, r2, r1
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1e0      	bne.n	8006a22 <_free_r+0x26>
 8006a60:	681c      	ldr	r4, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	6053      	str	r3, [r2, #4]
 8006a66:	4421      	add	r1, r4
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	e7da      	b.n	8006a22 <_free_r+0x26>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x78>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	e7d6      	b.n	8006a22 <_free_r+0x26>
 8006a74:	6825      	ldr	r5, [r4, #0]
 8006a76:	1961      	adds	r1, r4, r5
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf04      	itt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	bf04      	itt	eq
 8006a84:	1949      	addeq	r1, r1, r5
 8006a86:	6021      	streq	r1, [r4, #0]
 8006a88:	6054      	str	r4, [r2, #4]
 8006a8a:	e7ca      	b.n	8006a22 <_free_r+0x26>
 8006a8c:	b003      	add	sp, #12
 8006a8e:	bd30      	pop	{r4, r5, pc}
 8006a90:	20000300 	.word	0x20000300

08006a94 <sbrk_aligned>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4e0e      	ldr	r6, [pc, #56]	; (8006ad0 <sbrk_aligned+0x3c>)
 8006a98:	460c      	mov	r4, r1
 8006a9a:	6831      	ldr	r1, [r6, #0]
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	b911      	cbnz	r1, 8006aa6 <sbrk_aligned+0x12>
 8006aa0:	f000 f9f2 	bl	8006e88 <_sbrk_r>
 8006aa4:	6030      	str	r0, [r6, #0]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 f9ed 	bl	8006e88 <_sbrk_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d00a      	beq.n	8006ac8 <sbrk_aligned+0x34>
 8006ab2:	1cc4      	adds	r4, r0, #3
 8006ab4:	f024 0403 	bic.w	r4, r4, #3
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d007      	beq.n	8006acc <sbrk_aligned+0x38>
 8006abc:	1a21      	subs	r1, r4, r0
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 f9e2 	bl	8006e88 <_sbrk_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d101      	bne.n	8006acc <sbrk_aligned+0x38>
 8006ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8006acc:	4620      	mov	r0, r4
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	20000304 	.word	0x20000304

08006ad4 <_malloc_r>:
 8006ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad8:	1ccd      	adds	r5, r1, #3
 8006ada:	f025 0503 	bic.w	r5, r5, #3
 8006ade:	3508      	adds	r5, #8
 8006ae0:	2d0c      	cmp	r5, #12
 8006ae2:	bf38      	it	cc
 8006ae4:	250c      	movcc	r5, #12
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	4607      	mov	r7, r0
 8006aea:	db01      	blt.n	8006af0 <_malloc_r+0x1c>
 8006aec:	42a9      	cmp	r1, r5
 8006aee:	d905      	bls.n	8006afc <_malloc_r+0x28>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	2600      	movs	r6, #0
 8006af6:	4630      	mov	r0, r6
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	4e2e      	ldr	r6, [pc, #184]	; (8006bb8 <_malloc_r+0xe4>)
 8006afe:	f000 fa3f 	bl	8006f80 <__malloc_lock>
 8006b02:	6833      	ldr	r3, [r6, #0]
 8006b04:	461c      	mov	r4, r3
 8006b06:	bb34      	cbnz	r4, 8006b56 <_malloc_r+0x82>
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f7ff ffc2 	bl	8006a94 <sbrk_aligned>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	4604      	mov	r4, r0
 8006b14:	d14d      	bne.n	8006bb2 <_malloc_r+0xde>
 8006b16:	6834      	ldr	r4, [r6, #0]
 8006b18:	4626      	mov	r6, r4
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d140      	bne.n	8006ba0 <_malloc_r+0xcc>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	4631      	mov	r1, r6
 8006b22:	4638      	mov	r0, r7
 8006b24:	eb04 0803 	add.w	r8, r4, r3
 8006b28:	f000 f9ae 	bl	8006e88 <_sbrk_r>
 8006b2c:	4580      	cmp	r8, r0
 8006b2e:	d13a      	bne.n	8006ba6 <_malloc_r+0xd2>
 8006b30:	6821      	ldr	r1, [r4, #0]
 8006b32:	3503      	adds	r5, #3
 8006b34:	1a6d      	subs	r5, r5, r1
 8006b36:	f025 0503 	bic.w	r5, r5, #3
 8006b3a:	3508      	adds	r5, #8
 8006b3c:	2d0c      	cmp	r5, #12
 8006b3e:	bf38      	it	cc
 8006b40:	250c      	movcc	r5, #12
 8006b42:	4629      	mov	r1, r5
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ffa5 	bl	8006a94 <sbrk_aligned>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d02b      	beq.n	8006ba6 <_malloc_r+0xd2>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	442b      	add	r3, r5
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	e00e      	b.n	8006b74 <_malloc_r+0xa0>
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	1b52      	subs	r2, r2, r5
 8006b5a:	d41e      	bmi.n	8006b9a <_malloc_r+0xc6>
 8006b5c:	2a0b      	cmp	r2, #11
 8006b5e:	d916      	bls.n	8006b8e <_malloc_r+0xba>
 8006b60:	1961      	adds	r1, r4, r5
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	6025      	str	r5, [r4, #0]
 8006b66:	bf18      	it	ne
 8006b68:	6059      	strne	r1, [r3, #4]
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	bf08      	it	eq
 8006b6e:	6031      	streq	r1, [r6, #0]
 8006b70:	5162      	str	r2, [r4, r5]
 8006b72:	604b      	str	r3, [r1, #4]
 8006b74:	4638      	mov	r0, r7
 8006b76:	f104 060b 	add.w	r6, r4, #11
 8006b7a:	f000 fa07 	bl	8006f8c <__malloc_unlock>
 8006b7e:	f026 0607 	bic.w	r6, r6, #7
 8006b82:	1d23      	adds	r3, r4, #4
 8006b84:	1af2      	subs	r2, r6, r3
 8006b86:	d0b6      	beq.n	8006af6 <_malloc_r+0x22>
 8006b88:	1b9b      	subs	r3, r3, r6
 8006b8a:	50a3      	str	r3, [r4, r2]
 8006b8c:	e7b3      	b.n	8006af6 <_malloc_r+0x22>
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	bf0c      	ite	eq
 8006b94:	6032      	streq	r2, [r6, #0]
 8006b96:	605a      	strne	r2, [r3, #4]
 8006b98:	e7ec      	b.n	8006b74 <_malloc_r+0xa0>
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	6864      	ldr	r4, [r4, #4]
 8006b9e:	e7b2      	b.n	8006b06 <_malloc_r+0x32>
 8006ba0:	4634      	mov	r4, r6
 8006ba2:	6876      	ldr	r6, [r6, #4]
 8006ba4:	e7b9      	b.n	8006b1a <_malloc_r+0x46>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4638      	mov	r0, r7
 8006bac:	f000 f9ee 	bl	8006f8c <__malloc_unlock>
 8006bb0:	e7a1      	b.n	8006af6 <_malloc_r+0x22>
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	e7de      	b.n	8006b74 <_malloc_r+0xa0>
 8006bb6:	bf00      	nop
 8006bb8:	20000300 	.word	0x20000300

08006bbc <__ssputs_r>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	688e      	ldr	r6, [r1, #8]
 8006bc2:	429e      	cmp	r6, r3
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4690      	mov	r8, r2
 8006bca:	461f      	mov	r7, r3
 8006bcc:	d838      	bhi.n	8006c40 <__ssputs_r+0x84>
 8006bce:	898a      	ldrh	r2, [r1, #12]
 8006bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bd4:	d032      	beq.n	8006c3c <__ssputs_r+0x80>
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	6909      	ldr	r1, [r1, #16]
 8006bda:	eba5 0901 	sub.w	r9, r5, r1
 8006bde:	6965      	ldr	r5, [r4, #20]
 8006be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006be8:	3301      	adds	r3, #1
 8006bea:	444b      	add	r3, r9
 8006bec:	106d      	asrs	r5, r5, #1
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	bf38      	it	cc
 8006bf2:	461d      	movcc	r5, r3
 8006bf4:	0553      	lsls	r3, r2, #21
 8006bf6:	d531      	bpl.n	8006c5c <__ssputs_r+0xa0>
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	f7ff ff6b 	bl	8006ad4 <_malloc_r>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	b950      	cbnz	r0, 8006c18 <__ssputs_r+0x5c>
 8006c02:	230c      	movs	r3, #12
 8006c04:	f8ca 3000 	str.w	r3, [sl]
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	6921      	ldr	r1, [r4, #16]
 8006c1a:	464a      	mov	r2, r9
 8006c1c:	f7ff fa08 	bl	8006030 <memcpy>
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	6126      	str	r6, [r4, #16]
 8006c2e:	6165      	str	r5, [r4, #20]
 8006c30:	444e      	add	r6, r9
 8006c32:	eba5 0509 	sub.w	r5, r5, r9
 8006c36:	6026      	str	r6, [r4, #0]
 8006c38:	60a5      	str	r5, [r4, #8]
 8006c3a:	463e      	mov	r6, r7
 8006c3c:	42be      	cmp	r6, r7
 8006c3e:	d900      	bls.n	8006c42 <__ssputs_r+0x86>
 8006c40:	463e      	mov	r6, r7
 8006c42:	6820      	ldr	r0, [r4, #0]
 8006c44:	4632      	mov	r2, r6
 8006c46:	4641      	mov	r1, r8
 8006c48:	f000 f980 	bl	8006f4c <memmove>
 8006c4c:	68a3      	ldr	r3, [r4, #8]
 8006c4e:	1b9b      	subs	r3, r3, r6
 8006c50:	60a3      	str	r3, [r4, #8]
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	4433      	add	r3, r6
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	e7db      	b.n	8006c14 <__ssputs_r+0x58>
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	f000 f99b 	bl	8006f98 <_realloc_r>
 8006c62:	4606      	mov	r6, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d1e1      	bne.n	8006c2c <__ssputs_r+0x70>
 8006c68:	6921      	ldr	r1, [r4, #16]
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f7ff fec6 	bl	80069fc <_free_r>
 8006c70:	e7c7      	b.n	8006c02 <__ssputs_r+0x46>
	...

08006c74 <_svfiprintf_r>:
 8006c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	4698      	mov	r8, r3
 8006c7a:	898b      	ldrh	r3, [r1, #12]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	b09d      	sub	sp, #116	; 0x74
 8006c80:	4607      	mov	r7, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	4614      	mov	r4, r2
 8006c86:	d50e      	bpl.n	8006ca6 <_svfiprintf_r+0x32>
 8006c88:	690b      	ldr	r3, [r1, #16]
 8006c8a:	b963      	cbnz	r3, 8006ca6 <_svfiprintf_r+0x32>
 8006c8c:	2140      	movs	r1, #64	; 0x40
 8006c8e:	f7ff ff21 	bl	8006ad4 <_malloc_r>
 8006c92:	6028      	str	r0, [r5, #0]
 8006c94:	6128      	str	r0, [r5, #16]
 8006c96:	b920      	cbnz	r0, 8006ca2 <_svfiprintf_r+0x2e>
 8006c98:	230c      	movs	r3, #12
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	e0d1      	b.n	8006e46 <_svfiprintf_r+0x1d2>
 8006ca2:	2340      	movs	r3, #64	; 0x40
 8006ca4:	616b      	str	r3, [r5, #20]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8006caa:	2320      	movs	r3, #32
 8006cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb4:	2330      	movs	r3, #48	; 0x30
 8006cb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e60 <_svfiprintf_r+0x1ec>
 8006cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cbe:	f04f 0901 	mov.w	r9, #1
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	469a      	mov	sl, r3
 8006cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cca:	b10a      	cbz	r2, 8006cd0 <_svfiprintf_r+0x5c>
 8006ccc:	2a25      	cmp	r2, #37	; 0x25
 8006cce:	d1f9      	bne.n	8006cc4 <_svfiprintf_r+0x50>
 8006cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd4:	d00b      	beq.n	8006cee <_svfiprintf_r+0x7a>
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f7ff ff6d 	bl	8006bbc <__ssputs_r>
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f000 80aa 	beq.w	8006e3c <_svfiprintf_r+0x1c8>
 8006ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cea:	445a      	add	r2, fp
 8006cec:	9209      	str	r2, [sp, #36]	; 0x24
 8006cee:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80a2 	beq.w	8006e3c <_svfiprintf_r+0x1c8>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d02:	f10a 0a01 	add.w	sl, sl, #1
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	9307      	str	r3, [sp, #28]
 8006d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d10:	4654      	mov	r4, sl
 8006d12:	2205      	movs	r2, #5
 8006d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d18:	4851      	ldr	r0, [pc, #324]	; (8006e60 <_svfiprintf_r+0x1ec>)
 8006d1a:	f7f9 fa69 	bl	80001f0 <memchr>
 8006d1e:	9a04      	ldr	r2, [sp, #16]
 8006d20:	b9d8      	cbnz	r0, 8006d5a <_svfiprintf_r+0xe6>
 8006d22:	06d0      	lsls	r0, r2, #27
 8006d24:	bf44      	itt	mi
 8006d26:	2320      	movmi	r3, #32
 8006d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d2c:	0711      	lsls	r1, r2, #28
 8006d2e:	bf44      	itt	mi
 8006d30:	232b      	movmi	r3, #43	; 0x2b
 8006d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3c:	d015      	beq.n	8006d6a <_svfiprintf_r+0xf6>
 8006d3e:	9a07      	ldr	r2, [sp, #28]
 8006d40:	4654      	mov	r4, sl
 8006d42:	2000      	movs	r0, #0
 8006d44:	f04f 0c0a 	mov.w	ip, #10
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4e:	3b30      	subs	r3, #48	; 0x30
 8006d50:	2b09      	cmp	r3, #9
 8006d52:	d94e      	bls.n	8006df2 <_svfiprintf_r+0x17e>
 8006d54:	b1b0      	cbz	r0, 8006d84 <_svfiprintf_r+0x110>
 8006d56:	9207      	str	r2, [sp, #28]
 8006d58:	e014      	b.n	8006d84 <_svfiprintf_r+0x110>
 8006d5a:	eba0 0308 	sub.w	r3, r0, r8
 8006d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	46a2      	mov	sl, r4
 8006d68:	e7d2      	b.n	8006d10 <_svfiprintf_r+0x9c>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	1d19      	adds	r1, r3, #4
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	9103      	str	r1, [sp, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfbb      	ittet	lt
 8006d76:	425b      	neglt	r3, r3
 8006d78:	f042 0202 	orrlt.w	r2, r2, #2
 8006d7c:	9307      	strge	r3, [sp, #28]
 8006d7e:	9307      	strlt	r3, [sp, #28]
 8006d80:	bfb8      	it	lt
 8006d82:	9204      	strlt	r2, [sp, #16]
 8006d84:	7823      	ldrb	r3, [r4, #0]
 8006d86:	2b2e      	cmp	r3, #46	; 0x2e
 8006d88:	d10c      	bne.n	8006da4 <_svfiprintf_r+0x130>
 8006d8a:	7863      	ldrb	r3, [r4, #1]
 8006d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8e:	d135      	bne.n	8006dfc <_svfiprintf_r+0x188>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	1d1a      	adds	r2, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	9203      	str	r2, [sp, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006da0:	3402      	adds	r4, #2
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e70 <_svfiprintf_r+0x1fc>
 8006da8:	7821      	ldrb	r1, [r4, #0]
 8006daa:	2203      	movs	r2, #3
 8006dac:	4650      	mov	r0, sl
 8006dae:	f7f9 fa1f 	bl	80001f0 <memchr>
 8006db2:	b140      	cbz	r0, 8006dc6 <_svfiprintf_r+0x152>
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	eba0 000a 	sub.w	r0, r0, sl
 8006dba:	fa03 f000 	lsl.w	r0, r3, r0
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	4303      	orrs	r3, r0
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dca:	4826      	ldr	r0, [pc, #152]	; (8006e64 <_svfiprintf_r+0x1f0>)
 8006dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dd0:	2206      	movs	r2, #6
 8006dd2:	f7f9 fa0d 	bl	80001f0 <memchr>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d038      	beq.n	8006e4c <_svfiprintf_r+0x1d8>
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <_svfiprintf_r+0x1f4>)
 8006ddc:	bb1b      	cbnz	r3, 8006e26 <_svfiprintf_r+0x1b2>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	3307      	adds	r3, #7
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	3308      	adds	r3, #8
 8006de8:	9303      	str	r3, [sp, #12]
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	4433      	add	r3, r6
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	e767      	b.n	8006cc2 <_svfiprintf_r+0x4e>
 8006df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006df6:	460c      	mov	r4, r1
 8006df8:	2001      	movs	r0, #1
 8006dfa:	e7a5      	b.n	8006d48 <_svfiprintf_r+0xd4>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	3401      	adds	r4, #1
 8006e00:	9305      	str	r3, [sp, #20]
 8006e02:	4619      	mov	r1, r3
 8006e04:	f04f 0c0a 	mov.w	ip, #10
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e0e:	3a30      	subs	r2, #48	; 0x30
 8006e10:	2a09      	cmp	r2, #9
 8006e12:	d903      	bls.n	8006e1c <_svfiprintf_r+0x1a8>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0c5      	beq.n	8006da4 <_svfiprintf_r+0x130>
 8006e18:	9105      	str	r1, [sp, #20]
 8006e1a:	e7c3      	b.n	8006da4 <_svfiprintf_r+0x130>
 8006e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e20:	4604      	mov	r4, r0
 8006e22:	2301      	movs	r3, #1
 8006e24:	e7f0      	b.n	8006e08 <_svfiprintf_r+0x194>
 8006e26:	ab03      	add	r3, sp, #12
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <_svfiprintf_r+0x1f8>)
 8006e2e:	a904      	add	r1, sp, #16
 8006e30:	4638      	mov	r0, r7
 8006e32:	f7fc fa49 	bl	80032c8 <_printf_float>
 8006e36:	1c42      	adds	r2, r0, #1
 8006e38:	4606      	mov	r6, r0
 8006e3a:	d1d6      	bne.n	8006dea <_svfiprintf_r+0x176>
 8006e3c:	89ab      	ldrh	r3, [r5, #12]
 8006e3e:	065b      	lsls	r3, r3, #25
 8006e40:	f53f af2c 	bmi.w	8006c9c <_svfiprintf_r+0x28>
 8006e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e46:	b01d      	add	sp, #116	; 0x74
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	462a      	mov	r2, r5
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <_svfiprintf_r+0x1f8>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4638      	mov	r0, r7
 8006e58:	f7fc fcda 	bl	8003810 <_printf_i>
 8006e5c:	e7eb      	b.n	8006e36 <_svfiprintf_r+0x1c2>
 8006e5e:	bf00      	nop
 8006e60:	08007e8c 	.word	0x08007e8c
 8006e64:	08007e96 	.word	0x08007e96
 8006e68:	080032c9 	.word	0x080032c9
 8006e6c:	08006bbd 	.word	0x08006bbd
 8006e70:	08007e92 	.word	0x08007e92
 8006e74:	00000000 	.word	0x00000000

08006e78 <nan>:
 8006e78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006e80 <nan+0x8>
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	00000000 	.word	0x00000000
 8006e84:	7ff80000 	.word	0x7ff80000

08006e88 <_sbrk_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_sbrk_r+0x1c>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7fa fc42 	bl	800171c <_sbrk>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_sbrk_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_sbrk_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20000308 	.word	0x20000308

08006ea8 <strncmp>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	b17a      	cbz	r2, 8006ecc <strncmp+0x24>
 8006eac:	4603      	mov	r3, r0
 8006eae:	3901      	subs	r1, #1
 8006eb0:	1884      	adds	r4, r0, r2
 8006eb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006eb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006eba:	4290      	cmp	r0, r2
 8006ebc:	d101      	bne.n	8006ec2 <strncmp+0x1a>
 8006ebe:	42a3      	cmp	r3, r4
 8006ec0:	d101      	bne.n	8006ec6 <strncmp+0x1e>
 8006ec2:	1a80      	subs	r0, r0, r2
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d1f3      	bne.n	8006eb2 <strncmp+0xa>
 8006eca:	e7fa      	b.n	8006ec2 <strncmp+0x1a>
 8006ecc:	4610      	mov	r0, r2
 8006ece:	e7f9      	b.n	8006ec4 <strncmp+0x1c>

08006ed0 <__ascii_wctomb>:
 8006ed0:	b149      	cbz	r1, 8006ee6 <__ascii_wctomb+0x16>
 8006ed2:	2aff      	cmp	r2, #255	; 0xff
 8006ed4:	bf85      	ittet	hi
 8006ed6:	238a      	movhi	r3, #138	; 0x8a
 8006ed8:	6003      	strhi	r3, [r0, #0]
 8006eda:	700a      	strbls	r2, [r1, #0]
 8006edc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ee0:	bf98      	it	ls
 8006ee2:	2001      	movls	r0, #1
 8006ee4:	4770      	bx	lr
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4770      	bx	lr
	...

08006eec <__assert_func>:
 8006eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eee:	4614      	mov	r4, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <__assert_func+0x2c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	68d8      	ldr	r0, [r3, #12]
 8006efa:	b14c      	cbz	r4, 8006f10 <__assert_func+0x24>
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <__assert_func+0x30>)
 8006efe:	9100      	str	r1, [sp, #0]
 8006f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f04:	4906      	ldr	r1, [pc, #24]	; (8006f20 <__assert_func+0x34>)
 8006f06:	462b      	mov	r3, r5
 8006f08:	f000 f80e 	bl	8006f28 <fiprintf>
 8006f0c:	f000 fa8c 	bl	8007428 <abort>
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <__assert_func+0x38>)
 8006f12:	461c      	mov	r4, r3
 8006f14:	e7f3      	b.n	8006efe <__assert_func+0x12>
 8006f16:	bf00      	nop
 8006f18:	2000000c 	.word	0x2000000c
 8006f1c:	08007e9d 	.word	0x08007e9d
 8006f20:	08007eaa 	.word	0x08007eaa
 8006f24:	08007ed8 	.word	0x08007ed8

08006f28 <fiprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	b503      	push	{r0, r1, lr}
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	ab03      	add	r3, sp, #12
 8006f30:	4805      	ldr	r0, [pc, #20]	; (8006f48 <fiprintf+0x20>)
 8006f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f36:	6800      	ldr	r0, [r0, #0]
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	f000 f885 	bl	8007048 <_vfiprintf_r>
 8006f3e:	b002      	add	sp, #8
 8006f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f44:	b003      	add	sp, #12
 8006f46:	4770      	bx	lr
 8006f48:	2000000c 	.word	0x2000000c

08006f4c <memmove>:
 8006f4c:	4288      	cmp	r0, r1
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	eb01 0402 	add.w	r4, r1, r2
 8006f54:	d902      	bls.n	8006f5c <memmove+0x10>
 8006f56:	4284      	cmp	r4, r0
 8006f58:	4623      	mov	r3, r4
 8006f5a:	d807      	bhi.n	8006f6c <memmove+0x20>
 8006f5c:	1e43      	subs	r3, r0, #1
 8006f5e:	42a1      	cmp	r1, r4
 8006f60:	d008      	beq.n	8006f74 <memmove+0x28>
 8006f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f6a:	e7f8      	b.n	8006f5e <memmove+0x12>
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4601      	mov	r1, r0
 8006f70:	428a      	cmp	r2, r1
 8006f72:	d100      	bne.n	8006f76 <memmove+0x2a>
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f7e:	e7f7      	b.n	8006f70 <memmove+0x24>

08006f80 <__malloc_lock>:
 8006f80:	4801      	ldr	r0, [pc, #4]	; (8006f88 <__malloc_lock+0x8>)
 8006f82:	f000 bc11 	b.w	80077a8 <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	2000030c 	.word	0x2000030c

08006f8c <__malloc_unlock>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__malloc_unlock+0x8>)
 8006f8e:	f000 bc0c 	b.w	80077aa <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	2000030c 	.word	0x2000030c

08006f98 <_realloc_r>:
 8006f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	460e      	mov	r6, r1
 8006fa2:	b921      	cbnz	r1, 8006fae <_realloc_r+0x16>
 8006fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa8:	4611      	mov	r1, r2
 8006faa:	f7ff bd93 	b.w	8006ad4 <_malloc_r>
 8006fae:	b92a      	cbnz	r2, 8006fbc <_realloc_r+0x24>
 8006fb0:	f7ff fd24 	bl	80069fc <_free_r>
 8006fb4:	4625      	mov	r5, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fbc:	f000 fc5c 	bl	8007878 <_malloc_usable_size_r>
 8006fc0:	4284      	cmp	r4, r0
 8006fc2:	4607      	mov	r7, r0
 8006fc4:	d802      	bhi.n	8006fcc <_realloc_r+0x34>
 8006fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fca:	d812      	bhi.n	8006ff2 <_realloc_r+0x5a>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4640      	mov	r0, r8
 8006fd0:	f7ff fd80 	bl	8006ad4 <_malloc_r>
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d0ed      	beq.n	8006fb6 <_realloc_r+0x1e>
 8006fda:	42bc      	cmp	r4, r7
 8006fdc:	4622      	mov	r2, r4
 8006fde:	4631      	mov	r1, r6
 8006fe0:	bf28      	it	cs
 8006fe2:	463a      	movcs	r2, r7
 8006fe4:	f7ff f824 	bl	8006030 <memcpy>
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4640      	mov	r0, r8
 8006fec:	f7ff fd06 	bl	80069fc <_free_r>
 8006ff0:	e7e1      	b.n	8006fb6 <_realloc_r+0x1e>
 8006ff2:	4635      	mov	r5, r6
 8006ff4:	e7df      	b.n	8006fb6 <_realloc_r+0x1e>

08006ff6 <__sfputc_r>:
 8006ff6:	6893      	ldr	r3, [r2, #8]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	b410      	push	{r4}
 8006ffe:	6093      	str	r3, [r2, #8]
 8007000:	da08      	bge.n	8007014 <__sfputc_r+0x1e>
 8007002:	6994      	ldr	r4, [r2, #24]
 8007004:	42a3      	cmp	r3, r4
 8007006:	db01      	blt.n	800700c <__sfputc_r+0x16>
 8007008:	290a      	cmp	r1, #10
 800700a:	d103      	bne.n	8007014 <__sfputc_r+0x1e>
 800700c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007010:	f000 b94a 	b.w	80072a8 <__swbuf_r>
 8007014:	6813      	ldr	r3, [r2, #0]
 8007016:	1c58      	adds	r0, r3, #1
 8007018:	6010      	str	r0, [r2, #0]
 800701a:	7019      	strb	r1, [r3, #0]
 800701c:	4608      	mov	r0, r1
 800701e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007022:	4770      	bx	lr

08007024 <__sfputs_r>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	4614      	mov	r4, r2
 800702c:	18d5      	adds	r5, r2, r3
 800702e:	42ac      	cmp	r4, r5
 8007030:	d101      	bne.n	8007036 <__sfputs_r+0x12>
 8007032:	2000      	movs	r0, #0
 8007034:	e007      	b.n	8007046 <__sfputs_r+0x22>
 8007036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703a:	463a      	mov	r2, r7
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff ffda 	bl	8006ff6 <__sfputc_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	d1f3      	bne.n	800702e <__sfputs_r+0xa>
 8007046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007048 <_vfiprintf_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	460d      	mov	r5, r1
 800704e:	b09d      	sub	sp, #116	; 0x74
 8007050:	4614      	mov	r4, r2
 8007052:	4698      	mov	r8, r3
 8007054:	4606      	mov	r6, r0
 8007056:	b118      	cbz	r0, 8007060 <_vfiprintf_r+0x18>
 8007058:	6983      	ldr	r3, [r0, #24]
 800705a:	b90b      	cbnz	r3, 8007060 <_vfiprintf_r+0x18>
 800705c:	f000 fb06 	bl	800766c <__sinit>
 8007060:	4b89      	ldr	r3, [pc, #548]	; (8007288 <_vfiprintf_r+0x240>)
 8007062:	429d      	cmp	r5, r3
 8007064:	d11b      	bne.n	800709e <_vfiprintf_r+0x56>
 8007066:	6875      	ldr	r5, [r6, #4]
 8007068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800706a:	07d9      	lsls	r1, r3, #31
 800706c:	d405      	bmi.n	800707a <_vfiprintf_r+0x32>
 800706e:	89ab      	ldrh	r3, [r5, #12]
 8007070:	059a      	lsls	r2, r3, #22
 8007072:	d402      	bmi.n	800707a <_vfiprintf_r+0x32>
 8007074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007076:	f000 fb97 	bl	80077a8 <__retarget_lock_acquire_recursive>
 800707a:	89ab      	ldrh	r3, [r5, #12]
 800707c:	071b      	lsls	r3, r3, #28
 800707e:	d501      	bpl.n	8007084 <_vfiprintf_r+0x3c>
 8007080:	692b      	ldr	r3, [r5, #16]
 8007082:	b9eb      	cbnz	r3, 80070c0 <_vfiprintf_r+0x78>
 8007084:	4629      	mov	r1, r5
 8007086:	4630      	mov	r0, r6
 8007088:	f000 f960 	bl	800734c <__swsetup_r>
 800708c:	b1c0      	cbz	r0, 80070c0 <_vfiprintf_r+0x78>
 800708e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007090:	07dc      	lsls	r4, r3, #31
 8007092:	d50e      	bpl.n	80070b2 <_vfiprintf_r+0x6a>
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	b01d      	add	sp, #116	; 0x74
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709e:	4b7b      	ldr	r3, [pc, #492]	; (800728c <_vfiprintf_r+0x244>)
 80070a0:	429d      	cmp	r5, r3
 80070a2:	d101      	bne.n	80070a8 <_vfiprintf_r+0x60>
 80070a4:	68b5      	ldr	r5, [r6, #8]
 80070a6:	e7df      	b.n	8007068 <_vfiprintf_r+0x20>
 80070a8:	4b79      	ldr	r3, [pc, #484]	; (8007290 <_vfiprintf_r+0x248>)
 80070aa:	429d      	cmp	r5, r3
 80070ac:	bf08      	it	eq
 80070ae:	68f5      	ldreq	r5, [r6, #12]
 80070b0:	e7da      	b.n	8007068 <_vfiprintf_r+0x20>
 80070b2:	89ab      	ldrh	r3, [r5, #12]
 80070b4:	0598      	lsls	r0, r3, #22
 80070b6:	d4ed      	bmi.n	8007094 <_vfiprintf_r+0x4c>
 80070b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ba:	f000 fb76 	bl	80077aa <__retarget_lock_release_recursive>
 80070be:	e7e9      	b.n	8007094 <_vfiprintf_r+0x4c>
 80070c0:	2300      	movs	r3, #0
 80070c2:	9309      	str	r3, [sp, #36]	; 0x24
 80070c4:	2320      	movs	r3, #32
 80070c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ce:	2330      	movs	r3, #48	; 0x30
 80070d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007294 <_vfiprintf_r+0x24c>
 80070d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070d8:	f04f 0901 	mov.w	r9, #1
 80070dc:	4623      	mov	r3, r4
 80070de:	469a      	mov	sl, r3
 80070e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070e4:	b10a      	cbz	r2, 80070ea <_vfiprintf_r+0xa2>
 80070e6:	2a25      	cmp	r2, #37	; 0x25
 80070e8:	d1f9      	bne.n	80070de <_vfiprintf_r+0x96>
 80070ea:	ebba 0b04 	subs.w	fp, sl, r4
 80070ee:	d00b      	beq.n	8007108 <_vfiprintf_r+0xc0>
 80070f0:	465b      	mov	r3, fp
 80070f2:	4622      	mov	r2, r4
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7ff ff94 	bl	8007024 <__sfputs_r>
 80070fc:	3001      	adds	r0, #1
 80070fe:	f000 80aa 	beq.w	8007256 <_vfiprintf_r+0x20e>
 8007102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007104:	445a      	add	r2, fp
 8007106:	9209      	str	r2, [sp, #36]	; 0x24
 8007108:	f89a 3000 	ldrb.w	r3, [sl]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 80a2 	beq.w	8007256 <_vfiprintf_r+0x20e>
 8007112:	2300      	movs	r3, #0
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800711c:	f10a 0a01 	add.w	sl, sl, #1
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	9307      	str	r3, [sp, #28]
 8007124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007128:	931a      	str	r3, [sp, #104]	; 0x68
 800712a:	4654      	mov	r4, sl
 800712c:	2205      	movs	r2, #5
 800712e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007132:	4858      	ldr	r0, [pc, #352]	; (8007294 <_vfiprintf_r+0x24c>)
 8007134:	f7f9 f85c 	bl	80001f0 <memchr>
 8007138:	9a04      	ldr	r2, [sp, #16]
 800713a:	b9d8      	cbnz	r0, 8007174 <_vfiprintf_r+0x12c>
 800713c:	06d1      	lsls	r1, r2, #27
 800713e:	bf44      	itt	mi
 8007140:	2320      	movmi	r3, #32
 8007142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007146:	0713      	lsls	r3, r2, #28
 8007148:	bf44      	itt	mi
 800714a:	232b      	movmi	r3, #43	; 0x2b
 800714c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007150:	f89a 3000 	ldrb.w	r3, [sl]
 8007154:	2b2a      	cmp	r3, #42	; 0x2a
 8007156:	d015      	beq.n	8007184 <_vfiprintf_r+0x13c>
 8007158:	9a07      	ldr	r2, [sp, #28]
 800715a:	4654      	mov	r4, sl
 800715c:	2000      	movs	r0, #0
 800715e:	f04f 0c0a 	mov.w	ip, #10
 8007162:	4621      	mov	r1, r4
 8007164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007168:	3b30      	subs	r3, #48	; 0x30
 800716a:	2b09      	cmp	r3, #9
 800716c:	d94e      	bls.n	800720c <_vfiprintf_r+0x1c4>
 800716e:	b1b0      	cbz	r0, 800719e <_vfiprintf_r+0x156>
 8007170:	9207      	str	r2, [sp, #28]
 8007172:	e014      	b.n	800719e <_vfiprintf_r+0x156>
 8007174:	eba0 0308 	sub.w	r3, r0, r8
 8007178:	fa09 f303 	lsl.w	r3, r9, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	46a2      	mov	sl, r4
 8007182:	e7d2      	b.n	800712a <_vfiprintf_r+0xe2>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	1d19      	adds	r1, r3, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	9103      	str	r1, [sp, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	bfbb      	ittet	lt
 8007190:	425b      	neglt	r3, r3
 8007192:	f042 0202 	orrlt.w	r2, r2, #2
 8007196:	9307      	strge	r3, [sp, #28]
 8007198:	9307      	strlt	r3, [sp, #28]
 800719a:	bfb8      	it	lt
 800719c:	9204      	strlt	r2, [sp, #16]
 800719e:	7823      	ldrb	r3, [r4, #0]
 80071a0:	2b2e      	cmp	r3, #46	; 0x2e
 80071a2:	d10c      	bne.n	80071be <_vfiprintf_r+0x176>
 80071a4:	7863      	ldrb	r3, [r4, #1]
 80071a6:	2b2a      	cmp	r3, #42	; 0x2a
 80071a8:	d135      	bne.n	8007216 <_vfiprintf_r+0x1ce>
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	1d1a      	adds	r2, r3, #4
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	9203      	str	r2, [sp, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bfb8      	it	lt
 80071b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80071ba:	3402      	adds	r4, #2
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072a4 <_vfiprintf_r+0x25c>
 80071c2:	7821      	ldrb	r1, [r4, #0]
 80071c4:	2203      	movs	r2, #3
 80071c6:	4650      	mov	r0, sl
 80071c8:	f7f9 f812 	bl	80001f0 <memchr>
 80071cc:	b140      	cbz	r0, 80071e0 <_vfiprintf_r+0x198>
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	eba0 000a 	sub.w	r0, r0, sl
 80071d4:	fa03 f000 	lsl.w	r0, r3, r0
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	4303      	orrs	r3, r0
 80071dc:	3401      	adds	r4, #1
 80071de:	9304      	str	r3, [sp, #16]
 80071e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e4:	482c      	ldr	r0, [pc, #176]	; (8007298 <_vfiprintf_r+0x250>)
 80071e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ea:	2206      	movs	r2, #6
 80071ec:	f7f9 f800 	bl	80001f0 <memchr>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d03f      	beq.n	8007274 <_vfiprintf_r+0x22c>
 80071f4:	4b29      	ldr	r3, [pc, #164]	; (800729c <_vfiprintf_r+0x254>)
 80071f6:	bb1b      	cbnz	r3, 8007240 <_vfiprintf_r+0x1f8>
 80071f8:	9b03      	ldr	r3, [sp, #12]
 80071fa:	3307      	adds	r3, #7
 80071fc:	f023 0307 	bic.w	r3, r3, #7
 8007200:	3308      	adds	r3, #8
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007206:	443b      	add	r3, r7
 8007208:	9309      	str	r3, [sp, #36]	; 0x24
 800720a:	e767      	b.n	80070dc <_vfiprintf_r+0x94>
 800720c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007210:	460c      	mov	r4, r1
 8007212:	2001      	movs	r0, #1
 8007214:	e7a5      	b.n	8007162 <_vfiprintf_r+0x11a>
 8007216:	2300      	movs	r3, #0
 8007218:	3401      	adds	r4, #1
 800721a:	9305      	str	r3, [sp, #20]
 800721c:	4619      	mov	r1, r3
 800721e:	f04f 0c0a 	mov.w	ip, #10
 8007222:	4620      	mov	r0, r4
 8007224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007228:	3a30      	subs	r2, #48	; 0x30
 800722a:	2a09      	cmp	r2, #9
 800722c:	d903      	bls.n	8007236 <_vfiprintf_r+0x1ee>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0c5      	beq.n	80071be <_vfiprintf_r+0x176>
 8007232:	9105      	str	r1, [sp, #20]
 8007234:	e7c3      	b.n	80071be <_vfiprintf_r+0x176>
 8007236:	fb0c 2101 	mla	r1, ip, r1, r2
 800723a:	4604      	mov	r4, r0
 800723c:	2301      	movs	r3, #1
 800723e:	e7f0      	b.n	8007222 <_vfiprintf_r+0x1da>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <_vfiprintf_r+0x258>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4630      	mov	r0, r6
 800724c:	f7fc f83c 	bl	80032c8 <_printf_float>
 8007250:	4607      	mov	r7, r0
 8007252:	1c78      	adds	r0, r7, #1
 8007254:	d1d6      	bne.n	8007204 <_vfiprintf_r+0x1bc>
 8007256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007258:	07d9      	lsls	r1, r3, #31
 800725a:	d405      	bmi.n	8007268 <_vfiprintf_r+0x220>
 800725c:	89ab      	ldrh	r3, [r5, #12]
 800725e:	059a      	lsls	r2, r3, #22
 8007260:	d402      	bmi.n	8007268 <_vfiprintf_r+0x220>
 8007262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007264:	f000 faa1 	bl	80077aa <__retarget_lock_release_recursive>
 8007268:	89ab      	ldrh	r3, [r5, #12]
 800726a:	065b      	lsls	r3, r3, #25
 800726c:	f53f af12 	bmi.w	8007094 <_vfiprintf_r+0x4c>
 8007270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007272:	e711      	b.n	8007098 <_vfiprintf_r+0x50>
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	462a      	mov	r2, r5
 800727a:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <_vfiprintf_r+0x258>)
 800727c:	a904      	add	r1, sp, #16
 800727e:	4630      	mov	r0, r6
 8007280:	f7fc fac6 	bl	8003810 <_printf_i>
 8007284:	e7e4      	b.n	8007250 <_vfiprintf_r+0x208>
 8007286:	bf00      	nop
 8007288:	08007efc 	.word	0x08007efc
 800728c:	08007f1c 	.word	0x08007f1c
 8007290:	08007edc 	.word	0x08007edc
 8007294:	08007e8c 	.word	0x08007e8c
 8007298:	08007e96 	.word	0x08007e96
 800729c:	080032c9 	.word	0x080032c9
 80072a0:	08007025 	.word	0x08007025
 80072a4:	08007e92 	.word	0x08007e92

080072a8 <__swbuf_r>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	460e      	mov	r6, r1
 80072ac:	4614      	mov	r4, r2
 80072ae:	4605      	mov	r5, r0
 80072b0:	b118      	cbz	r0, 80072ba <__swbuf_r+0x12>
 80072b2:	6983      	ldr	r3, [r0, #24]
 80072b4:	b90b      	cbnz	r3, 80072ba <__swbuf_r+0x12>
 80072b6:	f000 f9d9 	bl	800766c <__sinit>
 80072ba:	4b21      	ldr	r3, [pc, #132]	; (8007340 <__swbuf_r+0x98>)
 80072bc:	429c      	cmp	r4, r3
 80072be:	d12b      	bne.n	8007318 <__swbuf_r+0x70>
 80072c0:	686c      	ldr	r4, [r5, #4]
 80072c2:	69a3      	ldr	r3, [r4, #24]
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	071a      	lsls	r2, r3, #28
 80072ca:	d52f      	bpl.n	800732c <__swbuf_r+0x84>
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	b36b      	cbz	r3, 800732c <__swbuf_r+0x84>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	1ac0      	subs	r0, r0, r3
 80072d6:	6963      	ldr	r3, [r4, #20]
 80072d8:	b2f6      	uxtb	r6, r6
 80072da:	4283      	cmp	r3, r0
 80072dc:	4637      	mov	r7, r6
 80072de:	dc04      	bgt.n	80072ea <__swbuf_r+0x42>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 f92e 	bl	8007544 <_fflush_r>
 80072e8:	bb30      	cbnz	r0, 8007338 <__swbuf_r+0x90>
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	701e      	strb	r6, [r3, #0]
 80072f8:	6963      	ldr	r3, [r4, #20]
 80072fa:	3001      	adds	r0, #1
 80072fc:	4283      	cmp	r3, r0
 80072fe:	d004      	beq.n	800730a <__swbuf_r+0x62>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	07db      	lsls	r3, r3, #31
 8007304:	d506      	bpl.n	8007314 <__swbuf_r+0x6c>
 8007306:	2e0a      	cmp	r6, #10
 8007308:	d104      	bne.n	8007314 <__swbuf_r+0x6c>
 800730a:	4621      	mov	r1, r4
 800730c:	4628      	mov	r0, r5
 800730e:	f000 f919 	bl	8007544 <_fflush_r>
 8007312:	b988      	cbnz	r0, 8007338 <__swbuf_r+0x90>
 8007314:	4638      	mov	r0, r7
 8007316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <__swbuf_r+0x9c>)
 800731a:	429c      	cmp	r4, r3
 800731c:	d101      	bne.n	8007322 <__swbuf_r+0x7a>
 800731e:	68ac      	ldr	r4, [r5, #8]
 8007320:	e7cf      	b.n	80072c2 <__swbuf_r+0x1a>
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <__swbuf_r+0xa0>)
 8007324:	429c      	cmp	r4, r3
 8007326:	bf08      	it	eq
 8007328:	68ec      	ldreq	r4, [r5, #12]
 800732a:	e7ca      	b.n	80072c2 <__swbuf_r+0x1a>
 800732c:	4621      	mov	r1, r4
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f80c 	bl	800734c <__swsetup_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	d0cb      	beq.n	80072d0 <__swbuf_r+0x28>
 8007338:	f04f 37ff 	mov.w	r7, #4294967295
 800733c:	e7ea      	b.n	8007314 <__swbuf_r+0x6c>
 800733e:	bf00      	nop
 8007340:	08007efc 	.word	0x08007efc
 8007344:	08007f1c 	.word	0x08007f1c
 8007348:	08007edc 	.word	0x08007edc

0800734c <__swsetup_r>:
 800734c:	4b32      	ldr	r3, [pc, #200]	; (8007418 <__swsetup_r+0xcc>)
 800734e:	b570      	push	{r4, r5, r6, lr}
 8007350:	681d      	ldr	r5, [r3, #0]
 8007352:	4606      	mov	r6, r0
 8007354:	460c      	mov	r4, r1
 8007356:	b125      	cbz	r5, 8007362 <__swsetup_r+0x16>
 8007358:	69ab      	ldr	r3, [r5, #24]
 800735a:	b913      	cbnz	r3, 8007362 <__swsetup_r+0x16>
 800735c:	4628      	mov	r0, r5
 800735e:	f000 f985 	bl	800766c <__sinit>
 8007362:	4b2e      	ldr	r3, [pc, #184]	; (800741c <__swsetup_r+0xd0>)
 8007364:	429c      	cmp	r4, r3
 8007366:	d10f      	bne.n	8007388 <__swsetup_r+0x3c>
 8007368:	686c      	ldr	r4, [r5, #4]
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007370:	0719      	lsls	r1, r3, #28
 8007372:	d42c      	bmi.n	80073ce <__swsetup_r+0x82>
 8007374:	06dd      	lsls	r5, r3, #27
 8007376:	d411      	bmi.n	800739c <__swsetup_r+0x50>
 8007378:	2309      	movs	r3, #9
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	f04f 30ff 	mov.w	r0, #4294967295
 8007386:	e03e      	b.n	8007406 <__swsetup_r+0xba>
 8007388:	4b25      	ldr	r3, [pc, #148]	; (8007420 <__swsetup_r+0xd4>)
 800738a:	429c      	cmp	r4, r3
 800738c:	d101      	bne.n	8007392 <__swsetup_r+0x46>
 800738e:	68ac      	ldr	r4, [r5, #8]
 8007390:	e7eb      	b.n	800736a <__swsetup_r+0x1e>
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <__swsetup_r+0xd8>)
 8007394:	429c      	cmp	r4, r3
 8007396:	bf08      	it	eq
 8007398:	68ec      	ldreq	r4, [r5, #12]
 800739a:	e7e6      	b.n	800736a <__swsetup_r+0x1e>
 800739c:	0758      	lsls	r0, r3, #29
 800739e:	d512      	bpl.n	80073c6 <__swsetup_r+0x7a>
 80073a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073a2:	b141      	cbz	r1, 80073b6 <__swsetup_r+0x6a>
 80073a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073a8:	4299      	cmp	r1, r3
 80073aa:	d002      	beq.n	80073b2 <__swsetup_r+0x66>
 80073ac:	4630      	mov	r0, r6
 80073ae:	f7ff fb25 	bl	80069fc <_free_r>
 80073b2:	2300      	movs	r3, #0
 80073b4:	6363      	str	r3, [r4, #52]	; 0x34
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	2300      	movs	r3, #0
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	f043 0308 	orr.w	r3, r3, #8
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	b94b      	cbnz	r3, 80073e6 <__swsetup_r+0x9a>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073dc:	d003      	beq.n	80073e6 <__swsetup_r+0x9a>
 80073de:	4621      	mov	r1, r4
 80073e0:	4630      	mov	r0, r6
 80073e2:	f000 fa09 	bl	80077f8 <__smakebuf_r>
 80073e6:	89a0      	ldrh	r0, [r4, #12]
 80073e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073ec:	f010 0301 	ands.w	r3, r0, #1
 80073f0:	d00a      	beq.n	8007408 <__swsetup_r+0xbc>
 80073f2:	2300      	movs	r3, #0
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	6963      	ldr	r3, [r4, #20]
 80073f8:	425b      	negs	r3, r3
 80073fa:	61a3      	str	r3, [r4, #24]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	b943      	cbnz	r3, 8007412 <__swsetup_r+0xc6>
 8007400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007404:	d1ba      	bne.n	800737c <__swsetup_r+0x30>
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	0781      	lsls	r1, r0, #30
 800740a:	bf58      	it	pl
 800740c:	6963      	ldrpl	r3, [r4, #20]
 800740e:	60a3      	str	r3, [r4, #8]
 8007410:	e7f4      	b.n	80073fc <__swsetup_r+0xb0>
 8007412:	2000      	movs	r0, #0
 8007414:	e7f7      	b.n	8007406 <__swsetup_r+0xba>
 8007416:	bf00      	nop
 8007418:	2000000c 	.word	0x2000000c
 800741c:	08007efc 	.word	0x08007efc
 8007420:	08007f1c 	.word	0x08007f1c
 8007424:	08007edc 	.word	0x08007edc

08007428 <abort>:
 8007428:	b508      	push	{r3, lr}
 800742a:	2006      	movs	r0, #6
 800742c:	f000 fa54 	bl	80078d8 <raise>
 8007430:	2001      	movs	r0, #1
 8007432:	f7fa f8fb 	bl	800162c <_exit>
	...

08007438 <__sflush_r>:
 8007438:	898a      	ldrh	r2, [r1, #12]
 800743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	4605      	mov	r5, r0
 8007440:	0710      	lsls	r0, r2, #28
 8007442:	460c      	mov	r4, r1
 8007444:	d458      	bmi.n	80074f8 <__sflush_r+0xc0>
 8007446:	684b      	ldr	r3, [r1, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc05      	bgt.n	8007458 <__sflush_r+0x20>
 800744c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	dc02      	bgt.n	8007458 <__sflush_r+0x20>
 8007452:	2000      	movs	r0, #0
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745a:	2e00      	cmp	r6, #0
 800745c:	d0f9      	beq.n	8007452 <__sflush_r+0x1a>
 800745e:	2300      	movs	r3, #0
 8007460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007464:	682f      	ldr	r7, [r5, #0]
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	d032      	beq.n	80074d0 <__sflush_r+0x98>
 800746a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	075a      	lsls	r2, r3, #29
 8007470:	d505      	bpl.n	800747e <__sflush_r+0x46>
 8007472:	6863      	ldr	r3, [r4, #4]
 8007474:	1ac0      	subs	r0, r0, r3
 8007476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007478:	b10b      	cbz	r3, 800747e <__sflush_r+0x46>
 800747a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800747c:	1ac0      	subs	r0, r0, r3
 800747e:	2300      	movs	r3, #0
 8007480:	4602      	mov	r2, r0
 8007482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007484:	6a21      	ldr	r1, [r4, #32]
 8007486:	4628      	mov	r0, r5
 8007488:	47b0      	blx	r6
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	d106      	bne.n	800749e <__sflush_r+0x66>
 8007490:	6829      	ldr	r1, [r5, #0]
 8007492:	291d      	cmp	r1, #29
 8007494:	d82c      	bhi.n	80074f0 <__sflush_r+0xb8>
 8007496:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <__sflush_r+0x108>)
 8007498:	40ca      	lsrs	r2, r1
 800749a:	07d6      	lsls	r6, r2, #31
 800749c:	d528      	bpl.n	80074f0 <__sflush_r+0xb8>
 800749e:	2200      	movs	r2, #0
 80074a0:	6062      	str	r2, [r4, #4]
 80074a2:	04d9      	lsls	r1, r3, #19
 80074a4:	6922      	ldr	r2, [r4, #16]
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	d504      	bpl.n	80074b4 <__sflush_r+0x7c>
 80074aa:	1c42      	adds	r2, r0, #1
 80074ac:	d101      	bne.n	80074b2 <__sflush_r+0x7a>
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	b903      	cbnz	r3, 80074b4 <__sflush_r+0x7c>
 80074b2:	6560      	str	r0, [r4, #84]	; 0x54
 80074b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b6:	602f      	str	r7, [r5, #0]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	d0ca      	beq.n	8007452 <__sflush_r+0x1a>
 80074bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <__sflush_r+0x92>
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7ff fa99 	bl	80069fc <_free_r>
 80074ca:	2000      	movs	r0, #0
 80074cc:	6360      	str	r0, [r4, #52]	; 0x34
 80074ce:	e7c1      	b.n	8007454 <__sflush_r+0x1c>
 80074d0:	6a21      	ldr	r1, [r4, #32]
 80074d2:	2301      	movs	r3, #1
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	1c41      	adds	r1, r0, #1
 80074da:	d1c7      	bne.n	800746c <__sflush_r+0x34>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0c4      	beq.n	800746c <__sflush_r+0x34>
 80074e2:	2b1d      	cmp	r3, #29
 80074e4:	d001      	beq.n	80074ea <__sflush_r+0xb2>
 80074e6:	2b16      	cmp	r3, #22
 80074e8:	d101      	bne.n	80074ee <__sflush_r+0xb6>
 80074ea:	602f      	str	r7, [r5, #0]
 80074ec:	e7b1      	b.n	8007452 <__sflush_r+0x1a>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	e7ad      	b.n	8007454 <__sflush_r+0x1c>
 80074f8:	690f      	ldr	r7, [r1, #16]
 80074fa:	2f00      	cmp	r7, #0
 80074fc:	d0a9      	beq.n	8007452 <__sflush_r+0x1a>
 80074fe:	0793      	lsls	r3, r2, #30
 8007500:	680e      	ldr	r6, [r1, #0]
 8007502:	bf08      	it	eq
 8007504:	694b      	ldreq	r3, [r1, #20]
 8007506:	600f      	str	r7, [r1, #0]
 8007508:	bf18      	it	ne
 800750a:	2300      	movne	r3, #0
 800750c:	eba6 0807 	sub.w	r8, r6, r7
 8007510:	608b      	str	r3, [r1, #8]
 8007512:	f1b8 0f00 	cmp.w	r8, #0
 8007516:	dd9c      	ble.n	8007452 <__sflush_r+0x1a>
 8007518:	6a21      	ldr	r1, [r4, #32]
 800751a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800751c:	4643      	mov	r3, r8
 800751e:	463a      	mov	r2, r7
 8007520:	4628      	mov	r0, r5
 8007522:	47b0      	blx	r6
 8007524:	2800      	cmp	r0, #0
 8007526:	dc06      	bgt.n	8007536 <__sflush_r+0xfe>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752e:	81a3      	strh	r3, [r4, #12]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e78e      	b.n	8007454 <__sflush_r+0x1c>
 8007536:	4407      	add	r7, r0
 8007538:	eba8 0800 	sub.w	r8, r8, r0
 800753c:	e7e9      	b.n	8007512 <__sflush_r+0xda>
 800753e:	bf00      	nop
 8007540:	20400001 	.word	0x20400001

08007544 <_fflush_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	690b      	ldr	r3, [r1, #16]
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	b913      	cbnz	r3, 8007554 <_fflush_r+0x10>
 800754e:	2500      	movs	r5, #0
 8007550:	4628      	mov	r0, r5
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	b118      	cbz	r0, 800755e <_fflush_r+0x1a>
 8007556:	6983      	ldr	r3, [r0, #24]
 8007558:	b90b      	cbnz	r3, 800755e <_fflush_r+0x1a>
 800755a:	f000 f887 	bl	800766c <__sinit>
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <_fflush_r+0x6c>)
 8007560:	429c      	cmp	r4, r3
 8007562:	d11b      	bne.n	800759c <_fflush_r+0x58>
 8007564:	686c      	ldr	r4, [r5, #4]
 8007566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0ef      	beq.n	800754e <_fflush_r+0xa>
 800756e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007570:	07d0      	lsls	r0, r2, #31
 8007572:	d404      	bmi.n	800757e <_fflush_r+0x3a>
 8007574:	0599      	lsls	r1, r3, #22
 8007576:	d402      	bmi.n	800757e <_fflush_r+0x3a>
 8007578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757a:	f000 f915 	bl	80077a8 <__retarget_lock_acquire_recursive>
 800757e:	4628      	mov	r0, r5
 8007580:	4621      	mov	r1, r4
 8007582:	f7ff ff59 	bl	8007438 <__sflush_r>
 8007586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007588:	07da      	lsls	r2, r3, #31
 800758a:	4605      	mov	r5, r0
 800758c:	d4e0      	bmi.n	8007550 <_fflush_r+0xc>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	059b      	lsls	r3, r3, #22
 8007592:	d4dd      	bmi.n	8007550 <_fflush_r+0xc>
 8007594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007596:	f000 f908 	bl	80077aa <__retarget_lock_release_recursive>
 800759a:	e7d9      	b.n	8007550 <_fflush_r+0xc>
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <_fflush_r+0x70>)
 800759e:	429c      	cmp	r4, r3
 80075a0:	d101      	bne.n	80075a6 <_fflush_r+0x62>
 80075a2:	68ac      	ldr	r4, [r5, #8]
 80075a4:	e7df      	b.n	8007566 <_fflush_r+0x22>
 80075a6:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <_fflush_r+0x74>)
 80075a8:	429c      	cmp	r4, r3
 80075aa:	bf08      	it	eq
 80075ac:	68ec      	ldreq	r4, [r5, #12]
 80075ae:	e7da      	b.n	8007566 <_fflush_r+0x22>
 80075b0:	08007efc 	.word	0x08007efc
 80075b4:	08007f1c 	.word	0x08007f1c
 80075b8:	08007edc 	.word	0x08007edc

080075bc <std>:
 80075bc:	2300      	movs	r3, #0
 80075be:	b510      	push	{r4, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	e9c0 3300 	strd	r3, r3, [r0]
 80075c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ca:	6083      	str	r3, [r0, #8]
 80075cc:	8181      	strh	r1, [r0, #12]
 80075ce:	6643      	str	r3, [r0, #100]	; 0x64
 80075d0:	81c2      	strh	r2, [r0, #14]
 80075d2:	6183      	str	r3, [r0, #24]
 80075d4:	4619      	mov	r1, r3
 80075d6:	2208      	movs	r2, #8
 80075d8:	305c      	adds	r0, #92	; 0x5c
 80075da:	f7fb fdcd 	bl	8003178 <memset>
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <std+0x38>)
 80075e0:	6263      	str	r3, [r4, #36]	; 0x24
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <std+0x3c>)
 80075e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x40>)
 80075e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <std+0x44>)
 80075ec:	6224      	str	r4, [r4, #32]
 80075ee:	6323      	str	r3, [r4, #48]	; 0x30
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	bf00      	nop
 80075f4:	08007911 	.word	0x08007911
 80075f8:	08007933 	.word	0x08007933
 80075fc:	0800796b 	.word	0x0800796b
 8007600:	0800798f 	.word	0x0800798f

08007604 <_cleanup_r>:
 8007604:	4901      	ldr	r1, [pc, #4]	; (800760c <_cleanup_r+0x8>)
 8007606:	f000 b8af 	b.w	8007768 <_fwalk_reent>
 800760a:	bf00      	nop
 800760c:	08007545 	.word	0x08007545

08007610 <__sfmoreglue>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	2268      	movs	r2, #104	; 0x68
 8007614:	1e4d      	subs	r5, r1, #1
 8007616:	4355      	muls	r5, r2
 8007618:	460e      	mov	r6, r1
 800761a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800761e:	f7ff fa59 	bl	8006ad4 <_malloc_r>
 8007622:	4604      	mov	r4, r0
 8007624:	b140      	cbz	r0, 8007638 <__sfmoreglue+0x28>
 8007626:	2100      	movs	r1, #0
 8007628:	e9c0 1600 	strd	r1, r6, [r0]
 800762c:	300c      	adds	r0, #12
 800762e:	60a0      	str	r0, [r4, #8]
 8007630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007634:	f7fb fda0 	bl	8003178 <memset>
 8007638:	4620      	mov	r0, r4
 800763a:	bd70      	pop	{r4, r5, r6, pc}

0800763c <__sfp_lock_acquire>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sfp_lock_acquire+0x8>)
 800763e:	f000 b8b3 	b.w	80077a8 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	2000030d 	.word	0x2000030d

08007648 <__sfp_lock_release>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sfp_lock_release+0x8>)
 800764a:	f000 b8ae 	b.w	80077aa <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	2000030d 	.word	0x2000030d

08007654 <__sinit_lock_acquire>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__sinit_lock_acquire+0x8>)
 8007656:	f000 b8a7 	b.w	80077a8 <__retarget_lock_acquire_recursive>
 800765a:	bf00      	nop
 800765c:	2000030e 	.word	0x2000030e

08007660 <__sinit_lock_release>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__sinit_lock_release+0x8>)
 8007662:	f000 b8a2 	b.w	80077aa <__retarget_lock_release_recursive>
 8007666:	bf00      	nop
 8007668:	2000030e 	.word	0x2000030e

0800766c <__sinit>:
 800766c:	b510      	push	{r4, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	f7ff fff0 	bl	8007654 <__sinit_lock_acquire>
 8007674:	69a3      	ldr	r3, [r4, #24]
 8007676:	b11b      	cbz	r3, 8007680 <__sinit+0x14>
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f7ff bff0 	b.w	8007660 <__sinit_lock_release>
 8007680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007684:	6523      	str	r3, [r4, #80]	; 0x50
 8007686:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <__sinit+0x68>)
 8007688:	4a13      	ldr	r2, [pc, #76]	; (80076d8 <__sinit+0x6c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	62a2      	str	r2, [r4, #40]	; 0x28
 800768e:	42a3      	cmp	r3, r4
 8007690:	bf04      	itt	eq
 8007692:	2301      	moveq	r3, #1
 8007694:	61a3      	streq	r3, [r4, #24]
 8007696:	4620      	mov	r0, r4
 8007698:	f000 f820 	bl	80076dc <__sfp>
 800769c:	6060      	str	r0, [r4, #4]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f81c 	bl	80076dc <__sfp>
 80076a4:	60a0      	str	r0, [r4, #8]
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f818 	bl	80076dc <__sfp>
 80076ac:	2200      	movs	r2, #0
 80076ae:	60e0      	str	r0, [r4, #12]
 80076b0:	2104      	movs	r1, #4
 80076b2:	6860      	ldr	r0, [r4, #4]
 80076b4:	f7ff ff82 	bl	80075bc <std>
 80076b8:	68a0      	ldr	r0, [r4, #8]
 80076ba:	2201      	movs	r2, #1
 80076bc:	2109      	movs	r1, #9
 80076be:	f7ff ff7d 	bl	80075bc <std>
 80076c2:	68e0      	ldr	r0, [r4, #12]
 80076c4:	2202      	movs	r2, #2
 80076c6:	2112      	movs	r1, #18
 80076c8:	f7ff ff78 	bl	80075bc <std>
 80076cc:	2301      	movs	r3, #1
 80076ce:	61a3      	str	r3, [r4, #24]
 80076d0:	e7d2      	b.n	8007678 <__sinit+0xc>
 80076d2:	bf00      	nop
 80076d4:	08007a98 	.word	0x08007a98
 80076d8:	08007605 	.word	0x08007605

080076dc <__sfp>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	4607      	mov	r7, r0
 80076e0:	f7ff ffac 	bl	800763c <__sfp_lock_acquire>
 80076e4:	4b1e      	ldr	r3, [pc, #120]	; (8007760 <__sfp+0x84>)
 80076e6:	681e      	ldr	r6, [r3, #0]
 80076e8:	69b3      	ldr	r3, [r6, #24]
 80076ea:	b913      	cbnz	r3, 80076f2 <__sfp+0x16>
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff ffbd 	bl	800766c <__sinit>
 80076f2:	3648      	adds	r6, #72	; 0x48
 80076f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	d503      	bpl.n	8007704 <__sfp+0x28>
 80076fc:	6833      	ldr	r3, [r6, #0]
 80076fe:	b30b      	cbz	r3, 8007744 <__sfp+0x68>
 8007700:	6836      	ldr	r6, [r6, #0]
 8007702:	e7f7      	b.n	80076f4 <__sfp+0x18>
 8007704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007708:	b9d5      	cbnz	r5, 8007740 <__sfp+0x64>
 800770a:	4b16      	ldr	r3, [pc, #88]	; (8007764 <__sfp+0x88>)
 800770c:	60e3      	str	r3, [r4, #12]
 800770e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007712:	6665      	str	r5, [r4, #100]	; 0x64
 8007714:	f000 f847 	bl	80077a6 <__retarget_lock_init_recursive>
 8007718:	f7ff ff96 	bl	8007648 <__sfp_lock_release>
 800771c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007724:	6025      	str	r5, [r4, #0]
 8007726:	61a5      	str	r5, [r4, #24]
 8007728:	2208      	movs	r2, #8
 800772a:	4629      	mov	r1, r5
 800772c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007730:	f7fb fd22 	bl	8003178 <memset>
 8007734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800773c:	4620      	mov	r0, r4
 800773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007740:	3468      	adds	r4, #104	; 0x68
 8007742:	e7d9      	b.n	80076f8 <__sfp+0x1c>
 8007744:	2104      	movs	r1, #4
 8007746:	4638      	mov	r0, r7
 8007748:	f7ff ff62 	bl	8007610 <__sfmoreglue>
 800774c:	4604      	mov	r4, r0
 800774e:	6030      	str	r0, [r6, #0]
 8007750:	2800      	cmp	r0, #0
 8007752:	d1d5      	bne.n	8007700 <__sfp+0x24>
 8007754:	f7ff ff78 	bl	8007648 <__sfp_lock_release>
 8007758:	230c      	movs	r3, #12
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	e7ee      	b.n	800773c <__sfp+0x60>
 800775e:	bf00      	nop
 8007760:	08007a98 	.word	0x08007a98
 8007764:	ffff0001 	.word	0xffff0001

08007768 <_fwalk_reent>:
 8007768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4606      	mov	r6, r0
 800776e:	4688      	mov	r8, r1
 8007770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007774:	2700      	movs	r7, #0
 8007776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800777a:	f1b9 0901 	subs.w	r9, r9, #1
 800777e:	d505      	bpl.n	800778c <_fwalk_reent+0x24>
 8007780:	6824      	ldr	r4, [r4, #0]
 8007782:	2c00      	cmp	r4, #0
 8007784:	d1f7      	bne.n	8007776 <_fwalk_reent+0xe>
 8007786:	4638      	mov	r0, r7
 8007788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778c:	89ab      	ldrh	r3, [r5, #12]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d907      	bls.n	80077a2 <_fwalk_reent+0x3a>
 8007792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007796:	3301      	adds	r3, #1
 8007798:	d003      	beq.n	80077a2 <_fwalk_reent+0x3a>
 800779a:	4629      	mov	r1, r5
 800779c:	4630      	mov	r0, r6
 800779e:	47c0      	blx	r8
 80077a0:	4307      	orrs	r7, r0
 80077a2:	3568      	adds	r5, #104	; 0x68
 80077a4:	e7e9      	b.n	800777a <_fwalk_reent+0x12>

080077a6 <__retarget_lock_init_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <__retarget_lock_acquire_recursive>:
 80077a8:	4770      	bx	lr

080077aa <__retarget_lock_release_recursive>:
 80077aa:	4770      	bx	lr

080077ac <__swhatbuf_r>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	460e      	mov	r6, r1
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	2900      	cmp	r1, #0
 80077b6:	b096      	sub	sp, #88	; 0x58
 80077b8:	4614      	mov	r4, r2
 80077ba:	461d      	mov	r5, r3
 80077bc:	da08      	bge.n	80077d0 <__swhatbuf_r+0x24>
 80077be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	602a      	str	r2, [r5, #0]
 80077c6:	061a      	lsls	r2, r3, #24
 80077c8:	d410      	bmi.n	80077ec <__swhatbuf_r+0x40>
 80077ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ce:	e00e      	b.n	80077ee <__swhatbuf_r+0x42>
 80077d0:	466a      	mov	r2, sp
 80077d2:	f000 f903 	bl	80079dc <_fstat_r>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	dbf1      	blt.n	80077be <__swhatbuf_r+0x12>
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077e4:	425a      	negs	r2, r3
 80077e6:	415a      	adcs	r2, r3
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	e7ee      	b.n	80077ca <__swhatbuf_r+0x1e>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	2000      	movs	r0, #0
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	b016      	add	sp, #88	; 0x58
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080077f8 <__smakebuf_r>:
 80077f8:	898b      	ldrh	r3, [r1, #12]
 80077fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077fc:	079d      	lsls	r5, r3, #30
 80077fe:	4606      	mov	r6, r0
 8007800:	460c      	mov	r4, r1
 8007802:	d507      	bpl.n	8007814 <__smakebuf_r+0x1c>
 8007804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	2301      	movs	r3, #1
 800780e:	6163      	str	r3, [r4, #20]
 8007810:	b002      	add	sp, #8
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	ab01      	add	r3, sp, #4
 8007816:	466a      	mov	r2, sp
 8007818:	f7ff ffc8 	bl	80077ac <__swhatbuf_r>
 800781c:	9900      	ldr	r1, [sp, #0]
 800781e:	4605      	mov	r5, r0
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff f957 	bl	8006ad4 <_malloc_r>
 8007826:	b948      	cbnz	r0, 800783c <__smakebuf_r+0x44>
 8007828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782c:	059a      	lsls	r2, r3, #22
 800782e:	d4ef      	bmi.n	8007810 <__smakebuf_r+0x18>
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	f043 0302 	orr.w	r3, r3, #2
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	e7e3      	b.n	8007804 <__smakebuf_r+0xc>
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <__smakebuf_r+0x7c>)
 800783e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	6020      	str	r0, [r4, #0]
 8007844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	9b00      	ldr	r3, [sp, #0]
 800784c:	6163      	str	r3, [r4, #20]
 800784e:	9b01      	ldr	r3, [sp, #4]
 8007850:	6120      	str	r0, [r4, #16]
 8007852:	b15b      	cbz	r3, 800786c <__smakebuf_r+0x74>
 8007854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007858:	4630      	mov	r0, r6
 800785a:	f000 f8d1 	bl	8007a00 <_isatty_r>
 800785e:	b128      	cbz	r0, 800786c <__smakebuf_r+0x74>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	89a0      	ldrh	r0, [r4, #12]
 800786e:	4305      	orrs	r5, r0
 8007870:	81a5      	strh	r5, [r4, #12]
 8007872:	e7cd      	b.n	8007810 <__smakebuf_r+0x18>
 8007874:	08007605 	.word	0x08007605

08007878 <_malloc_usable_size_r>:
 8007878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800787c:	1f18      	subs	r0, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfbc      	itt	lt
 8007882:	580b      	ldrlt	r3, [r1, r0]
 8007884:	18c0      	addlt	r0, r0, r3
 8007886:	4770      	bx	lr

08007888 <_raise_r>:
 8007888:	291f      	cmp	r1, #31
 800788a:	b538      	push	{r3, r4, r5, lr}
 800788c:	4604      	mov	r4, r0
 800788e:	460d      	mov	r5, r1
 8007890:	d904      	bls.n	800789c <_raise_r+0x14>
 8007892:	2316      	movs	r3, #22
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800789e:	b112      	cbz	r2, 80078a6 <_raise_r+0x1e>
 80078a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078a4:	b94b      	cbnz	r3, 80078ba <_raise_r+0x32>
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f830 	bl	800790c <_getpid_r>
 80078ac:	462a      	mov	r2, r5
 80078ae:	4601      	mov	r1, r0
 80078b0:	4620      	mov	r0, r4
 80078b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b6:	f000 b817 	b.w	80078e8 <_kill_r>
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d00a      	beq.n	80078d4 <_raise_r+0x4c>
 80078be:	1c59      	adds	r1, r3, #1
 80078c0:	d103      	bne.n	80078ca <_raise_r+0x42>
 80078c2:	2316      	movs	r3, #22
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	2001      	movs	r0, #1
 80078c8:	e7e7      	b.n	800789a <_raise_r+0x12>
 80078ca:	2400      	movs	r4, #0
 80078cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078d0:	4628      	mov	r0, r5
 80078d2:	4798      	blx	r3
 80078d4:	2000      	movs	r0, #0
 80078d6:	e7e0      	b.n	800789a <_raise_r+0x12>

080078d8 <raise>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <raise+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f7ff bfd3 	b.w	8007888 <_raise_r>
 80078e2:	bf00      	nop
 80078e4:	2000000c 	.word	0x2000000c

080078e8 <_kill_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	; (8007908 <_kill_r+0x20>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	f7f9 fe89 	bl	800160c <_kill>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	d102      	bne.n	8007904 <_kill_r+0x1c>
 80078fe:	682b      	ldr	r3, [r5, #0]
 8007900:	b103      	cbz	r3, 8007904 <_kill_r+0x1c>
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	20000308 	.word	0x20000308

0800790c <_getpid_r>:
 800790c:	f7f9 be76 	b.w	80015fc <_getpid>

08007910 <__sread>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	f000 f894 	bl	8007a44 <_read_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	bfab      	itete	ge
 8007920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007922:	89a3      	ldrhlt	r3, [r4, #12]
 8007924:	181b      	addge	r3, r3, r0
 8007926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800792a:	bfac      	ite	ge
 800792c:	6563      	strge	r3, [r4, #84]	; 0x54
 800792e:	81a3      	strhlt	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__swrite>:
 8007932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	461f      	mov	r7, r3
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	05db      	lsls	r3, r3, #23
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	4616      	mov	r6, r2
 8007942:	d505      	bpl.n	8007950 <__swrite+0x1e>
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	2302      	movs	r3, #2
 800794a:	2200      	movs	r2, #0
 800794c:	f000 f868 	bl	8007a20 <_lseek_r>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	4632      	mov	r2, r6
 800795e:	463b      	mov	r3, r7
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	f000 b817 	b.w	8007998 <_write_r>

0800796a <__sseek>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 f855 	bl	8007a20 <_lseek_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	bf15      	itete	ne
 800797c:	6560      	strne	r0, [r4, #84]	; 0x54
 800797e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007986:	81a3      	strheq	r3, [r4, #12]
 8007988:	bf18      	it	ne
 800798a:	81a3      	strhne	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__sclose>:
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 b813 	b.w	80079bc <_close_r>
	...

08007998 <_write_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	; (80079b8 <_write_r+0x20>)
 800799c:	4604      	mov	r4, r0
 800799e:	4608      	mov	r0, r1
 80079a0:	4611      	mov	r1, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7f9 fe67 	bl	800167a <_write>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_write_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_write_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20000308 	.word	0x20000308

080079bc <_close_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d06      	ldr	r5, [pc, #24]	; (80079d8 <_close_r+0x1c>)
 80079c0:	2300      	movs	r3, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7f9 fe73 	bl	80016b2 <_close>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_close_r+0x1a>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_close_r+0x1a>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	20000308 	.word	0x20000308

080079dc <_fstat_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d07      	ldr	r5, [pc, #28]	; (80079fc <_fstat_r+0x20>)
 80079e0:	2300      	movs	r3, #0
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	4611      	mov	r1, r2
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	f7f9 fe6e 	bl	80016ca <_fstat>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d102      	bne.n	80079f8 <_fstat_r+0x1c>
 80079f2:	682b      	ldr	r3, [r5, #0]
 80079f4:	b103      	cbz	r3, 80079f8 <_fstat_r+0x1c>
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	bd38      	pop	{r3, r4, r5, pc}
 80079fa:	bf00      	nop
 80079fc:	20000308 	.word	0x20000308

08007a00 <_isatty_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d06      	ldr	r5, [pc, #24]	; (8007a1c <_isatty_r+0x1c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	f7f9 fe6d 	bl	80016ea <_isatty>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_isatty_r+0x1a>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_isatty_r+0x1a>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	20000308 	.word	0x20000308

08007a20 <_lseek_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d07      	ldr	r5, [pc, #28]	; (8007a40 <_lseek_r+0x20>)
 8007a24:	4604      	mov	r4, r0
 8007a26:	4608      	mov	r0, r1
 8007a28:	4611      	mov	r1, r2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	602a      	str	r2, [r5, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f7f9 fe66 	bl	8001700 <_lseek>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_lseek_r+0x1e>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_lseek_r+0x1e>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20000308 	.word	0x20000308

08007a44 <_read_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d07      	ldr	r5, [pc, #28]	; (8007a64 <_read_r+0x20>)
 8007a48:	4604      	mov	r4, r0
 8007a4a:	4608      	mov	r0, r1
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	602a      	str	r2, [r5, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	f7f9 fdf4 	bl	8001640 <_read>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_read_r+0x1e>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_read_r+0x1e>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	20000308 	.word	0x20000308

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
